// generated by 'threeport-sdk gen' - do not edit

//go:build mage
// +build mage

package main

import (
	"fmt"
	"os/exec"
)

// BuildApi builds the REST API binary.
func BuildApi() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/rest-api",
		"cmd/rest-api/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for API with output '%s': %w", output, err)
	}

	fmt.Println("API binary built and available at bin/rest-api")

	return nil
}

// BuildSecretController builds the binary for the secret-controller.
func BuildSecretController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/secret-controller",
		"cmd/secret-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for secret-controller with output '%s': %w", output, err)
	}

	fmt.Println("secret-controller binary built and available at bin/secret-controller")

	return nil
}

// BuildAwsController builds the binary for the aws-controller.
func BuildAwsController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/aws-controller",
		"cmd/aws-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for aws-controller with output '%s': %w", output, err)
	}

	fmt.Println("aws-controller binary built and available at bin/aws-controller")

	return nil
}

// BuildControlPlaneController builds the binary for the control-plane-controller.
func BuildControlPlaneController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/control-plane-controller",
		"cmd/control-plane-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for control-plane-controller with output '%s': %w", output, err)
	}

	fmt.Println("control-plane-controller binary built and available at bin/control-plane-controller")

	return nil
}

// BuildGatewayController builds the binary for the gateway-controller.
func BuildGatewayController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/gateway-controller",
		"cmd/gateway-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for gateway-controller with output '%s': %w", output, err)
	}

	fmt.Println("gateway-controller binary built and available at bin/gateway-controller")

	return nil
}

// BuildHelmWorkloadController builds the binary for the helm-workload-controller.
func BuildHelmWorkloadController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/helm-workload-controller",
		"cmd/helm-workload-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for helm-workload-controller with output '%s': %w", output, err)
	}

	fmt.Println("helm-workload-controller binary built and available at bin/helm-workload-controller")

	return nil
}

// BuildKubernetesRuntimeController builds the binary for the kubernetes-runtime-controller.
func BuildKubernetesRuntimeController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/kubernetes-runtime-controller",
		"cmd/kubernetes-runtime-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for kubernetes-runtime-controller with output '%s': %w", output, err)
	}

	fmt.Println("kubernetes-runtime-controller binary built and available at bin/kubernetes-runtime-controller")

	return nil
}

// BuildObservabilityController builds the binary for the observability-controller.
func BuildObservabilityController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/observability-controller",
		"cmd/observability-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for observability-controller with output '%s': %w", output, err)
	}

	fmt.Println("observability-controller binary built and available at bin/observability-controller")

	return nil
}

// BuildTerraformController builds the binary for the terraform-controller.
func BuildTerraformController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/terraform-controller",
		"cmd/terraform-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for terraform-controller with output '%s': %w", output, err)
	}

	fmt.Println("terraform-controller binary built and available at bin/terraform-controller")

	return nil
}

// BuildWorkloadController builds the binary for the workload-controller.
func BuildWorkloadController() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/workload-controller",
		"cmd/workload-controller/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for workload-controller with output '%s': %w", output, err)
	}

	fmt.Println("workload-controller binary built and available at bin/workload-controller")

	return nil
}

func Docs() error {
	docsDestination := "pkg/api-server/v0/docs"
	swagCmd := exec.Command(
		"swag",
		"init",
		"--dir",
		"cmd/rest-api,pkg/api,pkg/api-server/v0",
		"--parseDependency",
		"--generalInfo",
		"main_gen.go",
		"--output",
		docsDestination,
	)

	output, err := swagCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("API docs generation failed with output '%s': %w", output, err)
	}

	fmt.Printf("API docs generated in %s\n", docsDestination)

	return nil
}
