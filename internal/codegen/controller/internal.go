package controller

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
)

// InternalPackage generates the controller's general internal package source
// code.
func (cc *ControllerConfig) InternalPackage() error {
	f := NewFile(cc.PackageName)
	f.HeaderComment("generated by 'threeport-codegen controller' - do not edit")

	f.Comment(fmt.Sprintf(
		"The name and description of the NATS bucket used for %s object locks",
		strcase.ToDelimited(cc.ShortName, ' '),
	))
	f.Const().Defs(
		Id("LockBucketName").Op("=").Lit(fmt.Sprintf(
			"%sLock",
			strcase.ToLowerCamel(cc.ShortName),
		)),
		Id("LockBucketDescr").Op("=").Lit(fmt.Sprintf(
			"contains locks on %s objects",
			strcase.ToDelimited(cc.ShortName, ' '),
		)),
	)

	// write code to file
	genFilename := fmt.Sprintf("%s_gen.go", strcase.ToSnake(cc.ShortName))
	genFilepath := filepath.Join(controllerInternalPackagePath(cc.PackageName), genFilename)
	file, err := os.OpenFile(genFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed open file to write generated code for %s internal package file: %w", cc.ShortName, err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for %s internal package file: %w", cc.ShortName, err)
	}
	fmt.Printf("code generation complete for %s internal package file\n", cc.ShortName)

	return nil
}
