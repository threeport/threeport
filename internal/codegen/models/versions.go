package models

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"

	"github.com/threeport/threeport/internal/codegen"
)

// apiVersionsPath returns the path from the models to the API's internal
// versions package.
func apiVersionsPath() string {
	return filepath.Join("..", "..", "..", "internal", "api", "versions")
}

// ModelVersions adds each API version and validation for the fields of the
// model.
func (cc *ControllerConfig) ModelVersions() error {
	f := NewFile("versions")
	f.HeaderComment("generated by 'threeport-codegen api-model' - do not edit")
	f.ImportAlias("github.com/threeport/threeport/internal/api", "iapi")

	for _, mc := range cc.ModelConfigs {
		taggedFieldsMapName := fmt.Sprintf("%sTaggedFields", mc.TypeName)

		f.Comment(fmt.Sprintf(
			"Add%sVersions adds field validation info and adds it",
			mc.TypeName,
		))
		f.Comment("to the REST API versions.")
		f.Func().Id(
			fmt.Sprintf("Add%sVersions", mc.TypeName),
		).Call().Block(
			Qual(
				"github.com/threeport/threeport/internal/api",
				taggedFieldsMapName,
			).Index(Qual(
				"github.com/threeport/threeport/internal/api",
				"TagNameValidate",
			)).Op("=").Op("&").Qual(
				"github.com/threeport/threeport/internal/api",
				"FieldsByTag",
			).Values(Dict{
				Id("TagName"): Qual(
					"github.com/threeport/threeport/internal/api",
					"TagNameValidate",
				),
				Id("Required"):             Index().String().Values(),
				Id("Optional"):             Index().String().Values(),
				Id("OptionalAssociations"): Index().String().Values(),
			}),
			Line(),
			Comment("parse struct and populate the FieldsByTag object"),
			Qual(
				"github.com/threeport/threeport/internal/api",
				"ParseStruct",
			).Call(Line().Qual(
				"github.com/threeport/threeport/internal/api",
				"TagNameValidate",
			).Op(",").Line().Qual(
				"reflect",
				"ValueOf",
			).Call(Id("new").Call(Qual(
				"github.com/threeport/threeport/pkg/api/v0",
				mc.TypeName,
			))).Op(",").Line().Lit("").Op(",").Line().Qual(
				"github.com/threeport/threeport/internal/api",
				"Translate",
			).Op(",").Line().Qual(
				"github.com/threeport/threeport/internal/api",
				taggedFieldsMapName,
			).Op(",").Line(),
			),
			Line(),
			Comment("create a version object which contains the object name and versions"),
			Id("versionObj").Op(":=").Qual(
				"github.com/threeport/threeport/internal/api",
				"VersionObject",
			).Values(Dict{
				Id("Version"): Qual(
					"github.com/threeport/threeport/internal/api",
					"V0",
				),
				Id("Object"): Id("string").Call(Qual(
					"github.com/threeport/threeport/pkg/api/v0",
					fmt.Sprintf("ObjectType%s", mc.TypeName),
				)),
			}),
			Line(),
			Comment("add the object tagged fields to the global tagged fields map"),
			Qual(
				"github.com/threeport/threeport/internal/api",
				"ObjectTaggedFields",
			).Index(Id("versionObj")).Op("=").Qual(
				"github.com/threeport/threeport/internal/api",
				taggedFieldsMapName,
			).Index(Qual(
				"github.com/threeport/threeport/internal/api",
				"TagNameValidate",
			)),
			Line(),
			Comment("add the object tagged fields to the rest API version"),
			Qual(
				"github.com/threeport/threeport/pkg/api",
				"AddRestApiVersion",
			).Call(Id("versionObj")),
		)
		f.Line()
	}

	// write code to file
	genFilename := fmt.Sprintf("%s_gen.go", codegen.FilenameSansExt(cc.ModelFilename))
	genFilepath := filepath.Join(apiVersionsPath(), genFilename)
	file, err := os.OpenFile(genFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file to write generated code for API versions: %w", err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for API versions: %w", err)
	}
	fmt.Printf("code generation complete for %s API versions\n", cc.ControllerDomainLower)

	return nil
}
