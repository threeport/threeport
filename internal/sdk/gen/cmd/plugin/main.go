package plugin

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenPluginMain generates the main package for extension tptctl plugins.
func GenPluginMain(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("main")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	packageDir := strcase.ToSnake(sdkConfig.ExtensionName)

	f.Comment("Register registers this plugin with tptctl.")
	f.Func().Id("Register").Params(Id("rootCmd").Op("*").Qual(
		"github.com/spf13/cobra",
		"Command",
	)).Block(
		Id("rootCmd").Dot("AddCommand").Call(Qual(
			fmt.Sprintf("%s/cmd/%s/cmd", gen.ModulePath, packageDir),
			fmt.Sprintf("%sCmd", strcase.ToCamel(sdkConfig.ExtensionName)),
		)),
	)

	// write code to file
	genFilepath := filepath.Join(
		"cmd",
		packageDir,
		"main_gen.go",
	)
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for extension plugin main package written to %s", genFilepath))

	return nil
}
