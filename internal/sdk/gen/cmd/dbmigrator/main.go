package dbmigrator

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenDbMigratorMain generates source code for the DB migrator main package.
func GenDbMigratorMain(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("main")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	// set import for api-server database package
	apiServerDbPkg := fmt.Sprintf("%s/pkg/api-server/v0/database", gen.ModulePath)

	// set table name for goose table that tracks DB version
	gooseVersionTableName := "threeport_goose_db_version"
	if gen.Extension {
		gooseVersionTableName = fmt.Sprintf(
			"threeport_%s_goose_db_version",
			strcase.ToSnake(sdkConfig.ExtensionName),
		)
	}

	f.ImportAlias("github.com/threeport/threeport/pkg/cli/v0", "cli")
	f.ImportAlias("github.com/threeport/threeport/pkg/log/v0", "log")
	f.ImportAlias("github.com/pressly/goose/v3", "goose")
	f.Anon("github.com/lib/pq")
	if gen.Extension {
		f.Anon("github.com/threeport/wordpress-controller/cmd/database-migrator/migrations")
	} else {
		f.Anon("github.com/threeport/threeport/cmd/database-migrator/migrations")
	}

	f.Var().Defs(
		Id("AllowedCommands").Op("=").Index().String().Values(
			Lit("up"), Lit("up-to"), Lit("up-by-one"), Lit("down"), Lit("down-to"), Lit("redo"), Lit("status"),
		),
		Id("envFile").Op("=").Lit(""),
	)

	f.Func().Id("main").Params().Block(
		Qual("flag", "StringVar").Call(
			Id("&envFile"),
			Lit("env-file"), Lit(""), Lit("File from which to load environment"),
		),
		Id("flag").Dot("Parse").Call(),
		Line(),

		Id("args").Op(":=").Id("flag").Dot("Args").Call(),
		Id("command").Op(":=").Id("args").Index(Lit(0)),
		Line(),

		Id("found").Op(":=").False(),
		For(List(Id("_"), Id("c")).Op(":=").Range().Id("AllowedCommands")).Block(
			If(Id("command").Op("==").Id("c")).Block(
				Id("found").Op("=").True(),
			),
		),
		Line(),

		If(Op("!").Id("found")).Block(
			Qual(
				"github.com/threeport/threeport/pkg/cli/v0",
				"Error",
			).Call(Qual("fmt", "Sprintf").Call(
				Line().Lit("provided command not in list of commands: %s"),
				Line().Qual("strings", "Join").Call(
					Id("AllowedCommands").Index(Op(":")),
					Lit(",")),
			),
				Line().Nil(),
				Line(),
			),
			Qual("os", "Exit").Call(Lit(1)),
		),
		Line(),

		Id("dir").Op(":=").Lit("."),
		Line(),

		Comment("env vars for database and NATS connection"),
		If(Id("envFile").Op("!=").Lit("")).Block(
			If(Err().Op(":=").Qual("github.com/joho/godotenv", "Load").Call(
				Id("envFile"),
			), Err().Op("!=").Nil()).Block(
				Id("cli").Dot("Error").Call(Lit("failed to load environment variables."), Err()),
				Id("os").Dot("Exit").Call(Lit(1)),
			),
		),
		Line(),

		Comment("get DSN for database connection"),
		List(Id("dsn"), Err()).Op(":=").Qual(
			apiServerDbPkg,
			"GetDsn",
		).Call(),
		If(Err().Op("!=").Nil()).Block(
			Id("cli").Dot("Error").Call(Lit("failed to populate DB DSN from environment"), Err()),
			Id("os").Dot("Exit").Call(Lit(1)),
		),
		Line(),

		List(Id("db"), Err()).Op(":=").Qual(
			"github.com/pressly/goose/v3",
			"OpenDBWithDriver",
		).Call(Lit("postgres"), Id("dsn")),
		If(Err().Op("!=").Nil()).Block(
			Id("cli").Dot("Error").Call(Lit("goose: failed to open DB:\n"), Err()),
			Id("os").Dot("Exit").Call(Lit(1)),
		),
		Line(),

		Defer().Func().Params().Block(
			If(Err().Op(":=").Id("db").Dot("Close").Call(), Err().Op("!=").Nil()).Block(
				Id("cli").Dot("Error").Call(Lit("goose: failed to close DB:\n"), Err()),
				Id("os").Dot("Exit").Call(Lit(1)),
			),
		).Call(),
		Line(),

		Id("arguments").Op(":=").Index().String().Values(),
		If(Len(Id("args")).Op(">").Lit(1)).Block(
			Id("arguments").Op("=").Id("args").Index(Lit(1).Op(":")),
		),
		Line(),

		Id("ctx").Op(":=").Qual("context", "TODO").Call(),
		Line(),

		List(Id("logger"), Err()).Op(":=").Qual(
			"github.com/threeport/threeport/pkg/log/v0",
			"NewLogger",
		).Call(False()),
		If(Err().Op("!=").Nil()).Block(
			Id("cli").Dot("Error").Call(Lit("could not create logger:\n"), Err()),
			Id("os").Dot("Exit").Call(Lit(1)),
		),
		Line(),

		List(Id("gormdb"), Err()).Op(":=").Qual("gorm.io/gorm", "Open").Call(
			Qual(
				"gorm.io/driver/postgres",
				"Open",
			).Call(Id("dsn")), Op("&").Qual("gorm.io/gorm", "Config").Values(Dict{
				Id("Logger"): Op("&").Qual(
					apiServerDbPkg,
					"ZapLogger",
				).Values(Dict{
					Id("Logger"): Id("&logger"),
				}),
				Id("NowFunc"): Func().Params().Qual("time", "Time").Block(
					List(Id("utc"), Id("_")).Op(":=").Qual("time", "LoadLocation").Call(Lit("UTC")),
					Return(Qual("time", "Now").Call().Dot("In").Call(
						Id("utc"),
					).Dot("Truncate").Call(Qual("time", "Microsecond"))),
				),
			})),
		Line(),

		If(Err().Op("!=").Nil()).Block(
			Id("cli").Dot("Error").Call(Lit("could not create gorm db object:\n"), Err()),
			Id("os").Dot("Exit").Call(Lit(1)),
		),
		Line(),

		Id("ctx").Op("=").Qual("context", "WithValue").Call(Id("ctx"), Lit("gormdb"), Id("gormdb")),
		Line(),

		Qual("github.com/pressly/goose/v3", "SetTableName").Call(Lit(gooseVersionTableName)),
		Line(),

		If(Err().Op(":=").Qual(
			"github.com/pressly/goose/v3",
			"RunContext",
		).Call(
			Id("ctx"), Id("command"), Id("db"), Id("dir"), Id("arguments").Op("..."),
		), Err().Op("!=").Nil()).Block(
			Id("cli").Dot("Error").Call(Qual("fmt", "Sprintf").Call(
				Lit("goose context run failed %s:"), Id("command"),
			), Err()),
			Id("os").Dot("Exit").Call(Lit(1)),
		),
		Line(),
	)

	// write code to file
	genFilepath := filepath.Join("cmd", "database-migrator", "main_gen.go")
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for DB migrator main package written to %s", genFilepath))

	return nil
}
