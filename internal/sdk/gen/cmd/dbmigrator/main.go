package dbmigrator

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenDbMigratorMain generates source code for the DB migrator main package.
func GenDbMigratorMain(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("main")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	// set table name for goose table that tracks DB version
	gooseVersionTableName := "threeport_goose_db_version"
	if gen.Module {
		gooseVersionTableName = fmt.Sprintf(
			"threeport_%s_goose_db_version",
			strcase.ToSnake(sdkConfig.ModuleName),
		)
	}

	f.ImportAlias("github.com/pressly/goose/v3", "goose")
	f.ImportAlias("github.com/threeport/threeport/pkg/cli/v0", "cli")
	f.ImportAlias("github.com/threeport/threeport/pkg/log/v0", "log")
	f.Anon("github.com/lib/pq")

	var installerPath string
	var apiServerDbPath string
	if gen.Module {
		installerPath = fmt.Sprintf("%s/pkg/installer/v0", gen.ModulePath)
		apiServerDbPath = fmt.Sprintf("%s/pkg/api-server/v0/database", gen.ModulePath)
		f.ImportAlias(
			installerPath,
			"installer",
		)
		f.Anon(fmt.Sprintf("%s/cmd/database-migrator/migrations", gen.ModulePath))
	} else {
		installerPath = "github.com/threeport/threeport/pkg/threeport-installer/v0"
		apiServerDbPath = "github.com/threeport/threeport/pkg/api-server/v0/database"
		f.ImportAlias(installerPath, "installer")
		f.Anon("github.com/threeport/threeport/cmd/database-migrator/migrations")
	}

	f.Var().Defs(
		Id("gooseCommands").Op("=").Index().String().Values(
			Lit("up"), Lit("up-to"), Lit("up-by-one"), Lit("down"), Lit("down-to"), Lit("redo"), Lit("status"),
		),
		Id("envFile").Op("=").Lit(""),
	)

	f.Func().Id("main").Params().Block(
		Qual("flag", "StringVar").Call(
			Id("&envFile"), Lit("env-file"), Lit(""), Lit("File from which to load environment"),
		),
		Qual("flag", "Parse").Call(),
		Line(),

		Comment("initialize logger"),
		List(Id("logger"), Id("err")).Op(":=").Qual(
			"github.com/threeport/threeport/pkg/log/v0",
			"NewLogger",
		).Call(False()),
		If(Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("could not create logger"), Id("err")),
		),
		Line(),

		Comment("env vars for database connection"),
		If(Id("envFile").Op("!=").Lit("")).Block(
			If(Err().Op(":=").Qual("github.com/joho/godotenv", "Load").Call(
				Id("envFile"),
			), Err().Op("!=").Nil()).Block(
				Id("returnErr").Call(Lit("failed to load environment variables"), Id("err")),
			),
		),
		Line(),

		Id("args").Op(":=").Qual("flag", "Args").Call(),
		Id("command").Op(":=").Id("args").Index(Lit(0)),
		Id("arguments").Op(":=").Index().String().Values(),
		If(Len(Id("args")).Op(">").Lit(1)).Block(
			Id("arguments").Op("=").Id("args").Index(Lit(1).Op(":")),
		),
		Line(),

		Comment("validate command arg"),
		Var().Id("found").Bool(),
		For(List(Id("_"), Id("c")).Op(":=").Range().Id("validArgs").Call()).Block(
			If(Id("command").Op("==").Id("c")).Block(
				Id("found").Op("=").True(),
				Break(),
			),
		),
		If(Op("!").Id("found")).Block(
			Id("returnErr").Call(
				Lit(""), Qual("fmt", "Errorf").Call(Lit("%s is not a valid argument"), Id("command")),
			),
		),
		Line(),

		Switch(Id("command")).Block(
			Case(Lit("initialize")).Block(
				If(Id("err").Op(":=").Id("initializeDb").Call(Id("logger")), Id("err").Op("!=").Nil()).Block(
					Id("returnErr").Call(Lit("failed to initialize database and user"), Id("err")),
				),
				Qual("os", "Exit").Call(Lit(0)),
			),
			Default().Block(
				If(Id("err").Op(":=").Id("migrateDb").Call(
					Id("command"), Id("arguments"), Id("logger"),
				), Id("err").Op("!=").Nil()).Block(
					Id("returnErr").Call(Lit("failed to migrate database schema"), Id("err")),
				),
			),
		),
		Line(),

		Qual("os", "Exit").Call(Lit(0)),
	)
	f.Line()

	f.Comment("migrateDb runs the provided goose command - usually the 'up' command to apply")
	f.Comment("migrations.")
	f.Func().Id("migrateDb").Params(
		Line().Id("command").String(),
		Line().Id("arguments").Index().String(),
		Line().Id("logger").Qual("go.uber.org/zap", "Logger"),
		Line(),
	).Params(Error()).Block(
		Comment("get non-root database connection string"),
		List(Id("dsn"), Id("err")).Op(":=").Qual(apiServerDbPath, "GetDsn").Call(False()),
		If(Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("failed to populate DB DSN from environment"), Id("err")),
		),
		Line(),

		Comment("configure goose driver"),
		List(Id("db"), Id("err")).Op(":=").Qual(
			"github.com/pressly/goose/v3",
			"OpenDBWithDriver",
		).Call(Lit("postgres"), Id("dsn")),
		If(Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("goose failed to open DB"), Id("err")),
		),
		Defer().Func().Params().Block(
			If(Id("err").Op(":=").Id("db").Dot("Close").Call(), Id("err").Op("!=").Nil()).Block(
				Id("returnErr").Call(Lit("goose failed to close DB"), Id("err")),
			),
		).Call(),
		Line(),

		Comment("configure gorm DB"),
		List(Id("gormdb"), Id("err")).Op(":=").Qual("gorm.io/gorm", "Open").Call(
			Qual("gorm.io/driver/postgres", "Open").Call(Id("dsn")),
			Op("&").Qual("gorm.io/gorm", "Config").Values(Dict{
				Id("Logger"): Op("&").Qual(apiServerDbPath, "ZapLogger").Values(Dict{
					Id("Logger"): Op("&").Id("logger"),
				}),
				Id("NowFunc"): Func().Params().Qual("time", "Time").Block(
					Id("utc").Op(",").Op("_").Op(":=").Qual("time", "LoadLocation").Call(Lit("UTC")),
					Return(Qual("time", "Now").Call().Dot("In").Call(
						Id("utc"),
					).Dot("Truncate").Call(Qual("time", "Microsecond"))),
				),
			}),
		),
		If(Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("could not create gorm db object"), Id("err")),
		),
		Line(),

		Comment("run migrations"),
		Id("ctx").Op(":=").Qual("context", "WithValue").Call(
			Qual("context", "TODO").Call(), Lit("gormdb"), Id("gormdb"),
		),
		Qual("github.com/pressly/goose/v3", "SetTableName").Call(Lit(gooseVersionTableName)),
		If(Id("err").Op(":=").Qual("github.com/pressly/goose/v3", "RunContext").Call(
			Id("ctx"), Id("command"), Id("db"), Lit("."), Id("arguments").Op("..."),
		), Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(
				Qual("fmt", "Sprintf").Call(Lit("goose %s command failed"), Id("command")), Id("err"),
			),
		),
		Line(),

		Id("logger").Dot("Info").Call(Lit("database schema successfully migrated")),
		Line(),

		Return(Nil()),
	)
	f.Line()

	f.Comment("initializeDb creates the database and user using root database user.")
	f.Func().Id("initializeDb").Params(
		Id("logger").Qual("go.uber.org/zap", "Logger"),
	).Params(Error()).Block(
		List(Id("dsn"), Id("err")).Op(":=").Qual(apiServerDbPath, "GetDsn").Call(True()),
		If(Id("err").Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("failed to get data source string: %w"), Id("err"))),
		),
		Line(),

		Comment("at deployment time, this is the first database connection made so we"),
		Comment("retry the connection for 5 min before returning an error"),
		Var().Id("connAttemptsMax").Op("=").Lit(30),
		Var().Id("connAttemptIntervalSeconds").Op("=").Lit(10),
		Var().Id("connAttempts").Op("=").Lit(0),
		Var().Id("gormDb").Op("*").Qual("gorm.io/gorm", "DB"),
		Var().Id("dbConnErr").Error(),
		For(Id("connAttempts").Op("<").Id("connAttemptsMax")).Block(
			List(Id("db"), Id("err")).Op(":=").Qual("gorm.io/gorm", "Open").Call(
				Qual("gorm.io/driver/postgres", "Open").Call(Id("dsn")),
				Op("&").Qual("gorm.io/gorm", "Config").Values(Dict{
					Id("Logger"): Op("&").Qual(apiServerDbPath, "ZapLogger").Values(Dict{
						Id("Logger"): Op("&").Id("logger"),
					}),
					Id("NowFunc"): Func().Params().Qual("time", "Time").Block(
						Id("utc").Op(",").Op("_").Op(":=").Qual("time", "LoadLocation").Call(Lit("UTC")),
						Return(Qual("time", "Now").Call().Dot("In").Call(Id("utc")).Dot("Truncate").Call(
							Qual("time", "Microsecond"),
						)),
					),
				}),
			),
			If(Id("err").Op("!=").Nil()).Block(
				Id("logger").Dot("Info").Call(Qual("fmt", "Sprintf").Call(
					Line().Lit("failed to make DB connection, retrying in %d seconds"),
					Line().Id("connAttemptIntervalSeconds"),
					Line(),
				)),
				Id("dbConnErr").Op("=").Id("err"),
			).Else().Block(
				Id("gormDb").Op("=").Id("db"),
				Break(),
			),
			Id("connAttempts").Op("++"),
			Qual("time", "Sleep").Call(Qual("time", "Second").Op("*").Qual("time", "Duration").Call(
				Id("connAttemptIntervalSeconds"),
			)),
		),
		If(Id("gormDb").Op("==").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(
				Lit("timed out after 5 mim attempting to make database connection: %w"), Id("dbConnErr"),
			)),
		),
		Line(),

		Comment("execute SQL init script"),
		Id("sqlFile").Op(":=").Qual("path/filepath", "Join").Call(
			Qual(installerPath, "DbInitLocation"), Qual(installerPath, "DbInitFilename"),
		),
		List(Id("sqlScript"), Id("err")).Op(":=").Qual("io/ioutil", "ReadFile").Call(Id("sqlFile")),
		If(Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("failed to read SQL init script"), Id("err")),
		),
		If(Id("err").Op(":=").Id("gormDb").Dot("Exec").Call(String().Call(
			Id("sqlScript"),
		)).Dot("Error"), Id("err").Op("!=").Nil()).Block(
			Id("returnErr").Call(Lit("failed to execute SQL init script"), Id("err")),
		),
		Line(),

		Id("logger").Dot("Info").Call(Lit("database successfully initialized")),
		Line(),

		Return(Nil()),
	)

	f.Comment("returnErr returns errors with usage info and exits with non-zero")
	f.Func().Id("returnErr").Params(
		Id("msg").String(),
		Id("err").Error(),
	).Block(
		Qual("github.com/threeport/threeport/pkg/cli/v0", "Error").Call(Id("msg"), Id("err")),
		Id("usage").Call(),
		Qual("os", "Exit").Call(Lit(1)),
	)
	f.Line()

	f.Comment("usage prints the usage info for database-migrator")
	f.Func().Id("usage").Params().Block(
		Id("args").Op(":=").Id("validArgs").Call(),
		Qual("fmt", "Printf").Call(
			Lit(`database-migrator initializes and manages the database schema for the Threeport API

usage: database-migrator [-env-file /path/to/environment_file] <arguments>

valid arguments: %s

examples:
	Initialize the database by creating database and user:
	database-migrator -env-file=/etc/threeport/env initialize

	Run database migrations to apply database schema:
	database-migrator -env-file=/etc/threeport/env up
}\n`), Id("args"),
		),
	)
	f.Line()

	f.Comment("validArgs returns all valid arguments to database-migrator")
	f.Func().Id("validArgs").Params().Index().String().Block(
		Return(Append(Id("gooseCommands"), Lit("initialize"))),
	)

	// write code to file
	genFilepath := filepath.Join("cmd", "database-migrator", "main_gen.go")
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for DB migrator main package written to %s", genFilepath))

	return nil
}
