package restapi

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenUtilJetstream generates source code for the REST API's JetStream
// initialization.
func GenUtilJetstream(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("util")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	f.ImportAlias("github.com/nats-io/nats.go", "nats")
	f.ImportAlias("github.com/threeport/threeport/internal/aws/notif", "aws_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/control-plane/notif", "controlplane_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/gateway/notif", "gateway_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/helm-workload/notif", "helmworkload_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/kubernetes-runtime/notif", "kubernetesruntime_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/observability/notif", "observability_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/secret/notif", "secret_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/terraform/notif", "terraform_notif")
	f.ImportAlias("github.com/threeport/threeport/internal/workload/notif", "workload_notif")

	f.Comment(`Initialize the NATS Jet stream context with controller streams`)
	f.Func().Id("InitJetStream").Params(
		Id("nc").Op("*").Qual("github.com/nats-io/nats.go", "Conn"),
	).Params(
		Op("*").Qual("github.com/nats-io/nats.go", "JetStreamContext"),
		Error(),
	).BlockFunc(func(g *Group) {
		g.List(Id("js"), Err()).Op(":=").Id("nc").Dot("JetStream").Call(
			Qual("github.com/nats-io/nats.go", "PublishAsyncMaxPending").Call(Lit(256)),
		)
		g.If(Err().Op("!=").Nil()).Block(
			Return(Nil(),
				Qual("fmt", "Errorf").Call(Lit("failed to create jetstream context: %w"), Err())),
		)
		g.Line()
		g.Comment("add controller streams")
		for _, objGroup := range gen.ApiObjectGroups {
			if len(objGroup.ReconciledObjects) > 0 {
				g.Id("_").Op(",").Id("err").Op("=").Id("js").Dot("AddStream").Call(
					Op("&").Qual("github.com/nats-io/nats.go", "StreamConfig").Values(
						Dict{
							Id("Name"): Qual(
								fmt.Sprintf("%s/internal/%s/notif", gen.ModulePath, objGroup.ControllerShortName),
								objGroup.StreamName,
							),
							Id("Subjects"): Qual(
								fmt.Sprintf("%s/internal/%s/notif", gen.ModulePath, objGroup.ControllerShortName),
								fmt.Sprintf("Get%sSubjects", strcase.ToCamel(objGroup.ControllerShortName)),
							).Call(),
						},
					),
				)
				g.If(Id("err").Op("!=").Nil().Block(
					Return(
						Nil(),
						Qual("fmt", "Errorf").Call(
							Lit("could not add stream %s: %w"), Qual(
								fmt.Sprintf("%s/internal/%s/notif", gen.ModulePath, objGroup.ControllerShortName),
								objGroup.StreamName,
							),
							Err(),
						),
					),
				))
				g.Line()
			}
		}
		g.Return(Op("&").Id("js"), Nil())
	})

	// write code to file
	genFilepath := filepath.Join("cmd", "rest-api", "util", "controller_stream_gen.go")
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for NATS JetStream initialization written to %s", genFilepath))

	return nil
}
