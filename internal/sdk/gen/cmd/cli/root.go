package cli

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenPluginRootCmd generates the root command for an extension's tptctl plugin.
func GenPluginRootCmd(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("cmd")
	f.HeaderComment("generated by 'threeport-sdk gen' but will not be regenerated - intended for modification")

	f.ImportAlias("github.com/threeport/threeport/pkg/cli/v0", "cli")
	f.ImportAlias("github.com/threeport/threeport/pkg/config/v0", "config")

	packageDir := strcase.ToSnake(sdkConfig.ModuleName)
	commandLit := strcase.ToKebab(sdkConfig.ModuleName)

	f.Var().Id("cliArgs").Op("=").Op("&").Qual(
		"github.com/threeport/threeport/pkg/cli/v0",
		"GenesisControlPlaneCLIArgs",
	).Values()
	f.Line()

	f.Comment(fmt.Sprintf(
		"rootCmd represents the %s command which is the root command for",
		commandLit,
	))
	f.Comment(fmt.Sprintf(
		"the %s plugin.",
		sdkConfig.ModuleName,
	))
	f.Var().Id("rootCmd").Op("=").Op("&").Qual(
		"github.com/spf13/cobra",
		"Command",
	).Values(Dict{
		Id("Use"): Lit(strcase.ToKebab(sdkConfig.ModuleName)),
		Id("Short"): Lit(fmt.Sprintf(
			"Manage the %s Threeport module",
			sdkConfig.ModuleName,
		)),
		Id("Long"): Lit(fmt.Sprintf(
			"Manage the %s Threeport module",
			sdkConfig.ModuleName,
		)),
	})
	f.Line()

	f.Func().Id("Execute").Params().Block(
		If(
			Err().Op(":=").Id("rootCmd").Dot("Execute").Call(),
			Err().Op("!=").Nil(),
		).Block(
			Id("cli").Dot("Error").Call(Lit(""), Err()),
			Qual("os", "Exit").Call(Lit(1)),
		),
	)
	f.Line()

	f.Func().Id("init").Params().Block(
		Id("rootCmd").Dot("PersistentFlags").Call().Dot("StringVar").Call(
			Line().Op("&").Id("cliArgs").Dot("CfgFile"),
			Lit("threeport-config"),
			Lit(""),
			Lit("Path to config file (default is $HOME/.threeport/config.yaml). Can also be set with environment variable THREEPORT_CONFIG"),
			Line(),
		),
		Id("rootCmd").Dot("PersistentFlags").Call().Dot("StringVar").Call(
			Line().Op("&").Id("cliArgs").Dot("ProviderConfigDir"),
			Lit("provider-config"),
			Lit(""),
			Lit("Path to infra provider config directory (default is $HOME/.threeport/)."),
			Line(),
		),
		Id("rootCmd").Dot("Flags").Call().Dot("BoolP").Call(
			Lit("toggle"),
			Lit("t"),
			False(),
			Lit("Help message for toggle"),
		),
		Qual("github.com/spf13/cobra", "OnInitialize").Call(
			Func().Params().Block(
				Id("cli").Dot("InitConfig").Call(Id("cliArgs").Dot("CfgFile")),
				Id("cli").Dot("InitArgs").Call(Id("cliArgs")),
			),
		),
	)
	f.Line()

	f.Func().Id("CommandPreRunFunc").Params(
		Id("cmd").Op("*").Qual("github.com/spf13/cobra", "Command"),
		Id("args").Index().String(),
	).Block(
		If(
			Err().Op(":=").Id("initializeCommandContext").Call(Id("cmd")),
			Err().Op("!=").Nil(),
		).Block(
			Id("cli").Dot("Error").Call(Lit("could not initialize command in pre run:"), Err()),
			Qual("os", "Exit").Call(Lit(1)),
		),
	)
	f.Line()

	f.Func().Id("initializeCommandContext").Params(
		Id("cmd").Op("*").Qual("github.com/spf13/cobra", "Command"),
	).Params(
		Error(),
	).Block(
		Comment("get threeport config and extract threeport API endpoint"),
		List(
			Id("threeportConfig"),
			Id("requestedControlPlane"),
			Err(),
		).Op(":=").Qual(
			"github.com/threeport/threeport/pkg/config/v0",
			"GetThreeportConfig",
		).Call(Id("cliArgs").Dot("ControlPlaneName")),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("failed to get threeport config: %w"), Err())),
		),
		Line(),

		Id("apiEndpoint").Op(",").Err().Op(":=").Id("threeportConfig").Dot("GetThreeportAPIEndpoint").Call(Id("requestedControlPlane")),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("failed to get threeport API endpoint from config: %w"), Err())),
		),
		Line(),

		Id("apiClient").Op(",").Err().Op(":=").Id("threeportConfig").Dot("GetHTTPClient").Call(Id("requestedControlPlane")),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("failed to create threeport API client: %w"), Err())),
		),
		Line(),

		Id("ctx").Op(":=").Qual("context", "WithValue").Call(
			Id("cmd").Dot("Context").Call(),
			Lit("apiClient"),
			Id("apiClient"),
		),
		Id("ctx").Op("=").Qual("context", "WithValue").Call(Id("ctx"), Lit("config"), Id("threeportConfig")),
		Id("ctx").Op("=").Qual("context", "WithValue").Call(Id("ctx"), Lit("apiEndpoint"), Id("apiEndpoint")),
		Id("ctx").Op("=").Qual("context", "WithValue").Call(Id("ctx"), Lit("requestedControlPlane"), Id("requestedControlPlane")),
		Id("cmd").Dot("SetContext").Call(Id("ctx")),
		Line(),

		Return(Nil()),
	)

	// write code to file
	genFilepath := filepath.Join(
		"cmd",
		packageDir,
		"cmd",
		"root.go",
	)
	fileWritten, err := util.WriteCodeToFile(f, genFilepath, false)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	if fileWritten {
		cli.Info(fmt.Sprintf("source code for plugin root command written to %s", genFilepath))
	} else {
		cli.Info(fmt.Sprintf("source code for plugin root command already exists at %s - not overwritten", genFilepath))
	}

	return nil
}
