package root

import (
	"fmt"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenMagefile generates the source code for mage which is a Make-like tool
// using Go.
// Ref: https://github.com/magefile/mage
func GenMagefile(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("main")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	f.PackageComment("+build mage")

	// capture function names for each component
	buildApiFuncName := "BuildApi"
	buildFuncNames := []string{buildApiFuncName}

	buildApiImageFuncName := "BuildApiImage"
	buildImageFuncNames := []string{buildApiImageFuncName}

	devImageFuncName := "DevImage"

	// binary build function for API
	f.Comment(fmt.Sprintf("%s builds the REST API binary.", buildApiFuncName))
	f.Func().Id(buildApiFuncName).Params().Error().Block(
		Id("buildCmd").Op(":=").Qual("os/exec", "Command").Call(
			Line().Lit("go"),
			Line().Lit("build"),
			Line().Lit("-o"),
			Line().Lit("bin/rest-api"),
			Line().Lit("cmd/rest-api/main_gen.go"),
			Line(),
		),
		Line(),

		List(Id("output"), Err()).Op(":=").Id("buildCmd").Dot("CombinedOutput").Call(),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(
				Lit("build failed for API with output '%s': %w"), Id("output"), Err(),
			)),
		),
		Line(),

		Qual("fmt", "Println").Call(Lit("API binary built and available at bin/rest-api")),
		Line(),

		Return(Nil()),
	)
	f.Line()

	// image build and push function for API
	imageName := "threeport-rest-api"
	if gen.Extension {
		imageName = fmt.Sprintf("%s-%s", strcase.ToSnake(sdkConfig.ExtensionName), imageName)
	}
	f.Comment(fmt.Sprintf("%s builds and pushes the REST API image.", buildApiImageFuncName))
	f.Func().Id(buildApiImageFuncName).Params().Error().Block(
		If(Err().Op(":=").Id(devImageFuncName).Call(
			Line().Lit("rest-api"),
			Line().Lit("localhost:5001"),
			Line().Lit(imageName),
			Line().Lit("dev"),
			Line().Lit(true),
			Line().Lit(false),
			Line(),
		).Op(";").Err().Op("!=").Nil()).Block(
			Return().Qual("fmt", "Errorf").Call(
				Lit("failed to build and push rest-api image: %w"),
				Err(),
			),
		),
		Line(),

		Return().Nil(),
	)
	f.Line()

	// binary build functions for controllers
	for _, objGroup := range gen.ApiObjectGroups {
		if len(objGroup.ReconciledObjects) > 0 {
			// binary build function
			buildFuncName := fmt.Sprintf("Build%sController", objGroup.ControllerDomain)
			buildFuncNames = append(buildFuncNames, buildFuncName)

			f.Comment(fmt.Sprintf(
				"%s builds the binary for the %s.",
				buildFuncName,
				objGroup.ControllerName,
			))
			f.Func().Id(buildFuncName).Params().Error().Block(
				Id("buildCmd").Op(":=").Qual("os/exec", "Command").Call(
					Line().Lit("go"),
					Line().Lit("build"),
					Line().Lit("-o"),
					Line().Lit(fmt.Sprintf("bin/%s", objGroup.ControllerName)),
					Line().Lit(fmt.Sprintf("cmd/%s/main_gen.go", objGroup.ControllerName)),
					Line(),
				),
				Line(),

				List(Id("output"), Err()).Op(":=").Id("buildCmd").Dot("CombinedOutput").Call(),
				If(Err().Op("!=").Nil()).Block(
					Return(Qual("fmt", "Errorf").Call(Lit(fmt.Sprintf(
						"build failed for %s with output '%%s': %%w",
						objGroup.ControllerName,
					)), Id("output"), Err())),
				),
				Line(),

				Qual("fmt", "Println").Call(Lit(fmt.Sprintf(
					"%[1]s binary built and available at bin/%[1]s",
					objGroup.ControllerName,
				))),
				Line(),

				Return(Nil()),
			)
			f.Line()

			// image build and push function
			buildImageFuncName := fmt.Sprintf("Build%sControllerImage", objGroup.ControllerDomain)
			buildImageFuncNames = append(buildImageFuncNames, buildImageFuncName)

			f.Comment(fmt.Sprintf(
				"%s builds and pushes the container image for the %s.",
				buildImageFuncName,
				objGroup.ControllerName,
			))
			f.Func().Id(buildImageFuncName).Params().Error().Block(
				If(Err().Op(":=").Id(devImageFuncName).Call(
					Line().Lit(objGroup.ControllerName),
					Line().Lit("localhost:5001"),
					Line().Lit(fmt.Sprintf("threeport-%s", objGroup.ControllerName)),
					Line().Lit("dev"),
					Line().Lit(true),
					Line().Lit(false),
					Line(),
				).Op(";").Err().Op("!=").Nil()).Block(
					Return().Qual("fmt", "Errorf").Call(
						Lit("failed to build and push %s image: %w"),
						Lit(objGroup.ControllerName),
						Err(),
					),
				),
				Line(),

				Return(Nil()),
			)
			f.Line()
		}
	}
	f.Line()

	// build all binaries
	buildAllFuncName := "BuildAll"
	f.Comment(fmt.Sprintf("%s builds the binaries for all components.", buildAllFuncName))
	f.Func().Id(buildAllFuncName).Params().Error().BlockFunc(func(g *Group) {
		for _, funcName := range buildFuncNames {
			g.If(Err().Op(":=").Id(funcName).Call().Op(";").Err().Op("!=").Nil()).Block(
				Return().Qual("fmt", "Errorf").Call(
					Lit("failed to build binary: %w"),
					Err(),
				),
			)
			g.Line()
		}

		g.Return().Nil()
	})

	// build and push all images
	buildAllImagesFuncName := "BuildAllImages"
	f.Comment(fmt.Sprintf("%s builds and pushes images for all components.", buildAllImagesFuncName))
	f.Func().Id(buildAllImagesFuncName).Params().Error().BlockFunc(func(g *Group) {
		for _, funcName := range buildImageFuncNames {
			g.If(Err().Op(":=").Id(funcName).Call().Op(";").Err().Op("!=").Nil()).Block(
				Return().Qual("fmt", "Errorf").Call(
					Lit("failed to build and push image: %w"),
					Err(),
				),
			)
			g.Line()
		}

		g.Return().Nil()
	})

	// build and optionally push and/or load images
	f.Comment(fmt.Sprintf("%s builds and pushes a container image using the alpine", devImageFuncName))
	f.Comment("Dockerfile.")
	f.Func().Id(devImageFuncName).Params(
		Line().Id("component").String(),
		Line().Id("imageRepo").String(),
		Line().Id("imageName").String(),
		Line().Id("imageTag").String(),
		Line().Id("pushImage").Bool(),
		Line().Id("loadImage").Bool(),
		Line(),
	).Params(
		Error(),
	).Block(
		List(Id("rootDir"), Id("err")).Op(":=").Qual("os", "Getwd").Call(),
		If(Id("err").Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("failed to get working directory for image build: %w"), Id("err"))),
		),
		Line(),

		Id("image").Op(":=").Qual("fmt", "Sprintf").Call(Lit("%s/%s:%s"), Id("imageRepo"), Id("imageName"), Id("imageTag")),
		Line(),

		Id("dockerBuildCmd").Op(":=").Qual("os/exec", "Command").Call(
			Line().Lit("docker"),
			Line().Lit("buildx"),
			Line().Lit("build"),
			Line().Lit("--load"),
			Line().Qual("fmt", "Sprintf").Call(
				Lit("--platform=linux/%s"),
				Qual("runtime", "GOARCH"),
			),
			Line().Lit("-t"),
			Line().Id("image"),
			Line().Lit("-f"),
			Line().Qual("fmt", "Sprintf").Call(Lit("cmd/%s/image/Dockerfile-alpine"), Id("component")),
			Line().Id("rootDir"),
			Line(),
		),
		Line(),

		List(Id("output"), Id("err")).Op(":=").Id("dockerBuildCmd").Dot("CombinedOutput").Call(),
		If(Id("err").Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("image build failed for %s with output '%s': %w"), Id("component"), Id("output"), Id("err"))),
		),
		Line(),

		Qual("fmt", "Printf").Call(Lit("%s image built\n"), Id("image")),
		Line(),

		If(Id("pushImage")).Block(
			Id("dockerPushCmd").Op(":=").Qual("os/exec", "Command").Call(
				Lit("docker"),
				Lit("push"),
				Id("image"),
			),
			Line(),

			List(Id("output"), Id("err")).Op("=").Id("dockerPushCmd").Dot("CombinedOutput").Call(),
			If(Id("err").Op("!=").Nil()).Block(
				Return(Qual("fmt", "Errorf").Call(Lit("image push for %s failed with output '%s': %w"), Id("component"), Id("output"), Id("err"))),
			),
			Line(),

			Qual("fmt", "Printf").Call(Lit("%s image pushed\n"), Id("image")),
		),
		Line(),

		Comment("TODO: load image if loadImage=true"),
		Line(),

		Return().Nil(),
	)

	// API docs generation
	f.Comment("Docs generates the API server documentation that is served by the API")
	f.Func().Id("Docs").Params().Error().Block(
		Id("docsDestination").Op(":=").Lit("pkg/api-server/v0/docs"),
		Id("swagCmd").Op(":=").Qual("os/exec", "Command").Call(
			Line().Lit("swag"),
			Line().Lit("init"),
			Line().Lit("--dir"),
			Line().Lit("cmd/rest-api,pkg/api,pkg/api-server/v0"),
			Line().Lit("--parseDependency"),
			Line().Lit("--generalInfo"),
			Line().Lit("main_gen.go"),
			Line().Lit("--output"),
			Line().Id("docsDestination"),
			Line(),
		),
		Line(),

		List(Id("output"), Err()).Op(":=").Id("swagCmd").Dot("CombinedOutput").Call(),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("API docs generation failed with output '%s': %w"), Id("output"), Err())),
		),
		Line(),

		Qual("fmt", "Printf").Call(Lit("API docs generated in %s\n"), Id("docsDestination")),
		Line(),

		Return(Nil()),
	)

	// write code to file
	genFilepath := "magefile_gen.go"
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for magefile written to %s", genFilepath))

	return nil
}
