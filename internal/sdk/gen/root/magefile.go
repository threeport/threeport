package root

import (
	"fmt"

	. "github.com/dave/jennifer/jen"

	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenMagefile generates the source code for mage which is a Make-like tool
// using Go.
// Ref: https://github.com/magefile/mage
func GenMagefile(gen *gen.Generator) error {
	f := NewFile("main")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	f.PackageComment("+build mage")

	f.Comment("BuildApi builds the REST API binary.")
	f.Func().Id("BuildApi").Params().Error().Block(
		Id("buildCmd").Op(":=").Qual("os/exec", "Command").Call(
			Line().Lit("go"),
			Line().Lit("build"),
			Line().Lit("-o"),
			Line().Lit("bin/rest-api"),
			Line().Lit("cmd/rest-api/main_gen.go"),
			Line(),
		),
		Line(),

		List(Id("output"), Err()).Op(":=").Id("buildCmd").Dot("CombinedOutput").Call(),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(
				Lit("build failed for API with output '%s': %w"), Id("output"), Err(),
			)),
		),
		Line(),

		Qual("fmt", "Println").Call(Lit("API binary built and available at bin/rest-api")),
		Line(),

		Return(Nil()),
	)
	f.Line()

	for _, objGroup := range gen.ApiObjectGroups {
		if len(objGroup.ReconciledObjects) > 0 {
			f.Comment(fmt.Sprintf(
				"Build%sController builds the binary for the %s.",
				objGroup.ControllerDomain,
				objGroup.ControllerName,
			))
			f.Func().Id(fmt.Sprintf("Build%sController", objGroup.ControllerDomain)).Params().Error().Block(
				Id("buildCmd").Op(":=").Qual("os/exec", "Command").Call(
					Line().Lit("go"),
					Line().Lit("build"),
					Line().Lit("-o"),
					Line().Lit(fmt.Sprintf("bin/%s", objGroup.ControllerName)),
					Line().Lit(fmt.Sprintf("cmd/%s/main_gen.go", objGroup.ControllerName)),
					Line(),
				),
				Line(),

				List(Id("output"), Err()).Op(":=").Id("buildCmd").Dot("CombinedOutput").Call(),
				If(Err().Op("!=").Nil()).Block(
					Return(Qual("fmt", "Errorf").Call(Lit(fmt.Sprintf(
						"build failed for %s with output '%%s': %%w",
						objGroup.ControllerName,
					)), Id("output"), Err())),
				),
				Line(),

				Qual("fmt", "Println").Call(Lit(fmt.Sprintf(
					"%[1]s binary built and available at bin/%[1]s",
					objGroup.ControllerName,
				))),
				Line(),

				Return(Nil()),
			)
			Line()
		}
	}
	f.Line()

	// Docs function
	f.Func().Id("Docs").Params().Error().Block(
		Id("docsDestination").Op(":=").Lit("pkg/api-server/v0/docs"),
		Id("swagCmd").Op(":=").Qual("os/exec", "Command").Call(
			Line().Lit("swag"),
			Line().Lit("init"),
			Line().Lit("--dir"),
			Line().Lit("cmd/rest-api,pkg/api,pkg/api-server/v0"),
			Line().Lit("--parseDependency"),
			Line().Lit("--generalInfo"),
			Line().Lit("main_gen.go"),
			Line().Lit("--output"),
			Line().Id("docsDestination"),
			Line(),
		),
		Line(),

		List(Id("output"), Err()).Op(":=").Id("swagCmd").Dot("CombinedOutput").Call(),
		If(Err().Op("!=").Nil()).Block(
			Return(Qual("fmt", "Errorf").Call(Lit("API docs generation failed with output '%s': %w"), Id("output"), Err())),
		),
		Line(),

		Qual("fmt", "Printf").Call(Lit("API docs generated in %s\n"), Id("docsDestination")),
		Line(),

		Return(Nil()),
	)

	// write code to file
	genFilepath := "magefile_gen.go"
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for magefile written to %s", genFilepath))

	return nil
}
