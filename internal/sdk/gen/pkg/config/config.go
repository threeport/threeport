package config

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenConfig generates the config package that processes CLI user configs.
func GenConfig(gen *gen.Generator) error {
	for _, objCollection := range gen.VersionedApiObjectCollections {
		for _, objGroup := range objCollection.VersionedApiObjectGroups {
			f := NewFile(objCollection.Version)
			f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

			for _, apiObject := range objGroup.ApiObjects {
				configObjectName := fmt.Sprintf("%sConfig", apiObject.TypeName)
				objectHuman := strcase.ToDelimited(apiObject.TypeName, ' ')

				f.Comment(fmt.Sprintf(
					"%s contains the config for a %s.",
					configObjectName,
					objectHuman,
				))
				f.Type().Id(configObjectName).Struct(
					Id("Name").String().Tag(map[string]string{"json": "Name", "validate": "required"}),
				)
			}

			// write code to file
			genFilepath := filepath.Join(
				"pkg",
				"config",
				objCollection.Version,
				fmt.Sprintf("%s_gen.go", strcase.ToSnake(objGroup.Name)),
			)
			_, err := util.WriteCodeToFile(f, genFilepath, true)
			if err != nil {
				return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
			}
			cli.Info(fmt.Sprintf("source code for config package written to %s", genFilepath))
		}
	}

	return nil
}
