package apiserver

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenDatabaseInit generates the database initialization function and GORM
// logger methods.
func GenDatabaseInit(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("database")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	f.ImportAlias("github.com/threeport/threeport/pkg/log/v0", "log")
	f.ImportAlias("github.com/threeport/threeport/pkg/util/v0", "util")
	if gen.Module {
		f.ImportAlias("github.com/threeport/threeport/pkg/api-server/v0/database", "tp_database")
	}

	if !gen.Module {
		f.Const().Defs(
			Comment("Threeport database connection values"),
			Id("ThreeportDatabaseUser").Op("=").Lit("threeport").Comment("used by Threeport API"),
			Id("ThreeportDatabaseRootUser").Op("=").Lit("root").Comment("used by db-init container"),
			Id("ThreeportDatabaseName").Op("=").Lit("threeport_api"),
			Id("ThreeportDatabaseHost").Op("=").Lit("crdb"),
			Id("ThreeportDatabasePort").Op("=").Lit("26257"),
			Id("ThreeportDatabaseSslMode").Op("=").Lit("verify-full"),
			Id("ThreeportApiDbCertsDir").Op("=").Lit("/etc/threeport/db-certs"),
		)
	}

	f.Comment("ZapLogger is a custom GORM logger that forwards log messages to a Zap logger.")
	f.Type().Id("ZapLogger").Struct(
		Id("Logger").Op("*").Qual(
			"go.uber.org/zap", "Logger",
		),
	)
	f.Line()

	f.Comment("Init initializes the API database.")
	f.Func().Id("Init").Params(
		Id("autoMigrate").Bool().Op(",").Id("logger").Op("*").Qual(
			"go.uber.org/zap", "Logger",
		),
	).Parens(Op("*").Qual(
		"gorm.io/gorm",
		"DB",
	).Op(",").Id("error")).Block(
		Id("dsn").Op(",").Err().Op(":=").Id("GetDsn").Call(Lit(false)),
		If().Err().Op("!=").Nil().Block(
			Return().Nil().Op(",").Qual("fmt", "Errorf").Call(
				Lit("failed to populate DB DSN from environment: %w"),
				Err(),
			),
		),

		Line(),
		Id("db").Op(",").Id("err").Op(":=").Qual(
			"gorm.io/gorm",
			"Open",
		).Call(Qual(
			"gorm.io/driver/postgres",
			"Open",
		).Call(Id("dsn")).Op(",").Op("&").Qual(
			"gorm.io/gorm",
			"Config",
		).Values(Dict{
			Id("Logger"): Op("&").Id("ZapLogger").Values(Dict{
				Id("Logger"): Id("logger").Op(","),
			}),
			Id("NowFunc"): Func().Call().Qual(
				"time", "Time",
			).Block(
				Id("utc").Op(",").Id("_").Op(":=").Qual(
					"time", "LoadLocation",
				).Call(Lit("UTC")),
				Return().Qual(
					"time", "Now",
				).Call().Dot("In").Call(Id("utc")).Dot("Truncate").Call(Qual(
					"time", "Microsecond",
				)),
			),
		})),
		If(
			Id("err").Op("!=").Nil().Block(
				Return().Nil().Op(",").Id("err"),
			),
		),
		Line(),
		Return().Id("db").Op(",").Nil(),
	)
	f.Line()

	f.Comment("GetDsn returns the data source name string or an error if one of the required")
	f.Comment("env vars is not set.  If the root user is requested the DSN will include the")
	f.Comment("root user and reference the root user's SSL cert creds.")
	f.Func().Id("GetDsn").Params(Id("rootDbUser").Bool()).Params(String(), Error()).BlockFunc(func(g *Group) {
		g.Var().Id("dbEnvErrors").Qual(
			"github.com/threeport/threeport/pkg/util/v0",
			"MultiError",
		)
		g.Line()

		g.Id("requiredDbEnvVars").Op(":=").Map(String()).String().Values(Dict{
			Lit("DB_HOST"):     Lit(""),
			Lit("DB_PORT"):     Lit(""),
			Lit("DB_USER"):     Lit(""),
			Lit("DB_NAME"):     Lit(""),
			Lit("DB_SSL_MODE"): Lit(""),
		})
		g.Line()

		g.For(List(Id("env"), Op("_")).Op(":=").Range().Id("requiredDbEnvVars")).Block(
			List(Id("val"), Id("ok")).Op(":=").Qual("os", "LookupEnv").Call(Id("env")),
			If(Op("!").Id("ok")).Block(
				Id("dbEnvErrors").Dot("AppendError").Call(
					Qual("fmt", "Errorf").Call(Lit("missing required environment variable: %s"), Id("env")),
				),
				Id("requiredDbEnvVars").Index(Id("env")).Op("=").Lit(""),
			).Else().Block(
				Id("requiredDbEnvVars").Index(Id("env")).Op("=").Id("val"),
			),
		)
		g.Line()

		g.Id("dbUser").Op(":=").Id("requiredDbEnvVars").Index(Lit("DB_USER"))
		g.If(Id("rootDbUser")).Block(
			Id("dbUser").Op("=").Lit("root"),
		)
		g.Line()

		if gen.Module {
			g.Id("dsn").Op(":=").Qual("fmt", "Sprintf").Call(
				Line().Lit("host=%s port=%s user=%s dbname=%s sslmode=%s sslrootcert=%s/ca.crt sslcert=%[6]s/client.%[3]s.crt sslkey=%[6]s/client.%[3]s.key TimeZone=UTC"),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_HOST")),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_PORT")),
				Line().Id("dbUser"),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_NAME")),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_SSL_MODE")),
				Line().Qual(
					"github.com/threeport/threeport/pkg/api-server/v0/database",
					"ThreeportApiDbCertsDir",
				),
				Line(),
			)
		} else {
			g.Id("dsn").Op(":=").Qual("fmt", "Sprintf").Call(
				Line().Lit("host=%s port=%s user=%s dbname=%s sslmode=%s sslrootcert=%s/ca.crt sslcert=%[6]s/client.%[3]s.crt sslkey=%[6]s/client.%[3]s.key TimeZone=UTC"),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_HOST")),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_PORT")),
				Line().Id("dbUser"),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_NAME")),
				Line().Id("requiredDbEnvVars").Index(Lit("DB_SSL_MODE")),
				Line().Id("ThreeportApiDbCertsDir"),
				Line(),
			)
		}
		g.Line()

		g.Return(Id("dsn"), Id("dbEnvErrors").Dot("Error").Call())
	})

	f.Comment("LogMode overrides the standard GORM logger's LogMode method to set the logger mode.")
	f.Func().Parens(
		Id("zl").Op("*").Id("ZapLogger"),
	).Id("LogMode").Params(
		Id("level").Qual("gorm.io/gorm/logger", "LogLevel"),
	).Qual("gorm.io/gorm/logger", "Interface").Block(
		Return().Id("zl"),
	)
	f.Line()

	f.Comment("Info overrides the standard GORM logger's Info method to forward log messages")
	f.Comment("to the zap logger.")
	f.Func().Params(Id("zl").Op("*").Id("ZapLogger")).Id("Info").Params(
		Id("ctx").Qual("context", "Context"),
		Id("msg").String(),
		Id("data").Op("...").Interface(),
	).Block(
		Id("fields").Op(":=").Make(
			Index().Qual("go.uber.org/zap", "Field"), Lit(0), Len(Id("data")).Op("/").Lit(2),
		).Comment("len(data)/2 because pairs of key-value"),
		Line(),
		For(Id("i").Op(":=").Lit(0), Id("i").Op("<").Len(Id("data")), Id("i").Op("+=2")).Block(
			If(Id("i").Op("+").Lit(1).Op(">=").Len(Id("data"))).Block(
				Comment("if there's no matching pair, log a warning or handle the error appropriately"),
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Odd number of arguments passed to Info method"),
					Qual("go.uber.org/zap", "Any").Call(Lit("data"), Id("data")),
				),
				Break(),
			),
			Line(),
			If(Qual("reflect", "TypeOf").Call(Id("data").Index(Id("i"))).Dot("Kind").Call().Op("==").Qual("reflect", "Ptr")).Block(
				Id("data").Index(Id("i")).Op("=").Qual("fmt", "Sprintf").Call(Lit("%+v"), Id("data").Index(Id("i"))),
			),
			Line(),
			List(Id("key"), Id("ok")).Op(":=").Id("data").Index(Id("i")).Assert(String()),
			If(Op("!").Id("ok")).Block(
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Key is not a string"),
					Qual("go.uber.org/zap", "Any").Call(Lit("key"), Id("data").Index(Id("i"))),
				),
				Continue(),
			),
			Line(),
			Id("fields").Op("=").Append(Id("fields"), Qual("go.uber.org/zap", "Any").Call(Id("key"), Id("data").Index(Id("i").Op("+").Lit(1)))),
		),
		Id("zl").Dot("Logger").Dot("Info").Call(Id("msg"), Id("fields").Op("...")),
	)
	f.Line()

	f.Comment("Warn overrides the standard GORM logger's Warn method to forward log messages")
	f.Comment("to the zap logger.")
	f.Func().Params(Id("zl").Op("*").Id("ZapLogger")).Id("Warn").Params(
		Id("ctx").Qual("context", "Context"),
		Id("msg").String(),
		Id("data").Op("...").Interface(),
	).Block(
		Id("fields").Op(":=").Make(
			Index().Qual("go.uber.org/zap", "Field"), Lit(0), Len(Id("data")).Op("/").Lit(2),
		).Comment("len(data)/2 because pairs of key-value"),
		Line(),
		For(Id("i").Op(":=").Lit(0), Id("i").Op("<").Len(Id("data")), Id("i").Op("+=2")).Block(
			If(Id("i").Op("+").Lit(1).Op(">=").Len(Id("data"))).Block(
				Comment("if there's no matching pair, log a warning or handle the error appropriately"),
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Odd number of arguments passed to Warn method"),
					Qual("go.uber.org/zap", "Any").Call(Lit("data"), Id("data")),
				),
				Break(),
			),
			Line(),
			If(Qual("reflect", "TypeOf").Call(Id("data").Index(Id("i"))).Dot("Kind").Call().Op("==").Qual("reflect", "Ptr")).Block(
				Id("data").Index(Id("i")).Op("=").Qual("fmt", "Sprintf").Call(Lit("%+v"), Id("data").Index(Id("i"))),
			),
			Line(),
			List(Id("key"), Id("ok")).Op(":=").Id("data").Index(Id("i")).Assert(String()),
			If(Op("!").Id("ok")).Block(
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Key is not a string"),
					Qual("go.uber.org/zap", "Any").Call(Lit("key"), Id("data").Index(Id("i"))),
				),
				Continue(),
			),
			Line(),
			Id("fields").Op("=").Append(Id("fields"), Qual("go.uber.org/zap", "Any").Call(Id("key"), Id("data").Index(Id("i").Op("+").Lit(1)))),
		),
		Id("zl").Dot("Logger").Dot("Warn").Call(Id("msg"), Id("fields").Op("...")),
	)
	f.Line()

	f.Comment("Error overrides the standard GORM logger's Error method to forward log messages")
	f.Comment("to the zap logger.")
	f.Func().Params(Id("zl").Op("*").Id("ZapLogger")).Id("Error").Params(
		Id("ctx").Qual("context", "Context"),
		Id("msg").String(),
		Id("data").Op("...").Interface(),
	).Block(
		Id("fields").Op(":=").Make(
			Index().Qual("go.uber.org/zap", "Field"), Lit(0), Len(Id("data")).Op("/").Lit(2),
		).Comment("len(data)/2 because pairs of key-value"),
		Line(),
		For(Id("i").Op(":=").Lit(0), Id("i").Op("<").Len(Id("data")), Id("i").Op("+=2")).Block(
			If(Id("i").Op("+").Lit(1).Op(">=").Len(Id("data"))).Block(
				Comment("if there's no matching pair, log a warning or handle the error appropriately"),
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Odd number of arguments passed to Error method"),
					Qual("go.uber.org/zap", "Any").Call(Lit("data"), Id("data")),
				),
				Break(),
			),
			Line(),
			If(Qual("reflect", "TypeOf").Call(Id("data").Index(Id("i"))).Dot("Kind").Call().Op("==").Qual("reflect", "Ptr")).Block(
				Id("data").Index(Id("i")).Op("=").Qual("fmt", "Sprintf").Call(Lit("%+v"), Id("data").Index(Id("i"))),
			),
			Line(),
			List(Id("key"), Id("ok")).Op(":=").Id("data").Index(Id("i")).Assert(String()),
			If(Op("!").Id("ok")).Block(
				Id("zl").Dot("Logger").Dot("Warn").Call(
					Lit("Key is not a string"),
					Qual("go.uber.org/zap", "Any").Call(Lit("key"), Id("data").Index(Id("i"))),
				),
				Continue(),
			),
			Line(),
			Id("fields").Op("=").Append(Id("fields"), Qual("go.uber.org/zap", "Any").Call(Id("key"), Id("data").Index(Id("i").Op("+").Lit(1)))),
		),
		Id("zl").Dot("Logger").Dot("Error").Call(Id("msg"), Id("fields").Op("...")),
	)
	f.Line()

	f.Comment("Trace overrides the standard GORM logger's Trace method to forward log messages")
	f.Comment("to the zap logger.")
	f.Func().Parens(
		Id("zl").Op("*").Id("ZapLogger"),
	).Id("Trace").Params(
		Id("ctx").Qual(
			"context", "Context",
		).Op(",").Id("begin").Qual(
			"time", "Time",
		).Op(",").Id("fc").Func().Call().Parens(String().Op(",").Int64()).Op(",").Id("err").Error(),
	).Block(
		Comment("use the fc function to get the SQL statement and execution time"),
		Id("sql").Op(",").Id("rows").Op(":=").Id("fc").Call(),
		Line(),
		Comment("create a new logger with some additional fields"),
		Id("logger").Op(":=").Id("zl").Dot("Logger").Dot("With").Call(
			Line().Qual("go.uber.org/zap", "String").Call(Lit("type").Op(",").Lit("sql")),
			Line().Qual("go.uber.org/zap", "String").Call(Lit("sql").Op(",").Id("suppressSensitive").Call(Id("sql"))),
			Line().Qual("go.uber.org/zap", "Int64").Call(Lit("rows").Op(",").Id("rows")),
			Line().Qual("go.uber.org/zap", "Duration").Call(Lit("elapsed").Op(",").Qual(
				"time", "Since",
			).Call(Id("begin"))),
			Line(),
		),
		Line(),
		Comment("if an error occurred, add it as a field to the logger"),
		If(Id("err").Op("!=").Nil().Block(
			Id("logger").Op("=").Qual(
				"gorm.io/gorm/logger", "With",
			).Call(Qual(
				"go.uber.org/zap", "Error",
			).Call(Id("err"))),
		)),
		Line(),
		Comment("log the message using the logger"),
		Qual("gorm.io/gorm/logger", "Debug").Call(Lit("gorm query")),
	)
	f.Line()

	f.Comment("suppressSensitive supresses messages containing sesitive strings.")
	f.Func().Id("suppressSensitive").Params(
		Id("msg").String(),
	).String().Block(
		For(Id("_").Op(",").Id("str").Op(":=").Range().Qual(
			"github.com/threeport/threeport/pkg/log/v0", "SensitiveStrings",
		).Call()).Block(
			If(Qual("strings", "Contains").Call(Id("msg").Op(",").Id("str"))).Block(
				Return().Qual("fmt", "Sprintf").Call(Lit("[log message containing %s supporessed]").Op(",").Id("str")),
			),
		),
		Line(),
		Return().Id("msg"),
	)

	// write code to file
	genFilepath := filepath.Join(
		"pkg",
		"api-server",
		"v0",
		"database",
		"database_gen.go",
	)
	_, err := util.WriteCodeToFile(f, genFilepath, true)
	if err != nil {
		return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
	}
	cli.Info(fmt.Sprintf("source code for API server DB initialization written to %s", genFilepath))

	return nil
}
