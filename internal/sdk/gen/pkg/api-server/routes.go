package apiserver

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenRoutes generates the functions that return all API server routes for each
// object.
func GenRoutes(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	for _, objCollection := range gen.VersionedApiObjectCollections {
		for _, objGroup := range objCollection.VersionedApiObjectGroups {
			pluralize := pluralize.NewClient()
			f := NewFile("routes")
			f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

			f.ImportAlias("github.com/labstack/echo/v4", "echo")

			for _, apiObj := range objGroup.ApiObjects {
				routeFuncName := fmt.Sprintf("%sRoutes", apiObj.TypeName)

				addMiddleware := Null()
				getMiddleware := Null()
				patchMiddleware := Null()
				putMiddleware := Null()
				deleteMiddleware := Null()

				if apiObj.AllowCustomMiddleware {
					addMiddleware = Id("h").Dot(apiObj.AddMiddlewareFuncName).Call().Op("...")
					getMiddleware = Id("h").Dot(apiObj.GetMiddlewareFuncName).Call().Op("...")
					patchMiddleware = Id("h").Dot(apiObj.PatchMiddlewareFuncName).Call().Op("...")
					putMiddleware = Id("h").Dot(apiObj.PutMiddlewareFuncName).Call().Op("...")
					deleteMiddleware = Id("h").Dot(apiObj.DeleteMiddlewareFuncName).Call().Op("...")
				}

				f.Comment(fmt.Sprintf(
					"%s sets up all routes for the %s handlers.", routeFuncName, apiObj.TypeName,
				))
				f.Func().Id(routeFuncName).Params(
					Id("e").Op("*").Qual(
						"github.com/labstack/echo/v4",
						"Echo",
					),
					Id("h").Op("*").Qual(
						fmt.Sprintf("%s/pkg/api-server/%s/handlers", gen.ModulePath, objCollection.Version),
						"Handler",
					),
				).Block(
					Id("e").Dot("GET").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%sVersions", apiObj.TypeName),
						),
						Id("h").Dot(apiObj.GetVersionHandlerName),
					),
					Line(),
					Id("e").Dot("POST").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						),
						Id("h").Dot(apiObj.AddHandlerName),
						addMiddleware,
					),
					Id("e").Dot("GET").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						),
						Id("h").Dot(apiObj.GetAllHandlerName),
						getMiddleware,
					),
					Id("e").Dot("GET").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						).Op("+").Lit("/:id"),
						Id("h").Dot(apiObj.GetOneHandlerName),
						getMiddleware,
					),
					Id("e").Dot("PATCH").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						).Op("+").Lit("/:id"),
						Id("h").Dot(apiObj.PatchHandlerName),
						patchMiddleware,
					),
					Id("e").Dot("PUT").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						).Op("+").Lit("/:id"),
						Id("h").Dot(apiObj.PutHandlerName),
						putMiddleware,
					),
					Id("e").Dot("DELETE").Call(
						Qual(
							fmt.Sprintf(
								"%s/pkg/api/%s",
								gen.ModulePath,
								objCollection.Version,
							),
							fmt.Sprintf("Path%s", pluralize.Pluralize(apiObj.TypeName, 2, false)),
						).Op("+").Lit("/:id"),
						Id("h").Dot(apiObj.DeleteHandlerName),
						deleteMiddleware,
					),
				)
			}

			// write code to file
			genFilepath := filepath.Join(
				"pkg",
				"api-server",
				objCollection.Version,
				"routes",
				fmt.Sprintf("%s_gen.go", strcase.ToSnake(objGroup.Name)),
			)
			_, err := util.WriteCodeToFile(f, genFilepath, true)
			if err != nil {
				return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
			}
			cli.Info(fmt.Sprintf("source code for API object routes written to %s", genFilepath))
		}
	}

	return nil
}
