package apiserver

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"

	"github.com/threeport/threeport/internal/sdk/gen"
	sdkutil "github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
)

// GenAddGenRoutes generates the function to add all generated routes to the API
// server.
func GenAddGenRoutes(gen *gen.Generator) error {
	for _, versionConf := range gen.GlobalVersionConfig.Versions {
		f := NewFile("routes")
		f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

		f.ImportAlias("github.com/labstack/echo/v4", "echo")

		var routeFuncs []string
		for _, routeName := range versionConf.RouteNames {
			if !util.StringSliceContains(routeFuncs, routeName, true) {
				routeFuncs = append(routeFuncs, fmt.Sprintf("%sRoutes", routeName))
			}
		}

		f.Comment("AddRoutes adds routes for all objects of a particular API version.")
		f.Func().Id("AddRoutes").Params(
			Id("e").Op("*").Qual(
				"github.com/labstack/echo/v4",
				"Echo",
			).Op(",").Id("h").Op("*").Qual(
				fmt.Sprintf("%s/pkg/api-server/%s/handlers", gen.ModulePath, versionConf.VersionName),
				"Handler",
			)).BlockFunc(func(g *Group) {
			for _, rf := range routeFuncs {
				g.Id(rf).Call(Id("e").Op(",").Id("h"))
			}
		})

		// write code to file
		genFilepath := filepath.Join(
			"pkg",
			"api-server",
			versionConf.VersionName,
			"routes",
			"routes_gen.go",
		)
		_, err := sdkutil.WriteCodeToFile(f, genFilepath, true)
		if err != nil {
			return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
		}
		cli.Info(fmt.Sprintf("source code to add generated API object routes written to %s", genFilepath))
	}

	return nil
}
