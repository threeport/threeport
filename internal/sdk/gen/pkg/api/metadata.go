package api

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"

	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenObjectMetadata generates source code for object metadata.
func GenObjectMetadata(gen *gen.Generator) error {
	pluralize := pluralize.NewClient()
	for _, apiVersion := range gen.GlobalVersionConfig.Versions {
		f := NewFile(apiVersion.VersionName)
		f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

		if gen.Extension {
			f.ImportAlias("github.com/threeport/threeport/pkg/api/v0", "tpapi")
		}

		objectTypesByPath := &Statement{}
		for _, name := range apiVersion.RouteNames {
			objectTypesByPath.Case(Id(fmt.Sprintf("Path%s", pluralize.Pluralize(name, 2, false)))).Block(
				Return().Id(fmt.Sprintf("ObjectType%s", name)),
			)
			objectTypesByPath.Line()
		}

		f.Comment("GetObjectTypeByPath returns the object type based on an API path.")
		f.Func().Id("GetObjectTypeByPath").Params(
			Id("path").String(),
		).Id("ObjectType").BlockFunc(func(g *Group) {
			g.Switch(Id("path")).Block(
				objectTypesByPath,
			)
			g.Line()
			if gen.Extension {
				g.Return().Qual(
					"github.com/threeport/threeport/pkg/api/v0",
					"ObjectTypeUnknown",
				)
			} else {
				g.Return().Id("ObjectTypeUnknown")
			}
		})

		// write code to file
		genFilepath := filepath.Join(
			"pkg",
			"api",
			apiVersion.VersionName,
			"metadata_gen.go",
		)
		_, err := util.WriteCodeToFile(f, genFilepath, true)
		if err != nil {
			return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
		}
		cli.Info(fmt.Sprintf("source code for API object methods written to %s", genFilepath))
	}

	return nil
}
