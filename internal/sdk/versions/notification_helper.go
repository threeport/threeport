package versions

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
)

// func (cc *ControllerConfig) NotificationHelper() error {
func (gvc *GlobalVersionConfig) NotificationHelper() error {
	f := NewFile("v0")
	f.HeaderComment("generated by 'threeport-sdk codegen api-version' - do not edit")
	f.HeaderComment("+threeport-sdk route-exclude")
	f.HeaderComment("+threeport-sdk database-exclude")

	objects := &Statement{}
	for _, version := range gvc.Versions {
		for _, name := range version.ReconciledNames {
			objects.Case(Lit(fmt.Sprintf("%s%s", name, "Reconciler"))).Block(
				Return().List(Id(fmt.Sprintf("%s%s", name, "Subject")), Nil()),
			)
			objects.Line()
		}
	}

	f.Comment("GetSubjectByReconcilerName returns the subject for a reconciler's name.")
	f.Func().Id("GetSubjectByReconcilerName").Params(
		Id("name").Id("string"),
	).Params(Id("string"), Id("error")).Block(
		Switch(Id("name")).Block(
			objects,
			Default().Block(
				Return().List(Lit(""), Qual("errors", "New").Call(Lit("unrecognized reconciler name"))),
			),
		),
		Line(),
	)
	f.Line()

	// write code to file
	genFilepath := filepath.Join("..", "..", "pkg", "api", "v0", "notification_gen.go")
	file, err := os.OpenFile(genFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file to write generated code for notification helper: %w", err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for notification helper: %w", err)
	}

	fmt.Println("code generation complete for notification helper")
	return nil
}
