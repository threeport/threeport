package util

import (
	"strings"
)

// GetDockerfiles returns a map of Dockerfile filenames to file contents for
// a collection of Dockerfiles for each component.  This function defines what
// Dockerfiles are standardly generated by the SDK for each component.
func GetDockerfiles(componentName, goVersion string) map[string]string {
	return map[string]string{
		// multi-stage build using gcr.io/distroless/static:nonroot base image
		"Dockerfile": CreateDockerfile(componentName, goVersion),

		// used in CI to build image from pre-built binary using
		// gcr.io/distroless/static:nonroot base image
		"Dockerfile-goreleaser": CreateDockerfileGoreleaser(componentName),

		// used for development using alpine base image - builds image from
		// pre-built binary in bin directory
		"Dockerfile-alpine": CreateDockerfileAlpine(componentName, goVersion),
	}
}

var dockerfileTemplate string = `# generated by 'threeport-sdk gen' but will not be regenerated - can optionally be edited
ARG ARCH=amd64
FROM golang:$GO_VERSION as builder
RUN mkdir /build
ADD . /build
WORKDIR /build
RUN CGO_ENABLED=0 GOOS=linux GOARCH=${ARCH} go build -a -o $COMPONENT_NAME cmd/$COMPONENT_NAME/main_gen.go

FROM gcr.io/distroless/static:nonroot
COPY --from=builder /build/$COMPONENT_NAME /
USER 65532:65532
ENTRYPOINT ["/$COMPONENT_NAME"]
`

// CreateDockerfile returns the Dockerfile content for a multi-stage build that
// builds the binary, then installs it in on a distroless base image.
func CreateDockerfile(componentName, goVersion string) string {
	dockerfile := strings.Replace(dockerfileTemplate, "$COMPONENT_NAME", componentName, -1)
	dockerfile = strings.Replace(dockerfile, "$GO_VERSION", goVersion, -1)

	return dockerfile
}

var dockerfileGoreleaserTemplate string = `# generated by 'threeport-sdk gen' but will not be regenerated - can optionally be edited
FROM gcr.io/distroless/static:nonroot
COPY $COMPONENT_NAME /$COMPONENT_NAME
USER 65532:65532

ENTRYPOINT ["/$COMPONENT_NAME"]
`

// CreateDockerfileGoreleaser returns the Dockerfile content for an image that
// copies a pre-built binary onto a distroless base image.  Used with Goreleaser
// to build released images.
func CreateDockerfileGoreleaser(componentName string) string {
	dockerfile := strings.Replace(dockerfileGoreleaserTemplate, "$COMPONENT_NAME", componentName, -1)

	return dockerfile
}

var dockerfileAlpineTemplate string = `# generated by 'threeport-sdk gen' but will not be regenerated - can optionally be edited
FROM golang:$GO_VERSION-alpine
COPY bin/$COMPONENT_NAME /$COMPONENT_NAME
USER 65532:65532

ENTRYPOINT ["/$COMPONENT_NAME"]
`

// CreateDockerfileAlpine returns the Dockerfile content for an image that
// copies a pre-built binary from the bin directory onto an alpine base image.
// Used for development purposes.
func CreateDockerfileAlpine(componentName, goVersion string) string {
	dockerfile := strings.Replace(dockerfileAlpineTemplate, "$COMPONENT_NAME", componentName, -1)
	dockerfile = strings.Replace(dockerfile, "$GO_VERSION", goVersion, -1)

	return dockerfile
}
