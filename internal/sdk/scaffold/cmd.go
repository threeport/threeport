package scaffold

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/mod"
)

// CreateComponentCmd creates the cmd package scaffolding for each extension
// component.
func CreateComponentCmd(sdkConfig *sdk.SdkConfig) error {
	// get go version from go.mod
	goVersion, err := mod.GetMajorMinorVersionFromGoModule()
	if err != nil {
		return fmt.Errorf("failed to retrieve go version from go.mod: %w", err)
	}

	// create rest-api cmd dirs
	if err := createRestApiCmd(goVersion); err != nil {
	}

	for _, objectGroup := range sdkConfig.ApiObjectGroups {
		// create controller cmd dirs
		if err := createControllerCmd(*objectGroup.Name, goVersion); err != nil {
			return fmt.Errorf("could not create directories for controller domain: %w", err)
		}
	}

	return nil
}

// createRestApiCmd creates the cmd directories for the REST API.
func createRestApiCmd(goVersion string) error {
	// create directories if needed
	restApiCmdPath := filepath.Join("cmd", "rest-api", "image")
	if _, err := os.Stat(restApiCmdPath); errors.Is(err, os.ErrNotExist) {
		if err := os.MkdirAll(restApiCmdPath, 0755); err != nil {
			return fmt.Errorf("could not create cmd directories for REST API: %w", err)
		}
	}

	// create rest api Dockerfile
	if err := createDockerfile("rest-api", goVersion); err != nil {
		return fmt.Errorf("failed to create rest-api Dockerfile: %w", err)
	}

	return nil
}

// createControllerCmd creates the directory scaffolding for a controller that
// will reconcile state for API objects.
func createControllerCmd(controllerDomain, goVersion string) error {
	// controller domain name is in snake case and the dir name has to be kebab case
	kebabDomain := strings.ReplaceAll(controllerDomain, "_", "-")
	controllerName := fmt.Sprintf("%s-controller", controllerDomain)

	// create dir for controller cmd
	controllerCmdPath := filepath.Join("cmd", controllerName, "image")
	if _, err := os.Stat(controllerCmdPath); errors.Is(err, os.ErrNotExist) {
		if err := os.MkdirAll(controllerCmdPath, 0755); err != nil {
			return fmt.Errorf("could not create cmd directories for controller main package and container image: %s, %w", kebabDomain, err)
		}
	}

	// create controller Dockerfile
	if err := createDockerfile(controllerName, goVersion); err != nil {
		return fmt.Errorf("failed to create %s Dockerfile: %w", controllerName, err)
	}

	return nil
}

var dockerfileTemplate string = `# generated by 'threeport-sdk create' - do not edit
ARG ARCH=amd64
FROM golang:$GO_VERSION as builder
RUN mkdir /build
ADD . /build
WORKDIR /build
RUN CGO_ENABLED=0 GOOS=linux GOARCH=${ARCH} go build -a -o $COMPONENT_NAME cmd/$COMPONENT_NAME/main_gen.go

FROM gcr.io/distroless/static:nonroot
COPY --from=builder /build/$COMPONENT_NAME /
USER 65532:65532
ENTRYPOINT ["/$COMPONENT_NAME"]
`

// createDockerfile creates Dockerfile boilerplate.
func createDockerfile(componentName, goVersion string) error {
	// controller domain name is in snake case and the dir name has to be kebab case
	dockerFile := strings.Replace(dockerfileTemplate, "$COMPONENT_NAME", componentName, -1)
	dockerFile = strings.Replace(dockerFile, "$GO_VERSION", goVersion, -1)

	dockerfilePath := filepath.Join("cmd", componentName, "image", "Dockerfile")
	if err := ioutil.WriteFile(dockerfilePath, []byte(dockerFile), 0644); err != nil {
		return fmt.Errorf("could not write dockerfile contents: %w", err)
	}

	return nil
}
