package models

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk"
)

// deletionInstanceCheckTypeNames returns the definition objects that need to
// have related instances checked when deleting
func deletionInstanceCheckTypeNames() []string {
	return []string{
		"AwsEksKubernetesRuntimeDefinition",
		"GatewayDefinition",
		"KubernetesRuntimeDefinition",
		"WorkloadDefinition",
		"ControlPlaneDefinition",
		"HelmWorkloadDefinition",
		"SecretDefinition",
		"LoggingDefinition",
		"MetricsDefinition",
		"ObservabilityStackDefinition",
	}
}

// apiHandlersPath returns the path from the models to the API's internal handlers
// package.
func apiHandlersPath(apiVersion string) string {
	return filepath.Join("pkg", "api-server", apiVersion, "handlers")
}

// ModelHandlers generates the handlers for each model.
func (cc *ControllerConfig) ModelHandlers() error {
	pluralize := pluralize.NewClient()
	f := NewFile("handlers")
	f.HeaderComment("generated by 'threeport-sdk gen' for API model boilerplate' - do not edit")

	f.ImportAlias("github.com/labstack/echo/v4", "echo")
	f.ImportAlias("github.com/threeport/threeport/pkg/api-server/v0", "iapi")
	f.ImportAlias("github.com/threeport/threeport/pkg/notifications/v0", "notifications")

	for _, mc := range cc.ModelConfigs {
		// for models that have a name field - either directly in the model or
		// inherited from Definition or Instance - add a check for duplicate
		// names in the handler that adds the record to the DB
		checkDuplicateNames := &Statement{}
		if mc.NameField && !mc.AllowDuplicateNames {
			checkDuplicateNames.Comment("check for duplicate names")
			checkDuplicateNames.Line()
			checkDuplicateNames.Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			).Line()
			checkDuplicateNames.Id("nameUsed").Op(":=").Lit(true).Line()
			checkDuplicateNames.Id("result").Op(":=").Id("h").Dot("DB").Dot("Where").Call(
				Lit("name = ?"), Id(strcase.ToLowerCamel(mc.TypeName)).Dot("Name"),
			).Dot("First").Call(
				Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)),
			).Line()
			checkDuplicateNames.If(Id("result").Dot("Error").Op("!=").Nil()).Block(
				If(Qual("errors", "Is").Call(
					Id("result").Dot("Error"), Qual("gorm.io/gorm", "ErrRecordNotFound"),
				)).Block(
					Id("nameUsed").Op("=").Lit(false),
				).Else().Block(
					Return(
						Id("iapi").Dot("ResponseStatus500").Call(
							Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"),
						),
					),
				),
			).Line()
			checkDuplicateNames.If(Id("nameUsed")).Block(
				Return(
					Id("iapi").Dot("ResponseStatus409").Call(
						Id("c"), Nil(), Qual("errors", "New").Call(
							Lit("object with provided name already exists"),
						), Id("objectType"),
					),
				),
			).Line()
		}

		notifyControllersCreateHandler := &Statement{}
		notifyControllersUpdateHandler := &Statement{}
		deleteObjectExecution := &Statement{}

		dbLoadAssociationStatement := Null()

		if mc.DbLoadAssociations {
			dbLoadAssociationStatement = Dot("Preload").Call(Qual("gorm.io/gorm/clause", "Associations"))
		}

		if mc.Reconciler {
			// configure controller notifications
			// create notifications
			notifyControllersCreateHandler = Comment("notify controller if reconciliation is required")
			notifyControllersCreateHandler.Line()
			notifyControllersCreateHandler.If(Op("!*").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("Reconciled").Block(
				Id("notifPayload").Op(",").Id("err").Op(":=").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationCreated",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")))),
				),
				Id("h").Dot("JS").Dot("Publish").Call(Qual(
					fmt.Sprintf(
						"github.com/threeport/threeport/pkg/api/%s",
						cc.Version,
					),
					mc.CreateSubject,
				).Op(",").Op("*").Id("notifPayload")),
			))

			// update notifications
			notifyControllersUpdateHandler = Comment("notify controller if reconciliation is required")
			notifyControllersUpdateHandler.Line()
			notifyControllersUpdateHandler.If(Op("!*").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("Reconciled").Block(
				Id("notifPayload").Op(",").Id("err").Op(":=").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationUpdated",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")))),
				),
				Id("h").Dot("JS").Dot("Publish").Call(Qual(
					fmt.Sprintf(
						"github.com/threeport/threeport/pkg/api/%s",
						cc.Version,
					),
					mc.UpdateSubject,
				).Op(",").Op("*").Id("notifPayload")),
			))

			// schedule for deletion
			deleteObjectExecution = Comment("schedule for deletion if not already scheduled")
			deleteObjectExecution.Line()
			deleteObjectExecution.Comment("if scheduled and reconciled, delete object from DB")
			deleteObjectExecution.Line()
			deleteObjectExecution.Comment("if scheduled but not reconciled, return 409 (controller is working on it)")
			deleteObjectExecution.Line()
			deleteObjectExecution.If(Id(strcase.ToLowerCamel(mc.TypeName)).Dot("DeletionScheduled").Op("==").Nil()).Block(
				Comment("schedule for deletion"),
				Id("reconciled").Op(":=").Lit(false),
				Id("timestamp").Op(":=").Qual("time", "Now").Call().Dot("UTC").Call(),
				Id(fmt.Sprintf("scheduled%s", mc.TypeName)).Op(":=").Qual(
					fmt.Sprintf("github.com/threeport/threeport/pkg/api/%s", cc.Version),
					mc.TypeName,
				).Values(
					Dict{
						Line().Id("Reconciliation"): Qual(
							fmt.Sprintf("github.com/threeport/threeport/pkg/api/%s", "v0"),
							"Reconciliation",
						).Values(
							Dict{
								Id("Reconciled"):        Op("&").Id("reconciled"),
								Id("DeletionScheduled"): Op("&").Id("timestamp"),
							},
						),
					},
				),
				If(
					Id("result").Op(":=").Id("h").Dot("DB").Dot("Model").Call(
						Op("&").Id(strcase.ToLowerCamel(mc.TypeName)),
					).Dot("Updates").Call(
						Id(fmt.Sprintf("scheduled%s", mc.TypeName)),
					),
					Id("result").Dot("Error").Op("!=").Nil(),
				).Block(
					Return(Id("iapi").Dot("ResponseStatus500").Call(
						Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType")),
					),
				),
				Comment("notify controller"),
				List(Id("notifPayload"), Id("err")).Op(":=").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationDeleted",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil()).Block(
					Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("err"), Id("objectType"))),
				),
				Id("h").Dot("JS").Dot("Publish").Call(
					Qual(
						fmt.Sprintf("github.com/threeport/threeport/pkg/api/%s", cc.Version),
						fmt.Sprintf("%sDeleteSubject", mc.TypeName),
					), Op("*").Id("notifPayload"),
				),
			).Else().Block(
				If(Id(strcase.ToLowerCamel(mc.TypeName)).Dot("DeletionConfirmed").Op("==").Nil()).Block(
					Comment("if deletion scheduled but not reconciled, return 409 - deletion"),
					Comment("already underway"),
					Return(
						Id("iapi").Dot("ResponseStatus409").Call(
							Id("c"),
							Nil(),
							Qual("errors", "New").Call(Qual("fmt", "Sprintf").Call(
								Line().Lit("object with ID %d already being deleted"),
								Line().Op("*").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("ID"),
								Line(),
							)),
							Id("objectType"),
						),
					),
				).Else().Block(
					Comment("object scheduled for deletion and confirmed - it can be deleted"),
					Comment("from DB"),
					If(
						Id("result").Op(":=").Id("h").Dot("DB").Dot("Delete").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName))),
						Id("result").Dot("Error").Op("!=").Nil(),
					).Block(
						Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"))),
					),
				),
			)
		} else {
			// delete object that doesn't require scheduling (no reconciler)
			deleteObjectExecution = Comment("delete object")
			deleteObjectExecution.Line()
			deleteObjectExecution.If(
				Id("result").Op(":=").Id("h").Dot("DB").Dot("Delete").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName))),
				Id("result").Dot("Error").Op("!=").Nil(),
			).Block(
				Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"))),
			)
		}

		// delete handler includes instance check for definition objects to ensure
		// no definitions with related instances get deleted (where applicable)
		instanceCheck := false
		for _, typeName := range deletionInstanceCheckTypeNames() {
			if mc.TypeName == typeName {
				instanceCheck = true
			}
		}
		deleteObjectChecks := &Statement{}
		if instanceCheck {
			instancesName := strings.TrimSuffix(mc.TypeName, "Definition") + "Instances"
			deleteObjectChecks = If(
				Id("result").Op(":=").Id("h").Dot("DB").Dot("Preload").Call(
					Lit(instancesName),
				).Dot("First").Call(Op("&").Id(
					strcase.ToLowerCamel(mc.TypeName),
				).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			).Line()
			deleteObjectChecks.Line()
			deleteObjectChecks.Comment("check to make sure no dependent instances exist for this definition")
			deleteObjectChecks.Line()
			deleteObjectChecks.If(
				Len(Id(strcase.ToLowerCamel(mc.TypeName)).Dot(instancesName)).Op("!=").Lit(0).Block(
					Id("err").Op(":=").Qual("errors", "New").Call(
						Lit(fmt.Sprintf(
							"%s has related %s - cannot be deleted",
							strcase.ToDelimited(mc.TypeName, ' '),
							strcase.ToDelimited(instancesName, ' '),
						)),
					),
					Return().Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus409",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")),
				),
			)
			deleteObjectChecks.Line()
		} else {
			deleteObjectChecks = If(
				Id("result").Op(":=").Id("h").Dot("DB").
					Dot("First").Call(Op("&").Id(
					strcase.ToLowerCamel(mc.TypeName),
				).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			).Line()
		}

		f.Comment("///////////////////////////////////////////////////////////////////////////////")
		f.Comment(mc.TypeName)
		f.Comment("///////////////////////////////////////////////////////////////////////////////")
		f.Line()
		// get object versions
		f.Comment(fmt.Sprintf(
			"@Summary %s gets the supported versions for the %s API.",
			mc.GetVersionHandlerName,
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get the supported API versions for %s.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@ID %s-get-versions", strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Produce json")
		f.Comment("@Success 200 {object} api.RESTAPIVersions \"OK\"")
		f.Comment(fmt.Sprintf(
			"@Router /%s/versions [GET]", pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetVersionHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Return(
				Id("c").Dot("JSON").Call(
					Qual("net/http", "StatusOK"),
					Qual(
						"github.com/threeport/threeport/pkg/api",
						"RestapiVersions",
					).Index(String().Call(Qual(
						fmt.Sprintf(
							"github.com/threeport/threeport/pkg/api/%s",
							cc.Version,
						),
						fmt.Sprintf(
							"ObjectType%s", mc.TypeName,
						),
					))),
				),
			),
		)
		// add object handler
		f.Comment(fmt.Sprintf(
			"@Summary adds a new %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Add a new %s to the Threeport database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID add-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 201 {object} %s.Response \"Created\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s [POST]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.AddHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			Line(),
			Comment("check for empty payload, unsupported fields, GORM Model fields, optional associations, etc."),
			If(Id("id").Op(",").Id("err").Op(":=").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"PayloadCheck",
			).Call(Id("c").Op(",").Lit(false).Op(",").Id("objectType").Op(",").Id(strcase.ToLowerCamel(mc.TypeName))).Op(";").Id("err").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatusErr",
				).Call(Id("id").Op(",").Id("c").Op(",").Nil(), Qual(
					"errors",
					"New",
				).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"),
				)),
			),
			Line(),
			If(Id("err").Op(":=").Id("c").Dot("Bind").Call(
				Op("&").Id(strcase.ToLowerCamel(mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")),
				),
			)),
			Line(),
			Comment("check for missing required fields"),
			If(Id("id").Op(",").Id("err").Op(":=").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ValidateBoundData",
			).Call(Id("c").Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")).Op(";").
				Id("err").Op("!=").Nil(),
			).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatusErr",
				).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
					"errors",
					"New",
				).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
			),
			Line(),
			checkDuplicateNames,
			Comment("persist to DB"),
			If(Id("result").Op(":=").Id("h").Dot("DB").Dot("Create").Call(
				Op("&").Id(strcase.ToLowerCamel(mc.TypeName)),
			).Op(";").Id("result").Dot("Error").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
				),
			),
			Line(),
			notifyControllersCreateHandler,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
			If(Id("err").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus201",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// get all objects handler
		f.Comment(fmt.Sprintf(
			"@Summary gets all %s.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get all %s from the Threeport database.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@ID get-%s-%s",
			cc.ApiVersion,
			pluralize.Pluralize(strcase.ToLowerCamel(mc.TypeName), 2, false),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment(fmt.Sprintf(
			"@Param %s query string false \"%s search by name\"",
			"name", // TODO: get fields from model for query params
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s [GET]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetAllHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id("params").Op(",").Id("err").Op(":=").Id("c").Assert(Op("*").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"CustomContext",
			)).Dot("GetPaginationParams").Call(),
			If(Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus400",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType"))),
			)),
			Line(),
			Var().Id("filter").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(Id("err").Op(":=").Id("c").Dot("Bind").Call(Op("&").Id("filter")).Op(";").Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType"))),
			)),
			Line(),
			Var().Id("totalCount").Int64(),
			If(Id("result").Op(":=").Id("h").Dot("DB").Add(dbLoadAssociationStatement).Dot("Model").Call(
				Op("&").Qual(
					fmt.Sprintf(
						"github.com/threeport/threeport/pkg/api/%s",
						cc.Version,
					),
					mc.TypeName,
				).Values(),
			).Dot("Where").Call(Op("&").Id("filter")).Dot("Count").Call(Op("&").Id("totalCount")),
				Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Id("records").Op(":=").Op("&").Index().Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			).Values(),
			If(Id("result").Op(":=").Id("h").Dot("DB").Add(dbLoadAssociationStatement).Dot("Order").Call(
				Lit("ID asc")).Dot("Where").Call(Op("&").Id("filter")).
				Dot("Limit").Call(Id("params").Dot("Size")).
				Dot("Offset").Call(Call(
				Id("params").Dot("Page").Op("-").Lit(1)).Op("*").Id("params").Dot("Size")).
				// TODO: figure out DB preloads
				Dot("Find").Call(Id("records")).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
				)),
			),
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateMeta",
			).Call(Id("params").Op(",").Id("totalCount")).Op(",").Op("*").Id("records").Op(",").Id("objectType")),
			If(Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType")),
				)),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// get object handler
		f.Comment(fmt.Sprintf(
			"@Summary gets a %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get a particular %s from the database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID get-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [GET]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetOneHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"github.com/threeport/threeport/pkg/api/%s",
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("DB").Add(dbLoadAssociationStatement).
					Dot("First").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
				Line(),
				Line(),
				Id("response").Op(",").Id("err").Op(":=").Qual(fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				), "CreateResponse").Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				)),
				Line(),
				Line(),
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus200",
				).Call(Id("c").Op(",").Op("*").Id("response"))),
			),
		)
		// update object handler
		f.Comment(fmt.Sprintf(
			"@Summary updates specific fields for an existing %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Update a %s in the database.  Provide one or more fields to update.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Note: This API endpint is for updating %s objects only.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description Request bodies that include related objects will be accepted, however")
		f.Comment("@Description the related objects will not be changed.  Call the patch or put method for")
		f.Comment("@Description each particular existing object to change them.")
		f.Comment(fmt.Sprintf(
			"@ID update-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [PATCH]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.PatchHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"github.com/threeport/threeport/pkg/api/%s",
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Comment("check for empty payload, invalid or unsupported fields, optional associations, etc."),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"PayloadCheck",
				).Call(Id("c").Op(",").Lit(true).Op(",").Id("objectType").Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("bind payload"),
			Var().Id(fmt.Sprintf("updated%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				Id("err").Op(":=").Id("c").Dot("Bind").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			//reconcileCheckHandler,
			Line(),
			Comment("update object in database"),
			If(
				Id("result").Op(":=").Id("h").Dot("DB").Dot("Model").Call(
					Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)),
				).Dot("Updates").Call(
					Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
				),
			),
			Line(),
			notifyControllersUpdateHandler,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// replace object handler
		f.Comment(fmt.Sprintf(
			"@Summary updates an existing %s by replacing the entire object.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Replace a %s in the database.  All required fields must be provided.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description If any optional fields are not provided, they will be null post-update.")
		f.Comment(fmt.Sprintf(
			"@Description Note: This API endpint is for updating %s objects only.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description Request bodies that include related objects will be accepted, however")
		f.Comment("@Description the related objects will not be changed.  Call the patch or put method for")
		f.Comment("@Description each particular existing object to change them.")
		f.Comment(fmt.Sprintf(
			"@ID replace-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [PUT]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.PutHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"github.com/threeport/threeport/pkg/api/%s",
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Comment("check for empty payload, invalid or unsupported fields, optional associations, etc."),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"PayloadCheck",
				).Call(Id("c").Op(",").Lit(true).Op(",").Id("objectType").Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("bind payload"),
			Var().Id(fmt.Sprintf("updated%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				Id("err").Op(":=").Id("c").Dot("Bind").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("check for missing required fields"),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ValidateBoundData",
				).Call(Id("c").Op(",").Id(fmt.Sprintf("updated%s", mc.TypeName)).Op(",").Id("objectType")).
					Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("persist provided data"),
			Id(fmt.Sprintf("updated%s", mc.TypeName)).Dot("ID").Op("=").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("ID"),
			If(
				Id("result").Op(":=").Id("h").Dot("DB").Dot("Session").Call(
					Op("&").Qual(
						"gorm.io/gorm",
						"Session",
					).Values(Dict{
						Id("FullSaveAssociations"): Lit(false),
					})).Dot("Omit").Call(
					Lit("CreatedAt").Op(",").Lit("DeletedAt"),
				).Dot("Save").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
					),
				),
			),
			Line(),
			Comment("reload updated data from DB"),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// delete object handler
		f.Comment(fmt.Sprintf(
			"@Summary deletes a %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Delete a %s by ID from the database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID delete-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 409 {object} %s.Response \"Conflict\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			"v0",
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [DELETE]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.DeleteHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"github.com/threeport/threeport/pkg/api/%s",
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					cc.Version,
				),
				mc.TypeName,
			),
			// TODO: figure out all preload objects
			deleteObjectChecks,
			Line(),
			deleteObjectExecution,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
	}

	// write code to file
	genFilename := fmt.Sprintf("%s_gen.go", sdk.FilenameSansExt(cc.ModelFilename))
	genFilepath := filepath.Join(apiHandlersPath(cc.ApiVersion), genFilename)
	file, err := os.OpenFile(genFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file to write generated code for model handlers: %w", err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for model handlers: %w", err)
	}
	fmt.Printf("code generation complete for %s model handlers\n", cc.ControllerDomainLower)

	return nil
}

// ExtensionModelHandlers generates the handlers for each model.
func (cc *ControllerConfig) ExtensionModelHandlers(modulePath string) error {
	pluralize := pluralize.NewClient()
	f := NewFile("handlers")
	f.HeaderComment("generated by 'threeport-sdk gen' for API model boilerplate' - do not edit")

	f.ImportAlias("github.com/labstack/echo/v4", "echo")
	f.ImportAlias("github.com/threeport/threeport/pkg/api-server/v0", "iapi")
	f.ImportAlias("github.com/threeport/threeport/pkg/notifications/v0", "notifications")
	f.ImportAlias("github.com/threeport/threeport/pkg/api/v0", "tpv0")

	for _, mc := range cc.ModelConfigs {
		// for models that have a name field - either directly in the model or
		// inherited from Definition or Instance - add a check for duplicate
		// names in the handler that adds the record to the DB
		checkDuplicateNames := &Statement{}
		if mc.NameField && !mc.AllowDuplicateNames {
			checkDuplicateNames.Comment("check for duplicate names")
			checkDuplicateNames.Line()
			checkDuplicateNames.Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			).Line()
			checkDuplicateNames.Id("nameUsed").Op(":=").Lit(true).Line()
			checkDuplicateNames.Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Where").Call(
				Lit("name = ?"), Id(strcase.ToLowerCamel(mc.TypeName)).Dot("Name"),
			).Dot("First").Call(
				Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)),
			).Line()
			checkDuplicateNames.If(Id("result").Dot("Error").Op("!=").Nil()).Block(
				If(Qual("errors", "Is").Call(
					Id("result").Dot("Error"), Qual("gorm.io/gorm", "ErrRecordNotFound"),
				)).Block(
					Id("nameUsed").Op("=").Lit(false),
				).Else().Block(
					Return(
						Id("iapi").Dot("ResponseStatus500").Call(
							Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"),
						),
					),
				),
			).Line()
			checkDuplicateNames.If(Id("nameUsed")).Block(
				Return(
					Id("iapi").Dot("ResponseStatus409").Call(
						Id("c"), Nil(), Qual("errors", "New").Call(
							Lit("object with provided name already exists"),
						), Id("objectType"),
					),
				),
			).Line()
		}

		notifyControllersCreateHandler := &Statement{}
		notifyControllersUpdateHandler := &Statement{}
		deleteObjectExecution := &Statement{}

		dbLoadAssociationStatement := Null()

		if mc.DbLoadAssociations {
			dbLoadAssociationStatement = Dot("Preload").Call(Qual("gorm.io/gorm/clause", "Associations"))
		}

		if mc.Reconciler {
			// configure controller notifications
			// create notifications
			notifyControllersCreateHandler = Comment("notify controller if reconciliation is required")
			notifyControllersCreateHandler.Line()
			notifyControllersCreateHandler.If(Op("!*").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("Reconciled").Block(
				Id("notifPayload").Op(",").Id("err").Op(":=").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationCreated",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")))),
				),
				Id("h").Dot("Handler").Dot("JS").Dot("Publish").Call(Qual(
					fmt.Sprintf(
						"%s/pkg/api/%s",
						modulePath,
						cc.Version,
					),
					mc.CreateSubject,
				).Op(",").Op("*").Id("notifPayload")),
			))

			// update notifications
			notifyControllersUpdateHandler = Comment("notify controller if reconciliation is required")
			notifyControllersUpdateHandler.Line()
			notifyControllersUpdateHandler.If(Op("!*").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("Reconciled").Block(
				Id("notifPayload").Op(",").Id("err").Op(":=").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationUpdated",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")))),
				),
				Id("h").Dot("Handler").Dot("JS").Dot("Publish").Call(Qual(
					fmt.Sprintf(
						"%s/pkg/api/%s",
						modulePath,
						cc.Version,
					),
					mc.UpdateSubject,
				).Op(",").Op("*").Id("notifPayload")),
			))

			// schedule for deletion
			deleteObjectExecution = Comment("schedule for deletion if not already scheduled")
			deleteObjectExecution.Line()
			deleteObjectExecution.Comment("if scheduled and reconciled, delete object from DB")
			deleteObjectExecution.Line()
			deleteObjectExecution.Comment("if scheduled but not reconciled, return 409 (controller is working on it)")
			deleteObjectExecution.Line()
			deleteObjectExecution.If(Id(strcase.ToLowerCamel(mc.TypeName)).Dot("DeletionScheduled").Op("==").Nil()).Block(
				Comment("schedule for deletion"),
				Id("reconciled").Op(":=").Lit(false),
				Id("timestamp").Op(":=").Qual("time", "Now").Call().Dot("UTC").Call(),
				Id(fmt.Sprintf("scheduled%s", mc.TypeName)).Op(":=").Qual(
					fmt.Sprintf("%s/pkg/api/%s", modulePath, cc.Version),
					mc.TypeName,
				).Values(
					Dict{
						Line().Id("Reconciliation"): Qual(
							fmt.Sprintf("github.com/threeport/threeport/pkg/api/%s", cc.Version),
							"Reconciliation",
						).Values(
							Dict{
								Id("Reconciled"):        Op("&").Id("reconciled"),
								Id("DeletionScheduled"): Op("&").Id("timestamp"),
							},
						),
					},
				),
				If(
					Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Model").Call(
						Op("&").Id(strcase.ToLowerCamel(mc.TypeName)),
					).Dot("Updates").Call(
						Id(fmt.Sprintf("scheduled%s", mc.TypeName)),
					),
					Id("result").Dot("Error").Op("!=").Nil(),
				).Block(
					Return(Id("iapi").Dot("ResponseStatus500").Call(
						Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType")),
					),
				),
				Comment("notify controller"),
				List(Id("notifPayload"), Id("err")).Op(":=").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("NotificationPayload").Call(
					Line().Qual(
						"github.com/threeport/threeport/pkg/notifications/v0",
						"NotificationOperationDeleted",
					),
					Line().Lit(false),
					Line().Qual("time", "Now").Call().Dot("Unix").Call(),
					Line(),
				),
				If(Id("err").Op("!=").Nil()).Block(
					Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("err"), Id("objectType"))),
				),
				Id("h").Dot("Handler").Dot("JS").Dot("Publish").Call(
					Qual(
						fmt.Sprintf("%s/pkg/api/%s", modulePath, cc.Version),
						fmt.Sprintf("%sDeleteSubject", mc.TypeName),
					), Op("*").Id("notifPayload"),
				),
			).Else().Block(
				If(Id(strcase.ToLowerCamel(mc.TypeName)).Dot("DeletionConfirmed").Op("==").Nil()).Block(
					Comment("if deletion scheduled but not reconciled, return 409 - deletion"),
					Comment("already underway"),
					Return(
						Id("iapi").Dot("ResponseStatus409").Call(
							Id("c"),
							Nil(),
							Qual("errors", "New").Call(Qual("fmt", "Sprintf").Call(
								Line().Lit("object with ID %d already being deleted"),
								Line().Op("*").Id(strcase.ToLowerCamel(mc.TypeName)).Dot("ID"),
								Line(),
							)),
							Id("objectType"),
						),
					),
				).Else().Block(
					Comment("object scheduled for deletion and confirmed - it can be deleted"),
					Comment("from DB"),
					If(
						Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Delete").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName))),
						Id("result").Dot("Error").Op("!=").Nil(),
					).Block(
						Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"))),
					),
				),
			)
		} else {
			// delete object that doesn't require scheduling (no reconciler)
			deleteObjectExecution = Comment("delete object")
			deleteObjectExecution.Line()
			deleteObjectExecution.If(
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Delete").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName))),
				Id("result").Dot("Error").Op("!=").Nil(),
			).Block(
				Return(Id("iapi").Dot("ResponseStatus500").Call(Id("c"), Nil(), Id("result").Dot("Error"), Id("objectType"))),
			)
		}

		// delete handler includes instance check for definition objects to ensure
		// no definitions with related instances get deleted (where applicable)
		instanceCheck := false
		for _, typeName := range deletionInstanceCheckTypeNames() {
			if mc.TypeName == typeName {
				instanceCheck = true
			}
		}
		deleteObjectChecks := &Statement{}
		if instanceCheck {
			instancesName := strings.TrimSuffix(mc.TypeName, "Definition") + "Instances"
			deleteObjectChecks = If(
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Preload").Call(
					Lit(instancesName),
				).Dot("First").Call(Op("&").Id(
					strcase.ToLowerCamel(mc.TypeName),
				).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			).Line()
			deleteObjectChecks.Line()
			deleteObjectChecks.Comment("check to make sure no dependent instances exist for this definition")
			deleteObjectChecks.Line()
			deleteObjectChecks.If(
				Len(Id(strcase.ToLowerCamel(mc.TypeName)).Dot(instancesName)).Op("!=").Lit(0).Block(
					Id("err").Op(":=").Qual("errors", "New").Call(
						Lit(fmt.Sprintf(
							"%s has related %s - cannot be deleted",
							strcase.ToDelimited(mc.TypeName, ' '),
							strcase.ToDelimited(instancesName, ' '),
						)),
					),
					Return().Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus409",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")),
				),
			)
			deleteObjectChecks.Line()
		} else {
			deleteObjectChecks = If(
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").
					Dot("First").Call(Op("&").Id(
					strcase.ToLowerCamel(mc.TypeName),
				).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			).Line()
		}

		f.Comment("///////////////////////////////////////////////////////////////////////////////")
		f.Comment(mc.TypeName)
		f.Comment("///////////////////////////////////////////////////////////////////////////////")
		f.Line()
		// get object versions
		f.Comment(fmt.Sprintf(
			"@Summary %s gets the supported versions for the %s API.",
			mc.GetVersionHandlerName,
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get the supported API versions for %s.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@ID %s-get-versions", strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Produce json")
		f.Comment("@Success 200 {object} api.RESTAPIVersions \"OK\"")
		f.Comment(fmt.Sprintf(
			"@Router /%s/versions [GET]", pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetVersionHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Return(
				Id("c").Dot("JSON").Call(
					Qual("net/http", "StatusOK"),
					Qual(
						"github.com/threeport/threeport/pkg/api",
						"RestapiVersions",
					).Index(String().Call(Qual(
						fmt.Sprintf(
							"%s/pkg/api/%s",
							modulePath,
							cc.Version,
						),
						fmt.Sprintf(
							"ObjectType%s", mc.TypeName,
						),
					))),
				),
			),
		)
		// add object handler
		f.Comment(fmt.Sprintf(
			"@Summary adds a new %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Add a new %s to the Threeport database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID add-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 201 {object} %s.Response \"Created\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s [POST]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.AddHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			Line(),
			Comment("check for empty payload, unsupported fields, GORM Model fields, optional associations, etc."),
			If(Id("id").Op(",").Id("err").Op(":=").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"PayloadCheck",
			).Call(Id("c").Op(",").Lit(false).Op(",").Id("objectType").Op(",").Id(strcase.ToLowerCamel(mc.TypeName))).Op(";").Id("err").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatusErr",
				).Call(Id("id").Op(",").Id("c").Op(",").Nil(), Qual(
					"errors",
					"New",
				).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"),
				)),
			),
			Line(),
			If(Id("err").Op(":=").Id("c").Dot("Bind").Call(
				Op("&").Id(strcase.ToLowerCamel(mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType")),
				),
			)),
			Line(),
			Comment("check for missing required fields"),
			If(Id("id").Op(",").Id("err").Op(":=").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ValidateBoundData",
			).Call(Id("c").Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")).Op(";").
				Id("err").Op("!=").Nil(),
			).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatusErr",
				).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
					"errors",
					"New",
				).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
			),
			Line(),
			checkDuplicateNames,
			Comment("persist to DB"),
			If(Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Create").Call(
				Op("&").Id(strcase.ToLowerCamel(mc.TypeName)),
			).Op(";").Id("result").Dot("Error").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
				),
			),
			Line(),
			notifyControllersCreateHandler,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
			If(Id("err").Op("!=").Nil()).Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus201",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// get all objects handler
		f.Comment(fmt.Sprintf(
			"@Summary gets all %s.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get all %s from the Threeport database.",
			pluralize.Pluralize(strcase.ToDelimited(mc.TypeName, ' '), 2, false),
		))
		f.Comment(fmt.Sprintf(
			"@ID get-%s-%s",
			cc.ApiVersion,
			pluralize.Pluralize(strcase.ToLowerCamel(mc.TypeName), 2, false),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment(fmt.Sprintf(
			"@Param %s query string false \"%s search by name\"",
			"name", // TODO: get fields from model for query params
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s [GET]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetAllHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id("params").Op(",").Id("err").Op(":=").Id("c").Assert(Op("*").Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"CustomContext",
			)).Dot("GetPaginationParams").Call(),
			If(Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus400",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType"))),
			)),
			Line(),
			Var().Id("filter").Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(Id("err").Op(":=").Id("c").Dot("Bind").Call(Op("&").Id("filter")).Op(";").Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType"))),
			)),
			Line(),
			Var().Id("totalCount").Int64(),
			If(Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Add(dbLoadAssociationStatement).Dot("Model").Call(
				Op("&").Qual(
					fmt.Sprintf(
						"%s/pkg/api/%s",
						modulePath,
						cc.Version,
					),
					mc.TypeName,
				).Values(),
			).Dot("Where").Call(Op("&").Id("filter")).Dot("Count").Call(Op("&").Id("totalCount")),
				Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Id("records").Op(":=").Op("&").Index().Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			).Values(),
			If(Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Add(dbLoadAssociationStatement).Dot("Order").Call(
				Lit("ID asc")).Dot("Where").Call(Op("&").Id("filter")).
				Dot("Limit").Call(Id("params").Dot("Size")).
				Dot("Offset").Call(Call(
				Id("params").Dot("Page").Op("-").Lit(1)).Op("*").Id("params").Dot("Size")).
				// TODO: figure out DB preloads
				Dot("Find").Call(Id("records")).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
				)),
			),
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateMeta",
			).Call(Id("params").Op(",").Id("totalCount")).Op(",").Op("*").Id("records").Op(",").Id("objectType")),
			If(Id("err").Op("!=").Nil().Block(
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus500",
				).Call(Id("c").Op(",").Op("&").Id("params").Op(",").Id("err").Op(",").Id("objectType")),
				)),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// get object handler
		f.Comment(fmt.Sprintf(
			"@Summary gets a %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Get a particular %s from the database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID get-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [GET]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.GetOneHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"%s/pkg/api/%s",
				modulePath,
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Add(dbLoadAssociationStatement).
					Dot("First").Call(Op("&").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
				Line(),
				Line(),
				Id("response").Op(",").Id("err").Op(":=").Qual(fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				), "CreateResponse").Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
				If(Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				)),
				Line(),
				Line(),
				Return(Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ResponseStatus200",
				).Call(Id("c").Op(",").Op("*").Id("response"))),
			),
		)
		// update object handler
		f.Comment(fmt.Sprintf(
			"@Summary updates specific fields for an existing %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Update a %s in the database.  Provide one or more fields to update.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Note: This API endpint is for updating %s objects only.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description Request bodies that include related objects will be accepted, however")
		f.Comment("@Description the related objects will not be changed.  Call the patch or put method for")
		f.Comment("@Description each particular existing object to change them.")
		f.Comment(fmt.Sprintf(
			"@ID update-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [PATCH]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.PatchHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"%s/pkg/api/%s",
				modulePath,
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Comment("check for empty payload, invalid or unsupported fields, optional associations, etc."),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"PayloadCheck",
				).Call(Id("c").Op(",").Lit(true).Op(",").Id("objectType").Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("bind payload"),
			Var().Id(fmt.Sprintf("updated%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				Id("err").Op(":=").Id("c").Dot("Bind").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			//reconcileCheckHandler,
			Line(),
			Comment("update object in database"),
			If(
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Model").Call(
					Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)),
				).Dot("Updates").Call(
					Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
				),
			),
			Line(),
			notifyControllersUpdateHandler,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// replace object handler
		f.Comment(fmt.Sprintf(
			"@Summary updates an existing %s by replacing the entire object.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Replace a %s in the database.  All required fields must be provided.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description If any optional fields are not provided, they will be null post-update.")
		f.Comment(fmt.Sprintf(
			"@Description Note: This API endpint is for updating %s objects only.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment("@Description Request bodies that include related objects will be accepted, however")
		f.Comment("@Description the related objects will not be changed.  Call the patch or put method for")
		f.Comment("@Description each particular existing object to change them.")
		f.Comment(fmt.Sprintf(
			"@ID replace-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Param %[1]s body %[2]s.%[3]s true \"%[3]s object\"",
			strcase.ToLowerCamel(mc.TypeName),
			cc.Version,
			mc.TypeName,
		))
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 400 {object} %s.Response \"Bad Request\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [PUT]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.PutHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"%s/pkg/api/%s",
				modulePath,
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(fmt.Sprintf("existing%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Comment("check for empty payload, invalid or unsupported fields, optional associations, etc."),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"PayloadCheck",
				).Call(Id("c").Op(",").Lit(true).Op(",").Id("objectType").Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName))).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("bind payload"),
			Var().Id(fmt.Sprintf("updated%s", mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			If(
				Id("err").Op(":=").Id("c").Dot("Bind").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("check for missing required fields"),
			If(
				Id("id").Op(",").Id("err").Op(":=").Qual(
					"github.com/threeport/threeport/pkg/api-server/v0",
					"ValidateBoundData",
				).Call(Id("c").Op(",").Id(fmt.Sprintf("updated%s", mc.TypeName)).Op(",").Id("objectType")).
					Op(";").Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatusErr",
					).Call(Id("id").Op(",").Id("c").Op(",").Nil().Op(",").Qual(
						"errors",
						"New",
					).Call(Id("err").Dot("Error").Call()).Op(",").Id("objectType"))),
				),
			),
			Line(),
			Comment("persist provided data"),
			Id(fmt.Sprintf("updated%s", mc.TypeName)).Dot("ID").Op("=").Id(fmt.Sprintf("existing%s", mc.TypeName)).Dot("ID"),
			If(
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").Dot("Session").Call(
					Op("&").Qual(
						"gorm.io/gorm",
						"Session",
					).Values(Dict{
						Id("FullSaveAssociations"): Lit(false),
					})).Dot("Omit").Call(
					Lit("CreatedAt").Op(",").Lit("DeletedAt"),
				).Dot("Save").Call(
					Op("&").Id(fmt.Sprintf("updated%s", mc.TypeName)),
				).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
					),
				),
			),
			Line(),
			Comment("reload updated data from DB"),
			If(
				// TODO: figure out preload objects
				Id("result").Op(":=").Id("h").Dot("Handler").Dot("DB").
					Dot("First").Call(Op("&").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id(fmt.Sprintf(
					"%sID", strcase.ToLowerCamel(mc.TypeName),
				))).Op(";").Id("result").Dot("Error").Op("!=").Nil().Block(
					If(
						Id("errors").Dot("Is").Call(Id("result").Dot("Error").Op(",").Qual(
							"gorm.io/gorm",
							"ErrRecordNotFound",
						)).Block(
							Return(Qual(
								"github.com/threeport/threeport/pkg/api-server/v0",
								"ResponseStatus404",
							).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType")),
							)),
						Return(Qual(
							"github.com/threeport/threeport/pkg/api-server/v0",
							"ResponseStatus500",
						).Call(Id("c").Op(",").Nil().Op(",").Id("result").Dot("Error").Op(",").Id("objectType"))),
					),
				),
			),
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(fmt.Sprintf("existing%s", mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
		// delete object handler
		f.Comment(fmt.Sprintf(
			"@Summary deletes a %s.", strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@Description Delete a %s by ID from the database.",
			strcase.ToDelimited(mc.TypeName, ' '),
		))
		f.Comment(fmt.Sprintf(
			"@ID delete-%s-%s", cc.ApiVersion, strcase.ToLowerCamel(mc.TypeName),
		))
		f.Comment("@Accept json")
		f.Comment("@Produce json")
		f.Comment("@Param id path int true \"ID\"")
		f.Comment(fmt.Sprintf(
			"@Success 200 {object} %s.Response \"OK\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 404 {object} %s.Response \"Not Found\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 409 {object} %s.Response \"Conflict\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Failure 500 {object} %s.Response \"Internal Server Error\"",
			cc.Version,
		))
		f.Comment(fmt.Sprintf(
			"@Router /%s/%s/{id} [DELETE]",
			cc.Version,
			pluralize.Pluralize(strcase.ToKebab(mc.TypeName), 2, false),
		))
		f.Func().Params(
			Id("h").Id("Handler"),
		).Id(mc.DeleteHandlerName).Params(
			Id("c").Qual(
				"github.com/labstack/echo/v4",
				"Context",
			),
		).Parens(List(
			Error(),
		)).Block(
			Id("objectType").Op(":=").Qual(fmt.Sprintf(
				"%s/pkg/api/%s",
				modulePath,
				cc.Version,
			),
				fmt.Sprintf(
					"ObjectType%s",
					mc.TypeName,
				),
			),
			Id(fmt.Sprintf(
				"%sID", strcase.ToLowerCamel(mc.TypeName),
			)).Op(":=").Id("c").Dot("Param").Call(Lit("id")),
			Var().Id(strcase.ToLowerCamel(mc.TypeName)).Qual(
				fmt.Sprintf(
					"%s/pkg/api/%s",
					modulePath,
					cc.Version,
				),
				mc.TypeName,
			),
			// TODO: figure out all preload objects
			deleteObjectChecks,
			Line(),
			deleteObjectExecution,
			Line(),
			Id("response").Op(",").Id("err").Op(":=").Qual(
				fmt.Sprintf(
					"github.com/threeport/threeport/pkg/api/%s",
					"v0",
				),
				"CreateResponse",
			).Call(Nil().Op(",").Id(strcase.ToLowerCamel(mc.TypeName)).Op(",").Id("objectType")),
			If(
				Id("err").Op("!=").Nil().Block(
					Return(Qual(
						"github.com/threeport/threeport/pkg/api-server/v0",
						"ResponseStatus500",
					).Call(Id("c").Op(",").Nil().Op(",").Id("err").Op(",").Id("objectType"))),
				),
			),
			Line(),
			Return(Qual(
				"github.com/threeport/threeport/pkg/api-server/v0",
				"ResponseStatus200",
			).Call(Id("c").Op(",").Op("*").Id("response"))),
		)
	}

	// write code to file
	genFilename := fmt.Sprintf("%s_gen.go", sdk.FilenameSansExt(cc.ModelFilename))
	genFilepath := filepath.Join(apiHandlersPath(cc.ApiVersion), genFilename)
	file, err := os.OpenFile(genFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file to write generated code for model handlers: %w", err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for model handlers: %w", err)
	}
	fmt.Printf("code generation complete for %s model handlers\n", cc.ControllerDomainLower)

	return nil
}
