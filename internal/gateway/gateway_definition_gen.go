// generated by 'threeport-codegen controller' - do not edit

package gateway

import (
	"errors"
	"fmt"
	mapstructure "github.com/mitchellh/mapstructure"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	controller "github.com/threeport/threeport/pkg/controller/v0"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

// GatewayDefinitionReconciler reconciles system state when a GatewayDefinition
// is created, updated or deleted.
func GatewayDefinitionReconciler(r *controller.Reconciler) {
	r.ShutdownWait.Add(1)
	reconcilerLog := r.Log.WithValues("reconcilerName", r.Name)
	reconcilerLog.Info("reconciler started")
	shutdown := false

	for {
		// create a fresh log object per reconciliation loop so we don't
		// accumulate values across multiple loops
		log := r.Log.WithValues("reconcilerName", r.Name)

		if shutdown {
			break
		}

		// check for shutdown instruction
		select {
		case <-r.Shutdown:
			shutdown = true
		default:
			// pull message off queue
			msg := r.PullMessage()
			if msg == nil {
				continue
			}

			// consume message data to capture notification from API
			notif, err := notifications.ConsumeMessage(msg.Data)
			if err != nil {
				log.Error(
					err, "failed to consume message data from NATS",
					"msgSubject", msg.Subject,
					"msgData", string(msg.Data),
				)
				go r.RequeueRaw(msg.Subject, msg.Data)
				log.V(1).Info("gateway definition reconciliation requeued with identical payload and fixed delay")
				continue
			}

			// decode the object that was created
			var gatewayDefinition v0.GatewayDefinition
			mapstructure.Decode(notif.Object, &gatewayDefinition)
			log = log.WithValues("gatewayDefinitionID", gatewayDefinition.ID)

			// back off the requeue delay as needed
			requeueDelay := controller.SetRequeueDelay(
				notif.LastRequeueDelay,
				controller.DefaultInitialRequeueDelay,
				controller.DefaultMaxRequeueDelay,
			)

			// build the notif payload for requeues
			notifPayload, err := gatewayDefinition.NotificationPayload(
				notif.Operation,
				true,
				requeueDelay,
			)
			if err != nil {
				log.Error(err, "failed to build notification payload for requeue")
				go r.RequeueRaw(msg.Subject, msg.Data)
				log.V(1).Info("gateway definition reconciliation requeued with identical payload and fixed delay")
				continue
			}

			// check for lock on object
			locked, ok := r.CheckLock(&gatewayDefinition)
			if locked || ok == false {
				go r.Requeue(&gatewayDefinition, msg.Subject, notifPayload, requeueDelay)
				log.V(1).Info("gateway definition reconciliation requeued")
				continue
			}

			// put a lock on the reconciliation of the created object
			if ok := r.Lock(&gatewayDefinition); !ok {
				go r.Requeue(&gatewayDefinition, msg.Subject, notifPayload, requeueDelay)
				log.V(1).Info("gateway definition reconciliation requeued")
				continue
			}

			// retrieve latest version of object if requeued
			if notif.Requeue {
				latestGatewayDefinition, err := client.GetGatewayDefinitionByID(
					r.APIClient,
					r.APIServer,
					*gatewayDefinition.ID,
				)
				// check if error is 404 - if object no longer exists, no need to requeue
				if errors.Is(err, client.ErrorObjectNotFound) {
					log.Info(fmt.Sprintf(
						"object with ID %d no longer exists - halting reconciliation",
						*gatewayDefinition.ID,
					))
					r.ReleaseLock(&gatewayDefinition)
					continue
				}
				if err != nil {
					log.Error(err, "failed to get gateway definition by ID from API")
					r.UnlockAndRequeue(&gatewayDefinition, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				gatewayDefinition = *latestGatewayDefinition
			}

			// determine which operation and act accordingly
			switch notif.Operation {
			case notifications.NotificationOperationCreated:
				if err := gatewayDefinitionCreated(r, &gatewayDefinition, &log); err != nil {
					log.Error(err, "failed to reconcile created gateway definition object")
					r.UnlockAndRequeue(
						&gatewayDefinition,
						msg.Subject,
						notifPayload,
						requeueDelay,
					)
					continue
				}
			case notifications.NotificationOperationUpdated:
				if err := gatewayDefinitionUpdated(r, &gatewayDefinition, &log); err != nil {
					log.Error(err, "failed to reconcile updated gateway definition object")
					r.UnlockAndRequeue(
						&gatewayDefinition,
						msg.Subject,
						notifPayload,
						requeueDelay,
					)
					continue
				}
			case notifications.NotificationOperationDeleted:
				if err := gatewayDefinitionDeleted(r, &gatewayDefinition, &log); err != nil {
					log.Error(err, "failed to reconcile deleted gateway definition object")
					r.UnlockAndRequeue(
						&gatewayDefinition,
						msg.Subject,
						notifPayload,
						requeueDelay,
					)
				} else {
					r.ReleaseLock(&gatewayDefinition)
					log.Info("gateway definition successfully reconciled")
				}
				continue
			default:
				log.Error(
					errors.New("unrecognized notifcation operation"),
					"notification included an invalid operation",
				)
				r.UnlockAndRequeue(
					&gatewayDefinition,
					msg.Subject,
					notifPayload,
					requeueDelay,
				)
				continue

			}

			// set the object's Reconciled field to true
			objectReconciled := true
			reconciledGatewayDefinition := v0.GatewayDefinition{
				Common:     v0.Common{ID: gatewayDefinition.ID},
				Reconciled: &objectReconciled,
			}
			updatedGatewayDefinition, err := client.UpdateGatewayDefinition(
				r.APIClient,
				r.APIServer,
				&reconciledGatewayDefinition,
			)
			if err != nil {
				log.Error(err, "failed to update gateway definition to mark as reconciled")
				r.UnlockAndRequeue(&gatewayDefinition, msg.Subject, notifPayload, requeueDelay)
				continue
			}
			log.V(1).Info(
				"gateway definition marked as reconciled in API",
				"gateway definitionName", updatedGatewayDefinition.Name,
			)

			// release the lock on the reconciliation of the created object
			if ok := r.ReleaseLock(&gatewayDefinition); !ok {
				log.V(1).Info("gateway definition remains locked - will unlock when TTL expires")
			} else {
				log.V(1).Info("gateway definition unlocked")
			}

			log.Info("gateway definition successfully reconciled")
		}
	}

	r.Sub.Unsubscribe()
	reconcilerLog.Info("reconciler shutting down")
	r.ShutdownWait.Done()
}
