// generated by 'threeport-codegen api-model' - do not edit

package handlers

import (
	"errors"
	echo "github.com/labstack/echo/v4"
	iapi "github.com/threeport/threeport/internal/api"
	api "github.com/threeport/threeport/pkg/api"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	notifications "github.com/threeport/threeport/pkg/notifications"
	gorm "gorm.io/gorm"
	"net/http"
)

///////////////////////////////////////////////////////////////////////////////
// WorkloadDependency
///////////////////////////////////////////////////////////////////////////////

// @Summary GetWorkloadDependencyVersions gets the supported versions for the workload dependency API.
// @Description Get the supported API versions for workload dependencies.
// @ID workloadDependency-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /workload-dependencies/versions [get]
func (h Handler) GetWorkloadDependencyVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeWorkloadDependency)])
}

// @Summary adds a new workload dependency.
// @Description Add a new workload dependency to the Threeport database.
// @ID add-workloadDependency
// @Accept json
// @Produce json
// @Param workloadDependency body v0.WorkloadDependency true "WorkloadDependency object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies [post]
func (h Handler) AddWorkloadDependency(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	var workloadDependency v0.WorkloadDependency

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&workloadDependency); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, workloadDependency, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if result := h.DB.Create(&workloadDependency); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller
	notifPayload, err := workloadDependency.NotificationPayload(
		notifications.NotificationOperationCreated,
		false,
		0,
	)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}
	h.JS.Publish(v0.WorkloadDependencyCreateSubject, *notifPayload)

	response, err := v0.CreateResponse(nil, workloadDependency)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all workload dependencies.
// @Description Get all workload dependencies from the Threeport database.
// @ID get-workloadDependencies
// @Accept json
// @Produce json
// @Param name query string false "workload dependency search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies [get]
func (h Handler) GetWorkloadDependencies(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.WorkloadDependency
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.WorkloadDependency{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.WorkloadDependency{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a workload dependency.
// @Description Get a particular workload dependency from the database.
// @ID get-workloadDependency
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies/{id} [get]
func (h Handler) GetWorkloadDependency(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	workloadDependencyID := c.Param("id")
	var workloadDependency v0.WorkloadDependency
	if result := h.DB.First(&workloadDependency, workloadDependencyID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, workloadDependency)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing workload dependency.
// @Description Update a workload dependency in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating workload dependency objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-workloadDependency
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param workloadDependency body v0.WorkloadDependency true "WorkloadDependency object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies/{id} [patch]
func (h Handler) UpdateWorkloadDependency(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	workloadDependencyID := c.Param("id")
	var existingWorkloadDependency v0.WorkloadDependency
	if result := h.DB.First(&existingWorkloadDependency, workloadDependencyID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWorkloadDependency v0.WorkloadDependency
	if err := c.Bind(&updatedWorkloadDependency); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	if result := h.DB.Model(&existingWorkloadDependency).Updates(updatedWorkloadDependency); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingWorkloadDependency)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing workload dependency by replacing the entire object.
// @Description Replace a workload dependency in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating workload dependency objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-workloadDependency
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param workloadDependency body v0.WorkloadDependency true "WorkloadDependency object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies/{id} [put]
func (h Handler) ReplaceWorkloadDependency(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	workloadDependencyID := c.Param("id")
	var existingWorkloadDependency v0.WorkloadDependency
	if result := h.DB.First(&existingWorkloadDependency, workloadDependencyID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWorkloadDependency v0.WorkloadDependency
	if err := c.Bind(&updatedWorkloadDependency); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedWorkloadDependency, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedWorkloadDependency.ID = existingWorkloadDependency.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedWorkloadDependency); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingWorkloadDependency, workloadDependencyID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingWorkloadDependency)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a workload dependency.
// @Description Delete a workload dependency by from the database.
// @ID delete-workloadDependency
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/workload-dependencies/{id} [delete]
func (h Handler) DeleteWorkloadDependency(c echo.Context) error {
	objectType := v0.ObjectTypeWorkloadDependency
	workloadDependencyID := c.Param("id")
	var workloadDependency v0.WorkloadDependency
	if result := h.DB.First(&workloadDependency, workloadDependencyID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	if result := h.DB.Delete(&workloadDependency); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller
	notifPayload, err := workloadDependency.NotificationPayload(
		notifications.NotificationOperationDeleted,
		false,
		0,
	)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}
	h.JS.Publish(v0.WorkloadDependencyDeleteSubject, *notifPayload)

	response, err := v0.CreateResponse(nil, workloadDependency)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}
