basePath: /
definitions:
  api.RESTAPIVersions:
    properties:
      API:
        description: Required.  REST API resource name.
        type: string
      Versions:
        description: Required.  REST API resource versions.
        items:
          type: string
        type: array
    required:
    - API
    - Versions
    type: object
  v0.AwsAccount:
    properties:
      AccessKeyID:
        description: The key ID credentials for the AWS account.
        type: string
      DefaultRegion:
        description: The region to use for AWS managed services if not specified.
        type: string
      Name:
        type: string
      SecretAccessKey:
        description: The secret key credentials for the AWS account.
        type: string
    required:
    - AccessKeyID
    - DefaultRegion
    - Name
    - SecretAccessKey
    type: object
  v0.AwsEksClusterDefinition:
    properties:
      AWSAccountID:
        description: The AWS account in which the RDS instance will be provisioned.
        type: integer
      ClusterDefinitionID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - AWSAccountID
    - Name
    type: object
  v0.AwsEksClusterInstance:
    properties:
      ClusterInstanceID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.AwsRelationalDatabaseDefinition:
    properties:
      AWSAccountID:
        description: The AWS account in which the RDS instance will be provisioned.
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Engine:
        description: |-
          The database engine for the instance.  One of:
          * mysql
          * postgres
        type: string
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      Storage:
        description: The amount of storage to allocate for the database.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - AWSAccountID
    - Engine
    - Name
    - Storage
    type: object
  v0.AwsRelationalDatabaseInstance:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Status:
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      awsRelationalDatabaseDefinitionID:
        type: integer
    required:
    - Name
    - Status
    type: object
  v0.ClusterDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      DefaultNodeGroupInitialSize:
        type: integer
      DefaultNodeGroupInstanceType:
        type: string
      DefaultNodeGroupMaximumSize:
        type: integer
      DefaultNodeGroupMinimumSize:
        type: integer
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      Region:
        description: |-
          The geographical region for the cluster roughly corresponding to cloud
          provider regions.
          TODO: determine whether to make this attribute immutable b/c cluster
          instances will not be moved once deployed.
        type: string
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      ZoneCount:
        description: The number of zones the cluster should span for availability.
        type: integer
    required:
    - Name
    type: object
  v0.ClusterInstance:
    properties:
      APIEndpoint:
        description: The network endpoint at which to reach the kube-api.
        type: string
      CACertificate:
        description: |-
          The CA certificate used to generate the cert and key if
          self-signed.
        type: string
      Certificate:
        description: The client certificate to use for auth to the kube-api.
        type: string
      ClusterDefinitionID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      DefaultCluster:
        description: |-
          If true the cluster instance to use for deployments if not otherwise
          specified.  Can only have one per account.
        type: boolean
      Key:
        description: The client key to use for auth to the kube-api.
        type: string
      Name:
        description: An arbitrary name the instance
        type: string
      Region:
        description: |-
          The geographical region for the cluster roughly corresponding to cloud
          provider regions.  Stored in the instance (as well as definition) since a
          change to the definition will not move a cluster.
        type: string
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      ThreeportControlPlaneCluster:
        description: |-
          If true, controllers will connect to the kube API using internal DNS
          rather than the APIEndpoint.
        type: boolean
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      WorkloadInstance:
        description: The associated workload instances running on this cluster.
        items:
          $ref: '#/definitions/v0.WorkloadInstance'
        type: array
    required:
    - APIEndpoint
    - Certificate
    - ClusterDefinitionID
    - Key
    - Name
    type: object
  v0.Company:
    properties:
      Name:
        description: Company's legal name.
        type: string
      Users:
        description: Users that represent the company.
        items:
          $ref: '#/definitions/v0.User'
        type: array
    required:
    - Name
    type: object
  v0.DomainNameDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Domain:
        description: |-
          The base domain upon which the subdomain will be added to give a workload
          a unique domain name.
        type: string
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      Zone:
        description: The name of the zone in which the domain is managed.
        type: string
    required:
    - Domain
    - Name
    - Zone
    type: object
  v0.DomainNameInstance:
    properties:
      ClusterInstanceID:
        description: The cluster where the workload that is using the domain name
          is running.
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      DomainNameDefinitionID:
        description: The definition used to define the instance.
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - ClusterInstanceID
    - DomainNameDefinitionID
    - Name
    type: object
  v0.ForwardProxyDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UpstreamHost:
        description: The hostname of the upstream service.
        type: string
      UpstreamPath:
        description: The path for the upstream service.
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    - UpstreamHost
    - UpstreamPath
    type: object
  v0.ForwardProxyInstance:
    properties:
      ClusterInstanceID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      ForwardProxyDefinitionID:
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.LogBackend:
    properties:
      Destination:
        description: The network address to connect to for storing log messages.
        type: string
    required:
    - Destination
    type: object
  v0.LogStorageDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.LogStorageInstance:
    properties:
      ClusterID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      LogStorageDefinitionID:
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.Meta:
    properties:
      Page:
        description: current Page
        example: 1
        type: integer
      Size:
        description: Size of the current page (number of returned Object elements)
        example: 1
        type: integer
      TotalCount:
        description: TotalCount of returned Object elements
        example: 1
        type: integer
    type: object
  v0.NetworkIngressDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      DomainNameID:
        description: The domain name to serve requests for.
        type: integer
      HTTPPort:
        description: Expose port 80.
        type: boolean
      HTTPSPort:
        description: Expose port 443 with TLS termination.
        type: boolean
      HTTPSRedirect:
        description: Redirect all requests to HTTP port to HTTPS.
        type: boolean
      Name:
        description: An arbitrary name for the definition.
        type: string
      Private:
        description: |-
          Allow requests from the private network outside the workload cluster but
          not from the public internet.
        type: boolean
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      Public:
        description: Allow requests from the public internet.
        type: boolean
      TCPPort:
        description: TCP Port to expose to outside network.
        type: integer
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.NetworkIngressInstance:
    properties:
      ClusterInstanceID:
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      NetworkIngressDefinitionID:
        type: integer
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.ObjectType:
    enum:
    - User
    - Company
    - Profile
    - Tier
    - NetworkIngressDefinition
    - NetworkIngressInstance
    - DomainNameDefinition
    - DomainNameInstance
    - WorkloadDefinition
    - WorkloadResourceDefinition
    - WorkloadInstance
    - WorkloadResourceInstance
    - LogBackend
    - LogStorageDefinition
    - LogStorageInstance
    - ForwardProxyDefinition
    - ForwardProxyInstance
    - ClusterDefinition
    - ClusterInstance
    - AwsAccount
    - AwsEksClusterDefinition
    - AwsEksClusterInstance
    - AwsRelationalDatabaseDefinition
    - AwsRelationalDatabaseInstance
    type: string
    x-enum-varnames:
    - ObjectTypeUser
    - ObjectTypeCompany
    - ObjectTypeProfile
    - ObjectTypeTier
    - ObjectTypeNetworkIngressDefinition
    - ObjectTypeNetworkIngressInstance
    - ObjectTypeDomainNameDefinition
    - ObjectTypeDomainNameInstance
    - ObjectTypeWorkloadDefinition
    - ObjectTypeWorkloadResourceDefinition
    - ObjectTypeWorkloadInstance
    - ObjectTypeWorkloadResourceInstance
    - ObjectTypeLogBackend
    - ObjectTypeLogStorageDefinition
    - ObjectTypeLogStorageInstance
    - ObjectTypeForwardProxyDefinition
    - ObjectTypeForwardProxyInstance
    - ObjectTypeClusterDefinition
    - ObjectTypeClusterInstance
    - ObjectTypeAwsAccount
    - ObjectTypeAwsEksClusterDefinition
    - ObjectTypeAwsEksClusterInstance
    - ObjectTypeAwsRelationalDatabaseDefinition
    - ObjectTypeAwsRelationalDatabaseInstance
  v0.Profile:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: The name of a profile
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Name
    type: object
  v0.Response:
    description: Meta info with ObjectType array of Data of Object
    properties:
      Data:
        description: Data contains array of returned Object elements
        items: {}
        type: array
      Meta:
        allOf:
        - $ref: '#/definitions/v0.Meta'
        description: Meta contains PageRequestParams (current page and size of current
          page) and TotalCount (number of returned Object elements)
      Status:
        allOf:
        - $ref: '#/definitions/v0.Status'
        description: Status represents an error that occurred while handling a request
      Type:
        allOf:
        - $ref: '#/definitions/v0.ObjectType'
        description: Type contains ObjectType of returned Data elements
        example: Transfer
    type: object
  v0.Status:
    properties:
      code:
        description: The HTTP response status code, e.g. 200 | 201 | 500
        example: 200
        type: integer
      error:
        description: The response error message if applicable, defaults to ""
        example: ""
        type: string
      message:
        description: The HTTP response status code message, e.g. OK | Created | Internal
          Server Error
        example: OK
        type: string
    type: object
  v0.Tier:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Criticality:
        description: |-
          The relative rank of criticality between tiers.  The higher the number,
          the greater the criticality.  For example, a development tier could have
          a criticality value of 10 while production could be 100.  Access control
          can then use this criticality value to determine user access.
        type: integer
      Name:
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
    required:
    - Criticality
    - Name
    type: object
  v0.User:
    properties:
      CompanyID:
        description: Company that the user represents.
        type: integer
      CountryOfResidence:
        description: Country where user resides.
        type: string
      DateOfBirth:
        description: 'User''s date of birth.  Format: `2006-01-02T00:00:00Z`'
        type: string
      Email:
        description: User's email address.
        type: string
      FirstName:
        description: User's first name.
        type: string
      LastName:
        description: User's last name.
        type: string
      Nationality:
        description: Country of which user is a citizen.
        type: string
      Password:
        description: User's account password.
        type: string
    required:
    - CountryOfResidence
    - DateOfBirth
    - Email
    - FirstName
    - LastName
    - Nationality
    - Password
    type: object
  v0.WorkloadDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name for the definition.
        type: string
      ProfileID:
        description: |-
          The profile to associate with the definition.  Profile is a named
          standard configuration for a definition object.
        type: integer
      Reconciled:
        description: Indicates if object is considered to be reconciled by workload
          controller.
        type: boolean
      TierID:
        description: |-
          The tier to associate with the definition.  Tier is a level of
          criticality for access control.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      WorkloadInstances:
        description: The associated workload instances that are deployed from this
          definition.
        items:
          $ref: '#/definitions/v0.WorkloadInstance'
        type: array
      WorkloadResourceDefinitions:
        description: The associated workload resource definitions that are derived.
        items:
          $ref: '#/definitions/v0.WorkloadResourceDefinition'
        type: array
      YAMLDocument:
        description: The yaml manifests that define the workload configuration.
        type: string
    required:
    - Name
    - YAMLDocument
    type: object
  v0.WorkloadInstance:
    properties:
      ClusterInstanceID:
        description: ClusterID is the cluster to which the workload is deployed.
        type: integer
      CompanyID:
        description: Required if no UserID.  The company that owns the object.
        type: integer
      Name:
        description: An arbitrary name the instance
        type: string
      Reconciled:
        description: Indicates if object is considered to be reconciled by workload
          controller.
        type: boolean
      Status:
        description: |-
          The status of the instance.
          TODO: use a custom type
        type: string
      UserID:
        description: Required if no CompanyID.  The user that owns the object.
        type: integer
      WorkloadDefinitionID:
        description: |-
          WorkloadDefinitionID is the definition used to configure the workload
          instance.
        type: integer
      WorkloadResourceInstances:
        description: The associated workload resource definitions that are derived.
        items:
          $ref: '#/definitions/v0.WorkloadResourceInstance'
        type: array
    required:
    - ClusterInstanceID
    - Name
    - WorkloadDefinitionID
    type: object
  v0.WorkloadResourceDefinition:
    properties:
      JSONDefinition:
        description: The individual manifest in JSON format.
        items:
          type: integer
        type: array
      WorkloadDefinitionID:
        description: The workload definition this resource belongs to.
        type: integer
    required:
    - JSONDefinition
    - WorkloadDefinitionID
    type: object
  v0.WorkloadResourceInstance:
    properties:
      JSONDefinition:
        description: |-
          The individual manifest in JSON format.  This field is a superset of
          WorkloadResourceDefinition.JSONDefinition in that it has namespace
          management and other configuration - such as resource allocation
          management - added.
        items:
          type: integer
        type: array
      Status:
        description: |-
          The Kubernetes status of the deployed resource.
          One of:
          * Pending
          * Running
          * Succeeded
          * Failed
          * Unknown
        type: string
      WorkloadInstanceID:
        description: The workload definition this resource belongs to.
        type: integer
    required:
    - JSONDefinition
    - WorkloadInstanceID
    type: object
  version.RESTAPIVersion:
    properties:
      Version:
        type: string
    required:
    - Version
    type: object
host: rest-api.threeport.io
info:
  contact:
    email: support@threeport.io
    name: Threeport Admin
    url: https://threeport.io/support
  description: Threeport RESTful API.
  termsOfService: https://threeport.io/api-tos/
  title: Threeport RESTful API
  version: v0.0.6
paths:
  /aws-accounts/versions:
    get:
      description: Get the supported API versions for aws accounts.
      operationId: awsAccount-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetAwsAccountVersions gets the supported versions for the aws account
        API.
  /aws-eks-cluster-definitions/versions:
    get:
      description: Get the supported API versions for aws eks cluster definitions.
      operationId: awsEksClusterDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetAwsEksClusterDefinitionVersions gets the supported versions for
        the aws eks cluster definition API.
  /aws-eks-cluster-instances/versions:
    get:
      description: Get the supported API versions for aws eks cluster instances.
      operationId: awsEksClusterInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetAwsEksClusterInstanceVersions gets the supported versions for the
        aws eks cluster instance API.
  /aws-relational-database-definitions/versions:
    get:
      description: Get the supported API versions for aws relational database definitions.
      operationId: awsRelationalDatabaseDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetAwsRelationalDatabaseDefinitionVersions gets the supported versions
        for the aws relational database definition API.
  /aws-relational-database-instances/versions:
    get:
      description: Get the supported API versions for aws relational database instances.
      operationId: awsRelationalDatabaseInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetAwsRelationalDatabaseInstanceVersions gets the supported versions
        for the aws relational database instance API.
  /cluster-definitions/versions:
    get:
      description: Get the supported API versions for cluster definitions.
      operationId: clusterDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetClusterDefinitionVersions gets the supported versions for the cluster
        definition API.
  /cluster-instances/versions:
    get:
      description: Get the supported API versions for cluster instances.
      operationId: clusterInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetClusterInstanceVersions gets the supported versions for the cluster
        instance API.
  /companies/versions:
    get:
      description: Get the supported API versions for companies.
      operationId: company-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetCompanyVersions gets the supported versions for the company API.
  /domain-name-definitions/versions:
    get:
      description: Get the supported API versions for domain name definitions.
      operationId: domainNameDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetDomainNameDefinitionVersions gets the supported versions for the
        domain name definition API.
  /domain-name-instances/versions:
    get:
      description: Get the supported API versions for domain name instances.
      operationId: domainNameInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetDomainNameInstanceVersions gets the supported versions for the domain
        name instance API.
  /forward-proxy-definitions/versions:
    get:
      description: Get the supported API versions for forward proxy definitions.
      operationId: forwardProxyDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetForwardProxyDefinitionVersions gets the supported versions for the
        forward proxy definition API.
  /forward-proxy-instances/versions:
    get:
      description: Get the supported API versions for forward proxy instances.
      operationId: forwardProxyInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetForwardProxyInstanceVersions gets the supported versions for the
        forward proxy instance API.
  /log-backends/versions:
    get:
      description: Get the supported API versions for log backends.
      operationId: logBackend-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetLogBackendVersions gets the supported versions for the log backend
        API.
  /log-storage-definitions/versions:
    get:
      description: Get the supported API versions for log storage definitions.
      operationId: logStorageDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetLogStorageDefinitionVersions gets the supported versions for the
        log storage definition API.
  /log-storage-instances/versions:
    get:
      description: Get the supported API versions for log storage instances.
      operationId: logStorageInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetLogStorageInstanceVersions gets the supported versions for the log
        storage instance API.
  /network-ingress-definitions/versions:
    get:
      description: Get the supported API versions for network ingress definitions.
      operationId: networkIngressDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetNetworkIngressDefinitionVersions gets the supported versions for
        the network ingress definition API.
  /network-ingress-instances/versions:
    get:
      description: Get the supported API versions for network ingress instances.
      operationId: networkIngressInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetNetworkIngressInstanceVersions gets the supported versions for the
        network ingress instance API.
  /profiles/versions:
    get:
      description: Get the supported API versions for profiles.
      operationId: profile-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetProfileVersions gets the supported versions for the profile API.
  /tiers/versions:
    get:
      description: Get the supported API versions for tiers.
      operationId: tier-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetTierVersions gets the supported versions for the tier API.
  /users/versions:
    get:
      description: Get the supported API versions for users.
      operationId: user-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: GetUserVersions gets the supported versions for the user API.
  /v0/aws-accounts:
    get:
      consumes:
      - application/json
      description: Get all aws accounts from the Threeport database.
      operationId: get-awsAccounts
      parameters:
      - description: aws account search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all aws accounts.
    post:
      consumes:
      - application/json
      description: Add a new aws account to the Threeport database.
      operationId: add-awsAccount
      parameters:
      - description: AwsAccount object
        in: body
        name: awsAccount
        required: true
        schema:
          $ref: '#/definitions/v0.AwsAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new aws account.
  /v0/aws-accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a aws account by from the database.
      operationId: delete-awsAccount
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a aws account.
    get:
      consumes:
      - application/json
      description: Get a particular aws account from the database.
      operationId: get-awsAccount
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a aws account.
    patch:
      consumes:
      - application/json
      description: |-
        Update a aws account in the database.  Provide one or more fields to update.
        Note: This API endpint is for updating aws account objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: update-awsAccount
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsAccount object
        in: body
        name: awsAccount
        required: true
        schema:
          $ref: '#/definitions/v0.AwsAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates specific fields for an existing aws account.
    put:
      consumes:
      - application/json
      description: |-
        Replace a aws account in the database.  All required fields must be provided.
        If any optional fields are not provided, they will be null post-update.
        Note: This API endpint is for updating aws account objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: replace-awsAccount
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsAccount object
        in: body
        name: awsAccount
        required: true
        schema:
          $ref: '#/definitions/v0.AwsAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing aws account by replacing the entire object.
  /v0/aws-eks-cluster-definitions:
    get:
      consumes:
      - application/json
      description: Get all aws eks cluster definitions from the Threeport database.
      operationId: get-awsEksClusterDefinitions
      parameters:
      - description: aws eks cluster definition search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all aws eks cluster definitions.
    post:
      consumes:
      - application/json
      description: Add a new aws eks cluster definition to the Threeport database.
      operationId: add-awsEksClusterDefinition
      parameters:
      - description: AwsEksClusterDefinition object
        in: body
        name: awsEksClusterDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterDefinition'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new aws eks cluster definition.
  /v0/aws-eks-cluster-definitions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a aws eks cluster definition by from the database.
      operationId: delete-awsEksClusterDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a aws eks cluster definition.
    get:
      consumes:
      - application/json
      description: Get a particular aws eks cluster definition from the database.
      operationId: get-awsEksClusterDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a aws eks cluster definition.
    patch:
      consumes:
      - application/json
      description: |-
        Update a aws eks cluster definition in the database.  Provide one or more fields to update.
        Note: This API endpint is for updating aws eks cluster definition objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: update-awsEksClusterDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsEksClusterDefinition object
        in: body
        name: awsEksClusterDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates specific fields for an existing aws eks cluster definition.
    put:
      consumes:
      - application/json
      description: |-
        Replace a aws eks cluster definition in the database.  All required fields must be provided.
        If any optional fields are not provided, they will be null post-update.
        Note: This API endpint is for updating aws eks cluster definition objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: replace-awsEksClusterDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsEksClusterDefinition object
        in: body
        name: awsEksClusterDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing aws eks cluster definition by replacing the entire
        object.
  /v0/aws-eks-cluster-instances:
    get:
      consumes:
      - application/json
      description: Get all aws eks cluster instances from the Threeport database.
      operationId: get-awsEksClusterInstances
      parameters:
      - description: aws eks cluster instance search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all aws eks cluster instances.
    post:
      consumes:
      - application/json
      description: Add a new aws eks cluster instance to the Threeport database.
      operationId: add-awsEksClusterInstance
      parameters:
      - description: AwsEksClusterInstance object
        in: body
        name: awsEksClusterInstance
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterInstance'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new aws eks cluster instance.
  /v0/aws-eks-cluster-instances/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a aws eks cluster instance by from the database.
      operationId: delete-awsEksClusterInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a aws eks cluster instance.
    get:
      consumes:
      - application/json
      description: Get a particular aws eks cluster instance from the database.
      operationId: get-awsEksClusterInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a aws eks cluster instance.
    patch:
      consumes:
      - application/json
      description: |-
        Update a aws eks cluster instance in the database.  Provide one or more fields to update.
        Note: This API endpint is for updating aws eks cluster instance objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: update-awsEksClusterInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsEksClusterInstance object
        in: body
        name: awsEksClusterInstance
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterInstance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates specific fields for an existing aws eks cluster instance.
    put:
      consumes:
      - application/json
      description: |-
        Replace a aws eks cluster instance in the database.  All required fields must be provided.
        If any optional fields are not provided, they will be null post-update.
        Note: This API endpint is for updating aws eks cluster instance objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: replace-awsEksClusterInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsEksClusterInstance object
        in: body
        name: awsEksClusterInstance
        required: true
        schema:
          $ref: '#/definitions/v0.AwsEksClusterInstance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing aws eks cluster instance by replacing the entire
        object.
  /v0/aws-relational-database-definitions:
    get:
      consumes:
      - application/json
      description: Get all aws relational database definitions from the Threeport
        database.
      operationId: get-awsRelationalDatabaseDefinitions
      parameters:
      - description: aws relational database definition search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all aws relational database definitions.
    post:
      consumes:
      - application/json
      description: Add a new aws relational database definition to the Threeport database.
      operationId: add-awsRelationalDatabaseDefinition
      parameters:
      - description: AwsRelationalDatabaseDefinition object
        in: body
        name: awsRelationalDatabaseDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsRelationalDatabaseDefinition'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new aws relational database definition.
  /v0/aws-relational-database-definitions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a aws relational database definition by from the database.
      operationId: delete-awsRelationalDatabaseDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a aws relational database definition.
    get:
      consumes:
      - application/json
      description: Get a particular aws relational database definition from the database.
      operationId: get-awsRelationalDatabaseDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a aws relational database definition.
    patch:
      consumes:
      - application/json
      description: |-
        Update a aws relational database definition in the database.  Provide one or more fields to update.
        Note: This API endpint is for updating aws relational database definition objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: update-awsRelationalDatabaseDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsRelationalDatabaseDefinition object
        in: body
        name: awsRelationalDatabaseDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsRelationalDatabaseDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates specific fields for an existing aws relational database definition.
    put:
      consumes:
      - application/json
      description: |-
        Replace a aws relational database definition in the database.  All required fields must be provided.
        If any optional fields are not provided, they will be null post-update.
        Note: This API endpint is for updating aws relational database definition objects only.
        Request bodies that include related objects will be accepted, however
        the related objects will not be changed.  Call the patch or put method for
        each particular existing object to change them.
      operationId: replace-awsRelationalDatabaseDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: AwsRelationalDatabaseDefinition object
        in: body
        name: awsRelationalDatabaseDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.AwsRelationalDatabaseDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing aws relational database definition by replacing
        the entire object.
  /v0/aws-relational-database-instances:
    get:
      consumes:
      - application/json
      description: Get all aws relational database instances from the Threeport database.
      operationId: get-awsRelationalDatabaseInstances
      parameters:
      - description: aws relational database instance search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'