package cli

import (
	"fmt"
	"path/filepath"
	"slices"

	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"

	cli "github.com/threeport/threeport/pkg/cli/v0"
	sdk "github.com/threeport/threeport/pkg/sdk/v0"
	"github.com/threeport/threeport/pkg/sdk/v0/gen"
	"github.com/threeport/threeport/pkg/sdk/v0/util"
)

// GenPluginVersionCmd generates the version command for a module's tptctl
// plugin.
func GenPluginVersionCmd(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("cmd")
	f.HeaderComment("generated by 'threeport-sdk gen' but will not be regenerated - intended for modification")

	packageDir := strcase.ToSnake(sdkConfig.ModuleName)
	commandLit := strcase.ToKebab(sdkConfig.ModuleName)

	f.Comment(fmt.Sprintf(
		"versionCmd represents the version command for the %s plugin",
		sdkConfig.ModuleName,
	))
	f.Var().Id("versionCmd").Op("=").Op("&").Qual(
		"github.com/spf13/cobra",
		"Command",
	).Values(Dict{
		Id("Use"): Lit("version"),
		Id("Short"): Lit(fmt.Sprintf(
			"Print the version of %s",
			commandLit,
		)),
		Id("Long"): Lit(fmt.Sprintf(
			"Print the version of %s",
			commandLit,
		)),
		Id("Run"): Func().Params(
			Id("cmd").Op("*").Qual("github.com/spf13/cobra", "Command"),
			Id("args").Index().String(),
		).Block(
			Qual("fmt", "Println").Call(
				Qual(
					fmt.Sprintf("%s/internal/version", gen.ModulePath),
					"GetVersion",
				).Call(),
			),
		),
	})
	f.Line()

	f.Func().Id("init").Params().Block(
		Id("rootCmd").Dot("AddCommand").Call(Id("versionCmd")),
	)

	// write code to file if not excluded by SDK config
	genFilepath := filepath.Join(
		"cmd",
		packageDir,
		"cmd",
		"version.go",
	)
	if slices.Contains(sdkConfig.ExcludeFiles, genFilepath) {
		cli.Info(fmt.Sprintf("source code generation skipped for %s", genFilepath))
	} else {
		fileWritten, err := util.WriteCodeToFile(f, genFilepath, false)
		if err != nil {
			return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
		}
		if fileWritten {
			cli.Info(fmt.Sprintf("source code for plugin version command written to %s", genFilepath))
		} else {
			cli.Info(fmt.Sprintf("source code for plugin version command already exists at %s - not overwritten", genFilepath))
		}
	}

	return nil
}
