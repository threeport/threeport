package dbmigrator

import (
	"fmt"
	"path/filepath"
	"slices"

	. "github.com/dave/jennifer/jen"

	cli "github.com/threeport/threeport/pkg/cli/v0"
	sdk "github.com/threeport/threeport/pkg/sdk/v0"
	"github.com/threeport/threeport/pkg/sdk/v0/gen"
	"github.com/threeport/threeport/pkg/sdk/v0/util"
)

// GenDbMigratorUtils generates the migrations utils.
func GenDbMigratorUtils(gen *gen.Generator, sdkConfig *sdk.SdkConfig) error {
	f := NewFile("migrations")
	f.HeaderComment("generated by 'threeport-sdk gen' - do not edit")

	f.Func().Id("getGormDbFromContext").Params(
		Id("ctx").Qual("context", "Context"),
	).Params(
		Op("*").Qual("gorm.io/gorm", "DB"),
		Error(),
	).Block(
		Id("contextGorm").Op(":=").Id("ctx").Dot("Value").Call(Lit("gormdb")),
		If(Id("contextGorm").Op("==").Nil()).Block(
			Return(Nil(), Qual("fmt", "Errorf").Call(Lit("could not retrieve gormdb from ctx"))),
		),
		Line(),

		Var().Id("gormDb").Op("*").Qual("gorm.io/gorm", "DB"),
		If(List(Id("g"), Id("ok")).Op(":=").Id("contextGorm").Op(".(*").Qual("gorm.io/gorm", "DB").Op(")"), Id("ok")).Block(
			Id("gormDb").Op("=").Id("g"),
		).Else().Block(
			Return(Nil(), Qual("fmt", "Errorf").Call(Lit("could not type convert gormdb from ctx"))),
		),
		Line(),

		Return(Id("gormDb"), Nil()),
	)

	// write code to file if not excluded by SDK config
	genFilepath := filepath.Join("cmd", "database-migrator", "migrations", "util_gen.go")
	if slices.Contains(sdkConfig.ExcludeFiles, genFilepath) {
		cli.Info(fmt.Sprintf("source code generation skipped for %s", genFilepath))
	} else {
		_, err := util.WriteCodeToFile(f, genFilepath, true)
		if err != nil {
			return fmt.Errorf("failed to write generated code to file %s: %w", genFilepath, err)
		}
		cli.Info(fmt.Sprintf("source code for DB migrator migrations utils written to %s", genFilepath))
	}

	return nil
}
