// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetSecretDefinitions fetches all secret definitions.
// TODO: implement pagination
func GetSecretDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.SecretDefinition, error) {
	var secretDefinitions []v0.SecretDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathSecretDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &secretDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretDefinitions, nil
}

// GetSecretDefinitionByID fetches a secret definition by ID.
func GetSecretDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.SecretDefinition, error) {
	var secretDefinition v0.SecretDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &secretDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretDefinition, nil
}

// GetSecretDefinitionsByQueryString fetches secret definitions by provided query string.
func GetSecretDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.SecretDefinition, error) {
	var secretDefinitions []v0.SecretDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathSecretDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &secretDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretDefinitions, nil
}

// GetSecretDefinitionByName fetches a secret definition by name.
func GetSecretDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.SecretDefinition, error) {
	var secretDefinitions []v0.SecretDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathSecretDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.SecretDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.SecretDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(secretDefinitions) < 1:
		return &v0.SecretDefinition{}, errors.New(fmt.Sprintf("no secret definition with name %s", name))
	case len(secretDefinitions) > 1:
		return &v0.SecretDefinition{}, errors.New(fmt.Sprintf("more than one secret definition with name %s returned", name))
	}

	return &secretDefinitions[0], nil
}

// CreateSecretDefinition creates a new secret definition.
func CreateSecretDefinition(apiClient *http.Client, apiAddr string, secretDefinition *v0.SecretDefinition) (*v0.SecretDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(secretDefinition)
	jsonSecretDefinition, err := util.MarshalObject(secretDefinition)
	if err != nil {
		return secretDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathSecretDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonSecretDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return secretDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return secretDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return secretDefinition, nil
}

// UpdateSecretDefinition updates a secret definition.
func UpdateSecretDefinition(apiClient *http.Client, apiAddr string, secretDefinition *v0.SecretDefinition) (*v0.SecretDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(secretDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	secretDefinitionID := *secretDefinition.ID
	payloadSecretDefinition := *secretDefinition
	payloadSecretDefinition.ID = nil
	payloadSecretDefinition.CreatedAt = nil
	payloadSecretDefinition.UpdatedAt = nil

	jsonSecretDefinition, err := util.MarshalObject(payloadSecretDefinition)
	if err != nil {
		return secretDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretDefinitions, secretDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonSecretDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return secretDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return secretDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadSecretDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadSecretDefinition.ID = &secretDefinitionID
	return &payloadSecretDefinition, nil
}

// DeleteSecretDefinition deletes a secret definition by ID.
func DeleteSecretDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.SecretDefinition, error) {
	var secretDefinition v0.SecretDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &secretDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretDefinition, nil
}

// GetSecretInstances fetches all secret instances.
// TODO: implement pagination
func GetSecretInstances(apiClient *http.Client, apiAddr string) (*[]v0.SecretInstance, error) {
	var secretInstances []v0.SecretInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathSecretInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &secretInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretInstances, nil
}

// GetSecretInstanceByID fetches a secret instance by ID.
func GetSecretInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.SecretInstance, error) {
	var secretInstance v0.SecretInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &secretInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretInstance, nil
}

// GetSecretInstancesByQueryString fetches secret instances by provided query string.
func GetSecretInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.SecretInstance, error) {
	var secretInstances []v0.SecretInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathSecretInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &secretInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretInstances, nil
}

// GetSecretInstanceByName fetches a secret instance by name.
func GetSecretInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.SecretInstance, error) {
	var secretInstances []v0.SecretInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathSecretInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.SecretInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.SecretInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(secretInstances) < 1:
		return &v0.SecretInstance{}, errors.New(fmt.Sprintf("no secret instance with name %s", name))
	case len(secretInstances) > 1:
		return &v0.SecretInstance{}, errors.New(fmt.Sprintf("more than one secret instance with name %s returned", name))
	}

	return &secretInstances[0], nil
}

// CreateSecretInstance creates a new secret instance.
func CreateSecretInstance(apiClient *http.Client, apiAddr string, secretInstance *v0.SecretInstance) (*v0.SecretInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(secretInstance)
	jsonSecretInstance, err := util.MarshalObject(secretInstance)
	if err != nil {
		return secretInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathSecretInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonSecretInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return secretInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return secretInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return secretInstance, nil
}

// UpdateSecretInstance updates a secret instance.
func UpdateSecretInstance(apiClient *http.Client, apiAddr string, secretInstance *v0.SecretInstance) (*v0.SecretInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(secretInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	secretInstanceID := *secretInstance.ID
	payloadSecretInstance := *secretInstance
	payloadSecretInstance.ID = nil
	payloadSecretInstance.CreatedAt = nil
	payloadSecretInstance.UpdatedAt = nil

	jsonSecretInstance, err := util.MarshalObject(payloadSecretInstance)
	if err != nil {
		return secretInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretInstances, secretInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonSecretInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return secretInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return secretInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadSecretInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadSecretInstance.ID = &secretInstanceID
	return &payloadSecretInstance, nil
}

// DeleteSecretInstance deletes a secret instance by ID.
func DeleteSecretInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.SecretInstance, error) {
	var secretInstance v0.SecretInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathSecretInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &secretInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &secretInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&secretInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &secretInstance, nil
}
