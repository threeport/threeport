// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	util "github.com/threeport/threeport/internal/util"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	"net/http"
)

// GetNetworkIngressDefinitions fetches all network ingress definitions.
// TODO: implement pagination
func GetNetworkIngressDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.NetworkIngressDefinition, error) {
	var networkIngressDefinitions []v0.NetworkIngressDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &networkIngressDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressDefinitions, nil
}

// GetNetworkIngressDefinitionByID fetches a network ingress definition by ID.
func GetNetworkIngressDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.NetworkIngressDefinition, error) {
	var networkIngressDefinition v0.NetworkIngressDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &networkIngressDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressDefinition, nil
}

// GetNetworkIngressDefinitionByName fetches a network ingress definition by name.
func GetNetworkIngressDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.NetworkIngressDefinition, error) {
	var networkIngressDefinitions []v0.NetworkIngressDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.NetworkIngressDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.NetworkIngressDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(networkIngressDefinitions) < 1:
		return &v0.NetworkIngressDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(networkIngressDefinitions) > 1:
		return &v0.NetworkIngressDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &networkIngressDefinitions[0], nil
}

// CreateNetworkIngressDefinition creates a new network ingress definition.
func CreateNetworkIngressDefinition(apiClient *http.Client, apiAddr string, networkIngressDefinition *v0.NetworkIngressDefinition) (*v0.NetworkIngressDefinition, error) {
	jsonNetworkIngressDefinition, err := util.MarshalObject(networkIngressDefinition)
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonNetworkIngressDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return networkIngressDefinition, nil
}

// UpdateNetworkIngressDefinition updates a network ingress definition.
func UpdateNetworkIngressDefinition(apiClient *http.Client, apiAddr string, networkIngressDefinition *v0.NetworkIngressDefinition) (*v0.NetworkIngressDefinition, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	networkIngressDefinitionID := *networkIngressDefinition.ID
	networkIngressDefinition.ID = nil
	networkIngressDefinition.CreatedAt = nil
	networkIngressDefinition.UpdatedAt = nil

	jsonNetworkIngressDefinition, err := util.MarshalObject(networkIngressDefinition)
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions/%d", apiAddr, ApiVersion, networkIngressDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonNetworkIngressDefinition),
		http.StatusOK,
	)
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return networkIngressDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return networkIngressDefinition, nil
}

// DeleteNetworkIngressDefinition deletes a network ingress definition by ID.
func DeleteNetworkIngressDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.NetworkIngressDefinition, error) {
	var networkIngressDefinition v0.NetworkIngressDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &networkIngressDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressDefinition, nil
}

// GetNetworkIngressInstances fetches all network ingress instances.
// TODO: implement pagination
func GetNetworkIngressInstances(apiClient *http.Client, apiAddr string) (*[]v0.NetworkIngressInstance, error) {
	var networkIngressInstances []v0.NetworkIngressInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &networkIngressInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressInstances, nil
}

// GetNetworkIngressInstanceByID fetches a network ingress instance by ID.
func GetNetworkIngressInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.NetworkIngressInstance, error) {
	var networkIngressInstance v0.NetworkIngressInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &networkIngressInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressInstance, nil
}

// GetNetworkIngressInstanceByName fetches a network ingress instance by name.
func GetNetworkIngressInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.NetworkIngressInstance, error) {
	var networkIngressInstances []v0.NetworkIngressInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.NetworkIngressInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.NetworkIngressInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(networkIngressInstances) < 1:
		return &v0.NetworkIngressInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(networkIngressInstances) > 1:
		return &v0.NetworkIngressInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &networkIngressInstances[0], nil
}

// CreateNetworkIngressInstance creates a new network ingress instance.
func CreateNetworkIngressInstance(apiClient *http.Client, apiAddr string, networkIngressInstance *v0.NetworkIngressInstance) (*v0.NetworkIngressInstance, error) {
	jsonNetworkIngressInstance, err := util.MarshalObject(networkIngressInstance)
	if err != nil {
		return networkIngressInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonNetworkIngressInstance),
		http.StatusCreated,
	)
	if err != nil {
		return networkIngressInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return networkIngressInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return networkIngressInstance, nil
}

// UpdateNetworkIngressInstance updates a network ingress instance.
func UpdateNetworkIngressInstance(apiClient *http.Client, apiAddr string, networkIngressInstance *v0.NetworkIngressInstance) (*v0.NetworkIngressInstance, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	networkIngressInstanceID := *networkIngressInstance.ID
	networkIngressInstance.ID = nil
	networkIngressInstance.CreatedAt = nil
	networkIngressInstance.UpdatedAt = nil

	jsonNetworkIngressInstance, err := util.MarshalObject(networkIngressInstance)
	if err != nil {
		return networkIngressInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances/%d", apiAddr, ApiVersion, networkIngressInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonNetworkIngressInstance),
		http.StatusOK,
	)
	if err != nil {
		return networkIngressInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return networkIngressInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return networkIngressInstance, nil
}

// DeleteNetworkIngressInstance deletes a network ingress instance by ID.
func DeleteNetworkIngressInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.NetworkIngressInstance, error) {
	var networkIngressInstance v0.NetworkIngressInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/network-ingress-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &networkIngressInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &networkIngressInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&networkIngressInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &networkIngressInstance, nil
}
