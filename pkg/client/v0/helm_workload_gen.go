// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetHelmWorkloadDefinitions fetches all helm workload definitions.
// TODO: implement pagination
func GetHelmWorkloadDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.HelmWorkloadDefinition, error) {
	var helmWorkloadDefinitions []v0.HelmWorkloadDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathHelmWorkloadDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &helmWorkloadDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadDefinitions, nil
}

// GetHelmWorkloadDefinitionByID fetches a helm workload definition by ID.
func GetHelmWorkloadDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.HelmWorkloadDefinition, error) {
	var helmWorkloadDefinition v0.HelmWorkloadDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &helmWorkloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadDefinition, nil
}

// GetHelmWorkloadDefinitionsByQueryString fetches helm workload definitions by provided query string.
func GetHelmWorkloadDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.HelmWorkloadDefinition, error) {
	var helmWorkloadDefinitions []v0.HelmWorkloadDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathHelmWorkloadDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &helmWorkloadDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadDefinitions, nil
}

// GetHelmWorkloadDefinitionByName fetches a helm workload definition by name.
func GetHelmWorkloadDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.HelmWorkloadDefinition, error) {
	var helmWorkloadDefinitions []v0.HelmWorkloadDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathHelmWorkloadDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.HelmWorkloadDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.HelmWorkloadDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(helmWorkloadDefinitions) < 1:
		return &v0.HelmWorkloadDefinition{}, errors.New(fmt.Sprintf("no helm workload definition with name %s", name))
	case len(helmWorkloadDefinitions) > 1:
		return &v0.HelmWorkloadDefinition{}, errors.New(fmt.Sprintf("more than one helm workload definition with name %s returned", name))
	}

	return &helmWorkloadDefinitions[0], nil
}

// CreateHelmWorkloadDefinition creates a new helm workload definition.
func CreateHelmWorkloadDefinition(apiClient *http.Client, apiAddr string, helmWorkloadDefinition *v0.HelmWorkloadDefinition) (*v0.HelmWorkloadDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(helmWorkloadDefinition)
	jsonHelmWorkloadDefinition, err := util.MarshalObject(helmWorkloadDefinition)
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathHelmWorkloadDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonHelmWorkloadDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return helmWorkloadDefinition, nil
}

// UpdateHelmWorkloadDefinition updates a helm workload definition.
func UpdateHelmWorkloadDefinition(apiClient *http.Client, apiAddr string, helmWorkloadDefinition *v0.HelmWorkloadDefinition) (*v0.HelmWorkloadDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(helmWorkloadDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	helmWorkloadDefinitionID := *helmWorkloadDefinition.ID
	payloadHelmWorkloadDefinition := *helmWorkloadDefinition
	payloadHelmWorkloadDefinition.ID = nil
	payloadHelmWorkloadDefinition.CreatedAt = nil
	payloadHelmWorkloadDefinition.UpdatedAt = nil

	jsonHelmWorkloadDefinition, err := util.MarshalObject(payloadHelmWorkloadDefinition)
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadDefinitions, helmWorkloadDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonHelmWorkloadDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return helmWorkloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadHelmWorkloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadHelmWorkloadDefinition.ID = &helmWorkloadDefinitionID
	return &payloadHelmWorkloadDefinition, nil
}

// DeleteHelmWorkloadDefinition deletes a helm workload definition by ID.
func DeleteHelmWorkloadDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.HelmWorkloadDefinition, error) {
	var helmWorkloadDefinition v0.HelmWorkloadDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &helmWorkloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadDefinition, nil
}

// GetHelmWorkloadInstances fetches all helm workload instances.
// TODO: implement pagination
func GetHelmWorkloadInstances(apiClient *http.Client, apiAddr string) (*[]v0.HelmWorkloadInstance, error) {
	var helmWorkloadInstances []v0.HelmWorkloadInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathHelmWorkloadInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &helmWorkloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadInstances, nil
}

// GetHelmWorkloadInstanceByID fetches a helm workload instance by ID.
func GetHelmWorkloadInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.HelmWorkloadInstance, error) {
	var helmWorkloadInstance v0.HelmWorkloadInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &helmWorkloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadInstance, nil
}

// GetHelmWorkloadInstancesByQueryString fetches helm workload instances by provided query string.
func GetHelmWorkloadInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.HelmWorkloadInstance, error) {
	var helmWorkloadInstances []v0.HelmWorkloadInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathHelmWorkloadInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &helmWorkloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadInstances, nil
}

// GetHelmWorkloadInstanceByName fetches a helm workload instance by name.
func GetHelmWorkloadInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.HelmWorkloadInstance, error) {
	var helmWorkloadInstances []v0.HelmWorkloadInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathHelmWorkloadInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.HelmWorkloadInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.HelmWorkloadInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(helmWorkloadInstances) < 1:
		return &v0.HelmWorkloadInstance{}, errors.New(fmt.Sprintf("no helm workload instance with name %s", name))
	case len(helmWorkloadInstances) > 1:
		return &v0.HelmWorkloadInstance{}, errors.New(fmt.Sprintf("more than one helm workload instance with name %s returned", name))
	}

	return &helmWorkloadInstances[0], nil
}

// CreateHelmWorkloadInstance creates a new helm workload instance.
func CreateHelmWorkloadInstance(apiClient *http.Client, apiAddr string, helmWorkloadInstance *v0.HelmWorkloadInstance) (*v0.HelmWorkloadInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(helmWorkloadInstance)
	jsonHelmWorkloadInstance, err := util.MarshalObject(helmWorkloadInstance)
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathHelmWorkloadInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonHelmWorkloadInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return helmWorkloadInstance, nil
}

// UpdateHelmWorkloadInstance updates a helm workload instance.
func UpdateHelmWorkloadInstance(apiClient *http.Client, apiAddr string, helmWorkloadInstance *v0.HelmWorkloadInstance) (*v0.HelmWorkloadInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(helmWorkloadInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	helmWorkloadInstanceID := *helmWorkloadInstance.ID
	payloadHelmWorkloadInstance := *helmWorkloadInstance
	payloadHelmWorkloadInstance.ID = nil
	payloadHelmWorkloadInstance.CreatedAt = nil
	payloadHelmWorkloadInstance.UpdatedAt = nil

	jsonHelmWorkloadInstance, err := util.MarshalObject(payloadHelmWorkloadInstance)
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadInstances, helmWorkloadInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonHelmWorkloadInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return helmWorkloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadHelmWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadHelmWorkloadInstance.ID = &helmWorkloadInstanceID
	return &payloadHelmWorkloadInstance, nil
}

// DeleteHelmWorkloadInstance deletes a helm workload instance by ID.
func DeleteHelmWorkloadInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.HelmWorkloadInstance, error) {
	var helmWorkloadInstance v0.HelmWorkloadInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathHelmWorkloadInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &helmWorkloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &helmWorkloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&helmWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &helmWorkloadInstance, nil
}
