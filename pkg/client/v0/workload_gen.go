// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client"
	"net/http"
)

// GetWorkloadDefinitions feteches all workload definitions.
// TODO: implement pagination
func GetWorkloadDefinitions(httpsClient *http.Client, apiAddr string) (*[]v0.WorkloadDefinition, error) {
	var workloadDefinitions []v0.WorkloadDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinitions, nil
}

// GetWorkloadDefinitionByID feteches a workload definition by ID.
func GetWorkloadDefinitionByID(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadDefinition, error) {
	var workloadDefinition v0.WorkloadDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinition, nil
}

// GetWorkloadDefinitionByName feteches a workload definition by name.
func GetWorkloadDefinitionByName(httpsClient *http.Client, name, apiAddr string) (*v0.WorkloadDefinition, error) {
	var workloadDefinitions []v0.WorkloadDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadDefinitions) < 1:
		return &v0.WorkloadDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(workloadDefinitions) > 1:
		return &v0.WorkloadDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &workloadDefinitions[0], nil
}

// CreateWorkloadDefinition creates a new workload definition.
func CreateWorkloadDefinition(httpsClient *http.Client, workloadDefinition *v0.WorkloadDefinition, apiAddr string) (*v0.WorkloadDefinition, error) {
	jsonWorkloadDefinition, err := client.MarshalObject(workloadDefinition)
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadDefinition, nil
}

// UpdateWorkloadDefinition updates a workload definition.
func UpdateWorkloadDefinition(httpsClient *http.Client, workloadDefinition *v0.WorkloadDefinition, apiAddr string) (*v0.WorkloadDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	workloadDefinitionID := *workloadDefinition.ID
	workloadDefinition.ID = nil

	jsonWorkloadDefinition, err := client.MarshalObject(workloadDefinition)
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, workloadDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadDefinition),
		http.StatusOK,
	)
	if err != nil {
		return workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadDefinition, nil
}

// DeleteWorkloadDefinition deletes a workload definition by ID.
func DeleteWorkloadDefinition(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadDefinition, error) {
	var workloadDefinition v0.WorkloadDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinition, nil
}

// GetWorkloadResourceDefinitions feteches all workload resource definitions.
// TODO: implement pagination
func GetWorkloadResourceDefinitions(httpsClient *http.Client, apiAddr string) (*[]v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinitions []v0.WorkloadResourceDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadResourceDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinitions, nil
}

// GetWorkloadResourceDefinitionByID feteches a workload resource definition by ID.
func GetWorkloadResourceDefinitionByID(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinition v0.WorkloadResourceDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinition, nil
}

// GetWorkloadResourceDefinitionByName feteches a workload resource definition by name.
func GetWorkloadResourceDefinitionByName(httpsClient *http.Client, name, apiAddr string) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinitions []v0.WorkloadResourceDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadResourceDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadResourceDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadResourceDefinitions) < 1:
		return &v0.WorkloadResourceDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(workloadResourceDefinitions) > 1:
		return &v0.WorkloadResourceDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &workloadResourceDefinitions[0], nil
}

// CreateWorkloadResourceDefinition creates a new workload resource definition.
func CreateWorkloadResourceDefinition(httpsClient *http.Client, workloadResourceDefinition *v0.WorkloadResourceDefinition, apiAddr string) (*v0.WorkloadResourceDefinition, error) {
	jsonWorkloadResourceDefinition, err := client.MarshalObject(workloadResourceDefinition)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadResourceDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceDefinition, nil
}

// UpdateWorkloadResourceDefinition updates a workload resource definition.
func UpdateWorkloadResourceDefinition(httpsClient *http.Client, workloadResourceDefinition *v0.WorkloadResourceDefinition, apiAddr string) (*v0.WorkloadResourceDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	workloadResourceDefinitionID := *workloadResourceDefinition.ID
	workloadResourceDefinition.ID = nil

	jsonWorkloadResourceDefinition, err := client.MarshalObject(workloadResourceDefinition)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, workloadResourceDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadResourceDefinition),
		http.StatusOK,
	)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceDefinition, nil
}

// DeleteWorkloadResourceDefinition deletes a workload resource definition by ID.
func DeleteWorkloadResourceDefinition(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinition v0.WorkloadResourceDefinition

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinition, nil
}

// GetWorkloadInstances feteches all workload instances.
// TODO: implement pagination
func GetWorkloadInstances(httpsClient *http.Client, apiAddr string) (*[]v0.WorkloadInstance, error) {
	var workloadInstances []v0.WorkloadInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstances, nil
}

// GetWorkloadInstanceByID feteches a workload instance by ID.
func GetWorkloadInstanceByID(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadInstance, error) {
	var workloadInstance v0.WorkloadInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}

// GetWorkloadInstanceByName feteches a workload instance by name.
func GetWorkloadInstanceByName(httpsClient *http.Client, name, apiAddr string) (*v0.WorkloadInstance, error) {
	var workloadInstances []v0.WorkloadInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadInstances) < 1:
		return &v0.WorkloadInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(workloadInstances) > 1:
		return &v0.WorkloadInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &workloadInstances[0], nil
}

// CreateWorkloadInstance creates a new workload instance.
func CreateWorkloadInstance(httpsClient *http.Client, workloadInstance *v0.WorkloadInstance, apiAddr string) (*v0.WorkloadInstance, error) {
	jsonWorkloadInstance, err := client.MarshalObject(workloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadInstance),
		http.StatusCreated,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadInstance, nil
}

// UpdateWorkloadInstance updates a workload instance.
func UpdateWorkloadInstance(httpsClient *http.Client, workloadInstance *v0.WorkloadInstance, apiAddr string) (*v0.WorkloadInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	workloadInstanceID := *workloadInstance.ID
	workloadInstance.ID = nil

	jsonWorkloadInstance, err := client.MarshalObject(workloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, workloadInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadInstance),
		http.StatusOK,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadInstance, nil
}

// DeleteWorkloadInstance deletes a workload instance by ID.
func DeleteWorkloadInstance(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadInstance, error) {
	var workloadInstance v0.WorkloadInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}

// GetWorkloadResourceInstances feteches all workload resource instances.
// TODO: implement pagination
func GetWorkloadResourceInstances(httpsClient *http.Client, apiAddr string) (*[]v0.WorkloadResourceInstance, error) {
	var workloadResourceInstances []v0.WorkloadResourceInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadResourceInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstances, nil
}

// GetWorkloadResourceInstanceByID feteches a workload resource instance by ID.
func GetWorkloadResourceInstanceByID(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstance v0.WorkloadResourceInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstance, nil
}

// GetWorkloadResourceInstanceByName feteches a workload resource instance by name.
func GetWorkloadResourceInstanceByName(httpsClient *http.Client, name, apiAddr string) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstances []v0.WorkloadResourceInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadResourceInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadResourceInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadResourceInstances) < 1:
		return &v0.WorkloadResourceInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(workloadResourceInstances) > 1:
		return &v0.WorkloadResourceInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &workloadResourceInstances[0], nil
}

// CreateWorkloadResourceInstance creates a new workload resource instance.
func CreateWorkloadResourceInstance(httpsClient *http.Client, workloadResourceInstance *v0.WorkloadResourceInstance, apiAddr string) (*v0.WorkloadResourceInstance, error) {
	jsonWorkloadResourceInstance, err := client.MarshalObject(workloadResourceInstance)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadResourceInstance),
		http.StatusCreated,
	)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceInstance, nil
}

// UpdateWorkloadResourceInstance updates a workload resource instance.
func UpdateWorkloadResourceInstance(httpsClient *http.Client, workloadResourceInstance *v0.WorkloadResourceInstance, apiAddr string) (*v0.WorkloadResourceInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	workloadResourceInstanceID := *workloadResourceInstance.ID
	workloadResourceInstance.ID = nil

	jsonWorkloadResourceInstance, err := client.MarshalObject(workloadResourceInstance)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, workloadResourceInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadResourceInstance),
		http.StatusOK,
	)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceInstance, nil
}

// DeleteWorkloadResourceInstance deletes a workload resource instance by ID.
func DeleteWorkloadResourceInstance(httpsClient *http.Client, id uint, apiAddr string) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstance v0.WorkloadResourceInstance

	response, err := GetResponse(
		httpsClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstance, nil
}
