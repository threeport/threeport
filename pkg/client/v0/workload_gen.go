// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetWorkloadDefinitions fetches all workload definitions.
// TODO: implement pagination
func GetWorkloadDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.WorkloadDefinition, error) {
	var workloadDefinitions []v0.WorkloadDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinitions, nil
}

// GetWorkloadDefinitionByID fetches a workload definition by ID.
func GetWorkloadDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadDefinition, error) {
	var workloadDefinition v0.WorkloadDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinition, nil
}

// GetWorkloadDefinitionByName fetches a workload definition by name.
func GetWorkloadDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.WorkloadDefinition, error) {
	var workloadDefinitions []v0.WorkloadDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadDefinitions) < 1:
		return &v0.WorkloadDefinition{}, errors.New(fmt.Sprintf("no workload definition with name %s", name))
	case len(workloadDefinitions) > 1:
		return &v0.WorkloadDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &workloadDefinitions[0], nil
}

// CreateWorkloadDefinition creates a new workload definition.
func CreateWorkloadDefinition(apiClient *http.Client, apiAddr string, workloadDefinition *v0.WorkloadDefinition) (*v0.WorkloadDefinition, error) {
	jsonWorkloadDefinition, err := util.MarshalObject(workloadDefinition)
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadDefinition, nil
}

// UpdateWorkloadDefinition updates a workload definition.
func UpdateWorkloadDefinition(apiClient *http.Client, apiAddr string, workloadDefinition *v0.WorkloadDefinition) (*v0.WorkloadDefinition, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadDefinitionID := *workloadDefinition.ID
	payloadWorkloadDefinition := *workloadDefinition
	payloadWorkloadDefinition.ID = nil
	payloadWorkloadDefinition.CreatedAt = nil
	payloadWorkloadDefinition.UpdatedAt = nil

	jsonWorkloadDefinition, err := util.MarshalObject(payloadWorkloadDefinition)
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, workloadDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadDefinition),
		http.StatusOK,
	)
	if err != nil {
		return workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadDefinition.ID = &workloadDefinitionID
	return &payloadWorkloadDefinition, nil
}

// DeleteWorkloadDefinition deletes a workload definition by ID.
func DeleteWorkloadDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadDefinition, error) {
	var workloadDefinition v0.WorkloadDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadDefinition, nil
}

// GetWorkloadResourceDefinitions fetches all workload resource definitions.
// TODO: implement pagination
func GetWorkloadResourceDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinitions []v0.WorkloadResourceDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadResourceDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinitions, nil
}

// GetWorkloadResourceDefinitionByID fetches a workload resource definition by ID.
func GetWorkloadResourceDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinition v0.WorkloadResourceDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinition, nil
}

// GetWorkloadResourceDefinitionByName fetches a workload resource definition by name.
func GetWorkloadResourceDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinitions []v0.WorkloadResourceDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadResourceDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadResourceDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadResourceDefinitions) < 1:
		return &v0.WorkloadResourceDefinition{}, errors.New(fmt.Sprintf("no workload resource definition with name %s", name))
	case len(workloadResourceDefinitions) > 1:
		return &v0.WorkloadResourceDefinition{}, errors.New(fmt.Sprintf("more than one workload resource definition with name %s returned", name))
	}

	return &workloadResourceDefinitions[0], nil
}

// CreateWorkloadResourceDefinition creates a new workload resource definition.
func CreateWorkloadResourceDefinition(apiClient *http.Client, apiAddr string, workloadResourceDefinition *v0.WorkloadResourceDefinition) (*v0.WorkloadResourceDefinition, error) {
	jsonWorkloadResourceDefinition, err := util.MarshalObject(workloadResourceDefinition)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadResourceDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceDefinition, nil
}

// UpdateWorkloadResourceDefinition updates a workload resource definition.
func UpdateWorkloadResourceDefinition(apiClient *http.Client, apiAddr string, workloadResourceDefinition *v0.WorkloadResourceDefinition) (*v0.WorkloadResourceDefinition, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadResourceDefinitionID := *workloadResourceDefinition.ID
	payloadWorkloadResourceDefinition := *workloadResourceDefinition
	payloadWorkloadResourceDefinition.ID = nil
	payloadWorkloadResourceDefinition.CreatedAt = nil
	payloadWorkloadResourceDefinition.UpdatedAt = nil

	jsonWorkloadResourceDefinition, err := util.MarshalObject(payloadWorkloadResourceDefinition)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, workloadResourceDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadResourceDefinition),
		http.StatusOK,
	)
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadResourceDefinition.ID = &workloadResourceDefinitionID
	return &payloadWorkloadResourceDefinition, nil
}

// DeleteWorkloadResourceDefinition deletes a workload resource definition by ID.
func DeleteWorkloadResourceDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadResourceDefinition, error) {
	var workloadResourceDefinition v0.WorkloadResourceDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceDefinition, nil
}

// GetWorkloadInstances fetches all workload instances.
// TODO: implement pagination
func GetWorkloadInstances(apiClient *http.Client, apiAddr string) (*[]v0.WorkloadInstance, error) {
	var workloadInstances []v0.WorkloadInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstances, nil
}

// GetWorkloadInstanceByID fetches a workload instance by ID.
func GetWorkloadInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadInstance, error) {
	var workloadInstance v0.WorkloadInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}

// GetWorkloadInstanceByName fetches a workload instance by name.
func GetWorkloadInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.WorkloadInstance, error) {
	var workloadInstances []v0.WorkloadInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadInstances) < 1:
		return &v0.WorkloadInstance{}, errors.New(fmt.Sprintf("no workload instance with name %s", name))
	case len(workloadInstances) > 1:
		return &v0.WorkloadInstance{}, errors.New(fmt.Sprintf("more than one workload instance with name %s returned", name))
	}

	return &workloadInstances[0], nil
}

// CreateWorkloadInstance creates a new workload instance.
func CreateWorkloadInstance(apiClient *http.Client, apiAddr string, workloadInstance *v0.WorkloadInstance) (*v0.WorkloadInstance, error) {
	jsonWorkloadInstance, err := util.MarshalObject(workloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadInstance),
		http.StatusCreated,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadInstance, nil
}

// UpdateWorkloadInstance updates a workload instance.
func UpdateWorkloadInstance(apiClient *http.Client, apiAddr string, workloadInstance *v0.WorkloadInstance) (*v0.WorkloadInstance, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadInstanceID := *workloadInstance.ID
	payloadWorkloadInstance := *workloadInstance
	payloadWorkloadInstance.ID = nil
	payloadWorkloadInstance.CreatedAt = nil
	payloadWorkloadInstance.UpdatedAt = nil

	jsonWorkloadInstance, err := util.MarshalObject(payloadWorkloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, workloadInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadInstance),
		http.StatusOK,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadInstance.ID = &workloadInstanceID
	return &payloadWorkloadInstance, nil
}

// DeleteWorkloadInstance deletes a workload instance by ID.
func DeleteWorkloadInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadInstance, error) {
	var workloadInstance v0.WorkloadInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}

// GetAttachedObjectReferences fetches all attached object references.
// TODO: implement pagination
func GetAttachedObjectReferences(apiClient *http.Client, apiAddr string) (*[]v0.AttachedObjectReference, error) {
	var attachedObjectReferences []v0.AttachedObjectReference

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &attachedObjectReferences, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &attachedObjectReferences, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&attachedObjectReferences); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &attachedObjectReferences, nil
}

// GetAttachedObjectReferenceByID fetches a attached object reference by ID.
func GetAttachedObjectReferenceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AttachedObjectReference, error) {
	var attachedObjectReference v0.AttachedObjectReference

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &attachedObjectReference, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &attachedObjectReference, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&attachedObjectReference); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &attachedObjectReference, nil
}

// GetAttachedObjectReferenceByName fetches a attached object reference by name.
func GetAttachedObjectReferenceByName(apiClient *http.Client, apiAddr, name string) (*v0.AttachedObjectReference, error) {
	var attachedObjectReferences []v0.AttachedObjectReference

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AttachedObjectReference{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AttachedObjectReference{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&attachedObjectReferences); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(attachedObjectReferences) < 1:
		return &v0.AttachedObjectReference{}, errors.New(fmt.Sprintf("no attached object reference with name %s", name))
	case len(attachedObjectReferences) > 1:
		return &v0.AttachedObjectReference{}, errors.New(fmt.Sprintf("more than one attached object reference with name %s returned", name))
	}

	return &attachedObjectReferences[0], nil
}

// CreateAttachedObjectReference creates a new attached object reference.
func CreateAttachedObjectReference(apiClient *http.Client, apiAddr string, attachedObjectReference *v0.AttachedObjectReference) (*v0.AttachedObjectReference, error) {
	jsonAttachedObjectReference, err := util.MarshalObject(attachedObjectReference)
	if err != nil {
		return attachedObjectReference, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAttachedObjectReference),
		http.StatusCreated,
	)
	if err != nil {
		return attachedObjectReference, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return attachedObjectReference, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&attachedObjectReference); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return attachedObjectReference, nil
}

// UpdateAttachedObjectReference updates a attached object reference.
func UpdateAttachedObjectReference(apiClient *http.Client, apiAddr string, attachedObjectReference *v0.AttachedObjectReference) (*v0.AttachedObjectReference, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	attachedObjectReferenceID := *attachedObjectReference.ID
	payloadAttachedObjectReference := *attachedObjectReference
	payloadAttachedObjectReference.ID = nil
	payloadAttachedObjectReference.CreatedAt = nil
	payloadAttachedObjectReference.UpdatedAt = nil

	jsonAttachedObjectReference, err := util.MarshalObject(payloadAttachedObjectReference)
	if err != nil {
		return attachedObjectReference, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references/%d", apiAddr, ApiVersion, attachedObjectReferenceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAttachedObjectReference),
		http.StatusOK,
	)
	if err != nil {
		return attachedObjectReference, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return attachedObjectReference, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAttachedObjectReference); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAttachedObjectReference.ID = &attachedObjectReferenceID
	return &payloadAttachedObjectReference, nil
}

// DeleteAttachedObjectReference deletes a attached object reference by ID.
func DeleteAttachedObjectReference(apiClient *http.Client, apiAddr string, id uint) (*v0.AttachedObjectReference, error) {
	var attachedObjectReference v0.AttachedObjectReference

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/attached-object-references/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &attachedObjectReference, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &attachedObjectReference, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&attachedObjectReference); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &attachedObjectReference, nil
}

// GetWorkloadResourceInstances fetches all workload resource instances.
// TODO: implement pagination
func GetWorkloadResourceInstances(apiClient *http.Client, apiAddr string) (*[]v0.WorkloadResourceInstance, error) {
	var workloadResourceInstances []v0.WorkloadResourceInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadResourceInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstances, nil
}

// GetWorkloadResourceInstanceByID fetches a workload resource instance by ID.
func GetWorkloadResourceInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstance v0.WorkloadResourceInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstance, nil
}

// GetWorkloadResourceInstanceByName fetches a workload resource instance by name.
func GetWorkloadResourceInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstances []v0.WorkloadResourceInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadResourceInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadResourceInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadResourceInstances) < 1:
		return &v0.WorkloadResourceInstance{}, errors.New(fmt.Sprintf("no workload resource instance with name %s", name))
	case len(workloadResourceInstances) > 1:
		return &v0.WorkloadResourceInstance{}, errors.New(fmt.Sprintf("more than one workload resource instance with name %s returned", name))
	}

	return &workloadResourceInstances[0], nil
}

// CreateWorkloadResourceInstance creates a new workload resource instance.
func CreateWorkloadResourceInstance(apiClient *http.Client, apiAddr string, workloadResourceInstance *v0.WorkloadResourceInstance) (*v0.WorkloadResourceInstance, error) {
	jsonWorkloadResourceInstance, err := util.MarshalObject(workloadResourceInstance)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadResourceInstance),
		http.StatusCreated,
	)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadResourceInstance, nil
}

// UpdateWorkloadResourceInstance updates a workload resource instance.
func UpdateWorkloadResourceInstance(apiClient *http.Client, apiAddr string, workloadResourceInstance *v0.WorkloadResourceInstance) (*v0.WorkloadResourceInstance, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadResourceInstanceID := *workloadResourceInstance.ID
	payloadWorkloadResourceInstance := *workloadResourceInstance
	payloadWorkloadResourceInstance.ID = nil
	payloadWorkloadResourceInstance.CreatedAt = nil
	payloadWorkloadResourceInstance.UpdatedAt = nil

	jsonWorkloadResourceInstance, err := util.MarshalObject(payloadWorkloadResourceInstance)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, workloadResourceInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadResourceInstance),
		http.StatusOK,
	)
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadResourceInstance.ID = &workloadResourceInstanceID
	return &payloadWorkloadResourceInstance, nil
}

// DeleteWorkloadResourceInstance deletes a workload resource instance by ID.
func DeleteWorkloadResourceInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadResourceInstance, error) {
	var workloadResourceInstance v0.WorkloadResourceInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-resource-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadResourceInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadResourceInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadResourceInstance, nil
}

// GetWorkloadEvents fetches all workload events.
// TODO: implement pagination
func GetWorkloadEvents(apiClient *http.Client, apiAddr string) (*[]v0.WorkloadEvent, error) {
	var workloadEvents []v0.WorkloadEvent

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadEvents, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadEvents, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadEvents); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadEvents, nil
}

// GetWorkloadEventByID fetches a workload event by ID.
func GetWorkloadEventByID(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadEvent, error) {
	var workloadEvent v0.WorkloadEvent

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadEvent, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadEvent, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadEvent); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadEvent, nil
}

// GetWorkloadEventByName fetches a workload event by name.
func GetWorkloadEventByName(apiClient *http.Client, apiAddr, name string) (*v0.WorkloadEvent, error) {
	var workloadEvents []v0.WorkloadEvent

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.WorkloadEvent{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.WorkloadEvent{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadEvents); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadEvents) < 1:
		return &v0.WorkloadEvent{}, errors.New(fmt.Sprintf("no workload event with name %s", name))
	case len(workloadEvents) > 1:
		return &v0.WorkloadEvent{}, errors.New(fmt.Sprintf("more than one workload event with name %s returned", name))
	}

	return &workloadEvents[0], nil
}

// CreateWorkloadEvent creates a new workload event.
func CreateWorkloadEvent(apiClient *http.Client, apiAddr string, workloadEvent *v0.WorkloadEvent) (*v0.WorkloadEvent, error) {
	jsonWorkloadEvent, err := util.MarshalObject(workloadEvent)
	if err != nil {
		return workloadEvent, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadEvent),
		http.StatusCreated,
	)
	if err != nil {
		return workloadEvent, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadEvent, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadEvent); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadEvent, nil
}

// UpdateWorkloadEvent updates a workload event.
func UpdateWorkloadEvent(apiClient *http.Client, apiAddr string, workloadEvent *v0.WorkloadEvent) (*v0.WorkloadEvent, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadEventID := *workloadEvent.ID
	payloadWorkloadEvent := *workloadEvent
	payloadWorkloadEvent.ID = nil
	payloadWorkloadEvent.CreatedAt = nil
	payloadWorkloadEvent.UpdatedAt = nil

	jsonWorkloadEvent, err := util.MarshalObject(payloadWorkloadEvent)
	if err != nil {
		return workloadEvent, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events/%d", apiAddr, ApiVersion, workloadEventID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadEvent),
		http.StatusOK,
	)
	if err != nil {
		return workloadEvent, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadEvent, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadEvent); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadEvent.ID = &workloadEventID
	return &payloadWorkloadEvent, nil
}

// DeleteWorkloadEvent deletes a workload event by ID.
func DeleteWorkloadEvent(apiClient *http.Client, apiAddr string, id uint) (*v0.WorkloadEvent, error) {
	var workloadEvent v0.WorkloadEvent

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-events/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &workloadEvent, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadEvent, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadEvent); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadEvent, nil
}
