// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetExtensionApis fetches all extension apis.
// TODO: implement pagination
func GetExtensionApis(apiClient *http.Client, apiAddr string) (*[]v0.ExtensionApi, error) {
	var extensionApis []v0.ExtensionApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathExtensionApis),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApis, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &extensionApis, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApis, nil
}

// GetExtensionApiByID fetches a extension api by ID.
func GetExtensionApiByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ExtensionApi, error) {
	var extensionApi v0.ExtensionApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApis, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &extensionApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApi, nil
}

// GetExtensionApisByQueryString fetches extension apis by provided query string.
func GetExtensionApisByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ExtensionApi, error) {
	var extensionApis []v0.ExtensionApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathExtensionApis, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApis, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &extensionApis, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApis, nil
}

// GetExtensionApiByName fetches a extension api by name.
func GetExtensionApiByName(apiClient *http.Client, apiAddr, name string) (*v0.ExtensionApi, error) {
	var extensionApis []v0.ExtensionApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathExtensionApis, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ExtensionApi{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ExtensionApi{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(extensionApis) < 1:
		return &v0.ExtensionApi{}, errors.New(fmt.Sprintf("no extension api with name %s", name))
	case len(extensionApis) > 1:
		return &v0.ExtensionApi{}, errors.New(fmt.Sprintf("more than one extension api with name %s returned", name))
	}

	return &extensionApis[0], nil
}

// CreateExtensionApi creates a new extension api.
func CreateExtensionApi(apiClient *http.Client, apiAddr string, extensionApi *v0.ExtensionApi) (*v0.ExtensionApi, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(extensionApi)
	jsonExtensionApi, err := util.MarshalObject(extensionApi)
	if err != nil {
		return extensionApi, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathExtensionApis),
		http.MethodPost,
		bytes.NewBuffer(jsonExtensionApi),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return extensionApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return extensionApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return extensionApi, nil
}

// UpdateExtensionApi updates a extension api.
func UpdateExtensionApi(apiClient *http.Client, apiAddr string, extensionApi *v0.ExtensionApi) (*v0.ExtensionApi, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(extensionApi)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	extensionApiID := *extensionApi.ID
	payloadExtensionApi := *extensionApi
	payloadExtensionApi.ID = nil
	payloadExtensionApi.CreatedAt = nil
	payloadExtensionApi.UpdatedAt = nil

	jsonExtensionApi, err := util.MarshalObject(payloadExtensionApi)
	if err != nil {
		return extensionApi, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApis, extensionApiID),
		http.MethodPatch,
		bytes.NewBuffer(jsonExtensionApi),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return extensionApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return extensionApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadExtensionApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadExtensionApi.ID = &extensionApiID
	return &payloadExtensionApi, nil
}

// DeleteExtensionApi deletes a extension api by ID.
func DeleteExtensionApi(apiClient *http.Client, apiAddr string, id uint) (*v0.ExtensionApi, error) {
	var extensionApi v0.ExtensionApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApis, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &extensionApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApi, nil
}

// GetExtensionApiRoutes fetches all extension api routes.
// TODO: implement pagination
func GetExtensionApiRoutes(apiClient *http.Client, apiAddr string) (*[]v0.ExtensionApiRoute, error) {
	var extensionApiRoutes []v0.ExtensionApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathExtensionApiRoutes),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApiRoutes, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &extensionApiRoutes, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApiRoutes, nil
}

// GetExtensionApiRouteByID fetches a extension api route by ID.
func GetExtensionApiRouteByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ExtensionApiRoute, error) {
	var extensionApiRoute v0.ExtensionApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApiRoutes, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &extensionApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApiRoute, nil
}

// GetExtensionApiRoutesByQueryString fetches extension api routes by provided query string.
func GetExtensionApiRoutesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ExtensionApiRoute, error) {
	var extensionApiRoutes []v0.ExtensionApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathExtensionApiRoutes, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApiRoutes, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &extensionApiRoutes, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApiRoutes, nil
}

// GetExtensionApiRouteByName fetches a extension api route by name.
func GetExtensionApiRouteByName(apiClient *http.Client, apiAddr, name string) (*v0.ExtensionApiRoute, error) {
	var extensionApiRoutes []v0.ExtensionApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathExtensionApiRoutes, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ExtensionApiRoute{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ExtensionApiRoute{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(extensionApiRoutes) < 1:
		return &v0.ExtensionApiRoute{}, errors.New(fmt.Sprintf("no extension api route with name %s", name))
	case len(extensionApiRoutes) > 1:
		return &v0.ExtensionApiRoute{}, errors.New(fmt.Sprintf("more than one extension api route with name %s returned", name))
	}

	return &extensionApiRoutes[0], nil
}

// CreateExtensionApiRoute creates a new extension api route.
func CreateExtensionApiRoute(apiClient *http.Client, apiAddr string, extensionApiRoute *v0.ExtensionApiRoute) (*v0.ExtensionApiRoute, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(extensionApiRoute)
	jsonExtensionApiRoute, err := util.MarshalObject(extensionApiRoute)
	if err != nil {
		return extensionApiRoute, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathExtensionApiRoutes),
		http.MethodPost,
		bytes.NewBuffer(jsonExtensionApiRoute),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return extensionApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return extensionApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return extensionApiRoute, nil
}

// UpdateExtensionApiRoute updates a extension api route.
func UpdateExtensionApiRoute(apiClient *http.Client, apiAddr string, extensionApiRoute *v0.ExtensionApiRoute) (*v0.ExtensionApiRoute, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(extensionApiRoute)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	extensionApiRouteID := *extensionApiRoute.ID
	payloadExtensionApiRoute := *extensionApiRoute
	payloadExtensionApiRoute.ID = nil
	payloadExtensionApiRoute.CreatedAt = nil
	payloadExtensionApiRoute.UpdatedAt = nil

	jsonExtensionApiRoute, err := util.MarshalObject(payloadExtensionApiRoute)
	if err != nil {
		return extensionApiRoute, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApiRoutes, extensionApiRouteID),
		http.MethodPatch,
		bytes.NewBuffer(jsonExtensionApiRoute),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return extensionApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return extensionApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadExtensionApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadExtensionApiRoute.ID = &extensionApiRouteID
	return &payloadExtensionApiRoute, nil
}

// DeleteExtensionApiRoute deletes a extension api route by ID.
func DeleteExtensionApiRoute(apiClient *http.Client, apiAddr string, id uint) (*v0.ExtensionApiRoute, error) {
	var extensionApiRoute v0.ExtensionApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathExtensionApiRoutes, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &extensionApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &extensionApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&extensionApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &extensionApiRoute, nil
}
