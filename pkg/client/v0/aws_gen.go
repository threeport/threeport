// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	util "github.com/threeport/threeport/internal/util"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	"net/http"
)

// GetAwsAccounts fetches all aws accounts.
// TODO: implement pagination
func GetAwsAccounts(apiClient *http.Client, apiAddr string) (*[]v0.AwsAccount, error) {
	var awsAccounts []v0.AwsAccount

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsAccounts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &awsAccounts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsAccounts, nil
}

// GetAwsAccountByID fetches a aws account by ID.
func GetAwsAccountByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsAccount, error) {
	var awsAccount v0.AwsAccount

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsAccount, nil
}

// GetAwsAccountByName fetches a aws account by name.
func GetAwsAccountByName(apiClient *http.Client, apiAddr, name string) (*v0.AwsAccount, error) {
	var awsAccounts []v0.AwsAccount

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AwsAccount{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AwsAccount{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(awsAccounts) < 1:
		return &v0.AwsAccount{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(awsAccounts) > 1:
		return &v0.AwsAccount{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &awsAccounts[0], nil
}

// CreateAwsAccount creates a new aws account.
func CreateAwsAccount(apiClient *http.Client, apiAddr string, awsAccount *v0.AwsAccount) (*v0.AwsAccount, error) {
	jsonAwsAccount, err := util.MarshalObject(awsAccount)
	if err != nil {
		return awsAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAwsAccount),
		http.StatusCreated,
	)
	if err != nil {
		return awsAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsAccount, nil
}

// UpdateAwsAccount updates a aws account.
func UpdateAwsAccount(apiClient *http.Client, apiAddr string, awsAccount *v0.AwsAccount) (*v0.AwsAccount, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	awsAccountID := *awsAccount.ID
	awsAccount.ID = nil
	awsAccount.CreatedAt = nil
	awsAccount.UpdatedAt = nil

	jsonAwsAccount, err := util.MarshalObject(awsAccount)
	if err != nil {
		return awsAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts/%d", apiAddr, ApiVersion, awsAccountID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAwsAccount),
		http.StatusOK,
	)
	if err != nil {
		return awsAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsAccount, nil
}

// DeleteAwsAccount deletes a aws account by ID.
func DeleteAwsAccount(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsAccount, error) {
	var awsAccount v0.AwsAccount

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-accounts/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsAccount, nil
}

// GetAwsEksClusterDefinitions fetches all aws eks cluster definitions.
// TODO: implement pagination
func GetAwsEksClusterDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.AwsEksClusterDefinition, error) {
	var awsEksClusterDefinitions []v0.AwsEksClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &awsEksClusterDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterDefinitions, nil
}

// GetAwsEksClusterDefinitionByID fetches a aws eks cluster definition by ID.
func GetAwsEksClusterDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsEksClusterDefinition, error) {
	var awsEksClusterDefinition v0.AwsEksClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsEksClusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterDefinition, nil
}

// GetAwsEksClusterDefinitionByName fetches a aws eks cluster definition by name.
func GetAwsEksClusterDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.AwsEksClusterDefinition, error) {
	var awsEksClusterDefinitions []v0.AwsEksClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AwsEksClusterDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AwsEksClusterDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(awsEksClusterDefinitions) < 1:
		return &v0.AwsEksClusterDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(awsEksClusterDefinitions) > 1:
		return &v0.AwsEksClusterDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &awsEksClusterDefinitions[0], nil
}

// CreateAwsEksClusterDefinition creates a new aws eks cluster definition.
func CreateAwsEksClusterDefinition(apiClient *http.Client, apiAddr string, awsEksClusterDefinition *v0.AwsEksClusterDefinition) (*v0.AwsEksClusterDefinition, error) {
	jsonAwsEksClusterDefinition, err := util.MarshalObject(awsEksClusterDefinition)
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAwsEksClusterDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsEksClusterDefinition, nil
}

// UpdateAwsEksClusterDefinition updates a aws eks cluster definition.
func UpdateAwsEksClusterDefinition(apiClient *http.Client, apiAddr string, awsEksClusterDefinition *v0.AwsEksClusterDefinition) (*v0.AwsEksClusterDefinition, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	awsEksClusterDefinitionID := *awsEksClusterDefinition.ID
	awsEksClusterDefinition.ID = nil
	awsEksClusterDefinition.CreatedAt = nil
	awsEksClusterDefinition.UpdatedAt = nil

	jsonAwsEksClusterDefinition, err := util.MarshalObject(awsEksClusterDefinition)
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions/%d", apiAddr, ApiVersion, awsEksClusterDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAwsEksClusterDefinition),
		http.StatusOK,
	)
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsEksClusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsEksClusterDefinition, nil
}

// DeleteAwsEksClusterDefinition deletes a aws eks cluster definition by ID.
func DeleteAwsEksClusterDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsEksClusterDefinition, error) {
	var awsEksClusterDefinition v0.AwsEksClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsEksClusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterDefinition, nil
}

// GetAwsEksClusterInstances fetches all aws eks cluster instances.
// TODO: implement pagination
func GetAwsEksClusterInstances(apiClient *http.Client, apiAddr string) (*[]v0.AwsEksClusterInstance, error) {
	var awsEksClusterInstances []v0.AwsEksClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &awsEksClusterInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterInstances, nil
}

// GetAwsEksClusterInstanceByID fetches a aws eks cluster instance by ID.
func GetAwsEksClusterInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsEksClusterInstance, error) {
	var awsEksClusterInstance v0.AwsEksClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsEksClusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterInstance, nil
}

// GetAwsEksClusterInstanceByName fetches a aws eks cluster instance by name.
func GetAwsEksClusterInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.AwsEksClusterInstance, error) {
	var awsEksClusterInstances []v0.AwsEksClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AwsEksClusterInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AwsEksClusterInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(awsEksClusterInstances) < 1:
		return &v0.AwsEksClusterInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(awsEksClusterInstances) > 1:
		return &v0.AwsEksClusterInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &awsEksClusterInstances[0], nil
}

// CreateAwsEksClusterInstance creates a new aws eks cluster instance.
func CreateAwsEksClusterInstance(apiClient *http.Client, apiAddr string, awsEksClusterInstance *v0.AwsEksClusterInstance) (*v0.AwsEksClusterInstance, error) {
	jsonAwsEksClusterInstance, err := util.MarshalObject(awsEksClusterInstance)
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAwsEksClusterInstance),
		http.StatusCreated,
	)
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsEksClusterInstance, nil
}

// UpdateAwsEksClusterInstance updates a aws eks cluster instance.
func UpdateAwsEksClusterInstance(apiClient *http.Client, apiAddr string, awsEksClusterInstance *v0.AwsEksClusterInstance) (*v0.AwsEksClusterInstance, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	awsEksClusterInstanceID := *awsEksClusterInstance.ID
	awsEksClusterInstance.ID = nil
	awsEksClusterInstance.CreatedAt = nil
	awsEksClusterInstance.UpdatedAt = nil

	jsonAwsEksClusterInstance, err := util.MarshalObject(awsEksClusterInstance)
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances/%d", apiAddr, ApiVersion, awsEksClusterInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAwsEksClusterInstance),
		http.StatusOK,
	)
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsEksClusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsEksClusterInstance, nil
}

// DeleteAwsEksClusterInstance deletes a aws eks cluster instance by ID.
func DeleteAwsEksClusterInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsEksClusterInstance, error) {
	var awsEksClusterInstance v0.AwsEksClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-eks-cluster-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsEksClusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsEksClusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsEksClusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsEksClusterInstance, nil
}

// GetAwsRelationalDatabaseDefinitions fetches all aws relational database definitions.
// TODO: implement pagination
func GetAwsRelationalDatabaseDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.AwsRelationalDatabaseDefinition, error) {
	var awsRelationalDatabaseDefinitions []v0.AwsRelationalDatabaseDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &awsRelationalDatabaseDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseDefinitions, nil
}

// GetAwsRelationalDatabaseDefinitionByID fetches a aws relational database definition by ID.
func GetAwsRelationalDatabaseDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsRelationalDatabaseDefinition, error) {
	var awsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseDefinition, nil
}

// GetAwsRelationalDatabaseDefinitionByName fetches a aws relational database definition by name.
func GetAwsRelationalDatabaseDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.AwsRelationalDatabaseDefinition, error) {
	var awsRelationalDatabaseDefinitions []v0.AwsRelationalDatabaseDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AwsRelationalDatabaseDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AwsRelationalDatabaseDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(awsRelationalDatabaseDefinitions) < 1:
		return &v0.AwsRelationalDatabaseDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(awsRelationalDatabaseDefinitions) > 1:
		return &v0.AwsRelationalDatabaseDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &awsRelationalDatabaseDefinitions[0], nil
}

// CreateAwsRelationalDatabaseDefinition creates a new aws relational database definition.
func CreateAwsRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, awsRelationalDatabaseDefinition *v0.AwsRelationalDatabaseDefinition) (*v0.AwsRelationalDatabaseDefinition, error) {
	jsonAwsRelationalDatabaseDefinition, err := util.MarshalObject(awsRelationalDatabaseDefinition)
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAwsRelationalDatabaseDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsRelationalDatabaseDefinition, nil
}

// UpdateAwsRelationalDatabaseDefinition updates a aws relational database definition.
func UpdateAwsRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, awsRelationalDatabaseDefinition *v0.AwsRelationalDatabaseDefinition) (*v0.AwsRelationalDatabaseDefinition, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	awsRelationalDatabaseDefinitionID := *awsRelationalDatabaseDefinition.ID
	awsRelationalDatabaseDefinition.ID = nil
	awsRelationalDatabaseDefinition.CreatedAt = nil
	awsRelationalDatabaseDefinition.UpdatedAt = nil

	jsonAwsRelationalDatabaseDefinition, err := util.MarshalObject(awsRelationalDatabaseDefinition)
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions/%d", apiAddr, ApiVersion, awsRelationalDatabaseDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAwsRelationalDatabaseDefinition),
		http.StatusOK,
	)
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsRelationalDatabaseDefinition, nil
}

// DeleteAwsRelationalDatabaseDefinition deletes a aws relational database definition by ID.
func DeleteAwsRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsRelationalDatabaseDefinition, error) {
	var awsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseDefinition, nil
}

// GetAwsRelationalDatabaseInstances fetches all aws relational database instances.
// TODO: implement pagination
func GetAwsRelationalDatabaseInstances(apiClient *http.Client, apiAddr string) (*[]v0.AwsRelationalDatabaseInstance, error) {
	var awsRelationalDatabaseInstances []v0.AwsRelationalDatabaseInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &awsRelationalDatabaseInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseInstances, nil
}

// GetAwsRelationalDatabaseInstanceByID fetches a aws relational database instance by ID.
func GetAwsRelationalDatabaseInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsRelationalDatabaseInstance, error) {
	var awsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseInstance, nil
}

// GetAwsRelationalDatabaseInstanceByName fetches a aws relational database instance by name.
func GetAwsRelationalDatabaseInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.AwsRelationalDatabaseInstance, error) {
	var awsRelationalDatabaseInstances []v0.AwsRelationalDatabaseInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.AwsRelationalDatabaseInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AwsRelationalDatabaseInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(awsRelationalDatabaseInstances) < 1:
		return &v0.AwsRelationalDatabaseInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(awsRelationalDatabaseInstances) > 1:
		return &v0.AwsRelationalDatabaseInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &awsRelationalDatabaseInstances[0], nil
}

// CreateAwsRelationalDatabaseInstance creates a new aws relational database instance.
func CreateAwsRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, awsRelationalDatabaseInstance *v0.AwsRelationalDatabaseInstance) (*v0.AwsRelationalDatabaseInstance, error) {
	jsonAwsRelationalDatabaseInstance, err := util.MarshalObject(awsRelationalDatabaseInstance)
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonAwsRelationalDatabaseInstance),
		http.StatusCreated,
	)
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsRelationalDatabaseInstance, nil
}

// UpdateAwsRelationalDatabaseInstance updates a aws relational database instance.
func UpdateAwsRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, awsRelationalDatabaseInstance *v0.AwsRelationalDatabaseInstance) (*v0.AwsRelationalDatabaseInstance, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	awsRelationalDatabaseInstanceID := *awsRelationalDatabaseInstance.ID
	awsRelationalDatabaseInstance.ID = nil
	awsRelationalDatabaseInstance.CreatedAt = nil
	awsRelationalDatabaseInstance.UpdatedAt = nil

	jsonAwsRelationalDatabaseInstance, err := util.MarshalObject(awsRelationalDatabaseInstance)
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances/%d", apiAddr, ApiVersion, awsRelationalDatabaseInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAwsRelationalDatabaseInstance),
		http.StatusOK,
	)
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return awsRelationalDatabaseInstance, nil
}

// DeleteAwsRelationalDatabaseInstance deletes a aws relational database instance by ID.
func DeleteAwsRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.AwsRelationalDatabaseInstance, error) {
	var awsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/aws-relational-database-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &awsRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &awsRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&awsRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &awsRelationalDatabaseInstance, nil
}
