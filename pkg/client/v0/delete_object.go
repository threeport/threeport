// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"fmt"
	"net/http"
)

// DeleteObjectByTypeAndID deletes an instance given a string representation of its type and ID.
func DeleteObjectByTypeAndID(apiClient *http.Client, apiAddr string, objectType string, id uint) error {

	switch objectType {
	case "Profile":
		if _, err := DeleteProfile(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete Profile: %w", err)
		}
	case "Tier":
		if _, err := DeleteTier(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete Tier: %w", err)
		}
	case "AwsAccount":
		if _, err := DeleteAwsAccount(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsAccount: %w", err)
		}
	case "AwsEksClusterDefinition":
		if _, err := DeleteAwsEksClusterDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsEksClusterDefinition: %w", err)
		}
	case "AwsEksClusterInstance":
		if _, err := DeleteAwsEksClusterInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsEksClusterInstance: %w", err)
		}
	case "AwsRelationalDatabaseDefinition":
		if _, err := DeleteAwsRelationalDatabaseDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsRelationalDatabaseDefinition: %w", err)
		}
	case "AwsRelationalDatabaseInstance":
		if _, err := DeleteAwsRelationalDatabaseInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsRelationalDatabaseInstance: %w", err)
		}
	case "ClusterDefinition":
		if _, err := DeleteClusterDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ClusterDefinition: %w", err)
		}
	case "ClusterInstance":
		if _, err := DeleteClusterInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ClusterInstance: %w", err)
		}
	case "DomainNameDefinition":
		if _, err := DeleteDomainNameDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete DomainNameDefinition: %w", err)
		}
	case "DomainNameInstance":
		if _, err := DeleteDomainNameInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete DomainNameInstance: %w", err)
		}
	case "ForwardProxyDefinition":
		if _, err := DeleteForwardProxyDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ForwardProxyDefinition: %w", err)
		}
	case "ForwardProxyInstance":
		if _, err := DeleteForwardProxyInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ForwardProxyInstance: %w", err)
		}
	case "GatewayDefinition":
		if _, err := DeleteGatewayDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete GatewayDefinition: %w", err)
		}
	case "GatewayInstance":
		if _, err := DeleteGatewayInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete GatewayInstance: %w", err)
		}
	case "LogBackend":
		if _, err := DeleteLogBackend(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogBackend: %w", err)
		}
	case "LogStorageDefinition":
		if _, err := DeleteLogStorageDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogStorageDefinition: %w", err)
		}
	case "LogStorageInstance":
		if _, err := DeleteLogStorageInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogStorageInstance: %w", err)
		}
	case "WorkloadDefinition":
		if _, err := DeleteWorkloadDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadDefinition: %w", err)
		}
	case "WorkloadResourceDefinition":
		if _, err := DeleteWorkloadResourceDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadResourceDefinition: %w", err)
		}
	case "WorkloadInstance":
		if _, err := DeleteWorkloadInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadInstance: %w", err)
		}
	case "WorkloadResourceInstance":
		if _, err := DeleteWorkloadResourceInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadResourceInstance: %w", err)
		}
	case "WorkloadEvent":
		if _, err := DeleteWorkloadEvent(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadEvent: %w", err)
		}

	}

	return nil
}
