// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	util "github.com/threeport/threeport/internal/util"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	"net/http"
)

// GetClusterDefinitions fetches all cluster definitions.
// TODO: implement pagination
func GetClusterDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.ClusterDefinition, error) {
	var clusterDefinitions []v0.ClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &clusterDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterDefinitions, nil
}

// GetClusterDefinitionByID fetches a cluster definition by ID.
func GetClusterDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ClusterDefinition, error) {
	var clusterDefinition v0.ClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterDefinition, nil
}

// GetClusterDefinitionByName fetches a cluster definition by name.
func GetClusterDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.ClusterDefinition, error) {
	var clusterDefinitions []v0.ClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ClusterDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ClusterDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(clusterDefinitions) < 1:
		return &v0.ClusterDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(clusterDefinitions) > 1:
		return &v0.ClusterDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &clusterDefinitions[0], nil
}

// CreateClusterDefinition creates a new cluster definition.
func CreateClusterDefinition(apiClient *http.Client, apiAddr string, clusterDefinition *v0.ClusterDefinition) (*v0.ClusterDefinition, error) {
	jsonClusterDefinition, err := util.MarshalObject(clusterDefinition)
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonClusterDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return clusterDefinition, nil
}

// UpdateClusterDefinition updates a cluster definition.
func UpdateClusterDefinition(apiClient *http.Client, apiAddr string, clusterDefinition *v0.ClusterDefinition) (*v0.ClusterDefinition, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	clusterDefinitionID := *clusterDefinition.ID
	clusterDefinition.ID = nil
	clusterDefinition.CreatedAt = nil
	clusterDefinition.UpdatedAt = nil

	jsonClusterDefinition, err := util.MarshalObject(clusterDefinition)
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, clusterDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonClusterDefinition),
		http.StatusOK,
	)
	if err != nil {
		return clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return clusterDefinition, nil
}

// DeleteClusterDefinition deletes a cluster definition by ID.
func DeleteClusterDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.ClusterDefinition, error) {
	var clusterDefinition v0.ClusterDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterDefinition, nil
}

// GetClusterInstances fetches all cluster instances.
// TODO: implement pagination
func GetClusterInstances(apiClient *http.Client, apiAddr string) (*[]v0.ClusterInstance, error) {
	var clusterInstances []v0.ClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &clusterInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterInstances, nil
}

// GetClusterInstanceByID fetches a cluster instance by ID.
func GetClusterInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ClusterInstance, error) {
	var clusterInstance v0.ClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterInstance, nil
}

// GetClusterInstanceByName fetches a cluster instance by name.
func GetClusterInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.ClusterInstance, error) {
	var clusterInstances []v0.ClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ClusterInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ClusterInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(clusterInstances) < 1:
		return &v0.ClusterInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(clusterInstances) > 1:
		return &v0.ClusterInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &clusterInstances[0], nil
}

// CreateClusterInstance creates a new cluster instance.
func CreateClusterInstance(apiClient *http.Client, apiAddr string, clusterInstance *v0.ClusterInstance) (*v0.ClusterInstance, error) {
	jsonClusterInstance, err := util.MarshalObject(clusterInstance)
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonClusterInstance),
		http.StatusCreated,
	)
	if err != nil {
		return clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return clusterInstance, nil
}

// UpdateClusterInstance updates a cluster instance.
func UpdateClusterInstance(apiClient *http.Client, apiAddr string, clusterInstance *v0.ClusterInstance) (*v0.ClusterInstance, error) {
	// capture the object ID then remove fields that cannot be updated in the API
	clusterInstanceID := *clusterInstance.ID
	clusterInstance.ID = nil
	clusterInstance.CreatedAt = nil
	clusterInstance.UpdatedAt = nil

	jsonClusterInstance, err := util.MarshalObject(clusterInstance)
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, clusterInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonClusterInstance),
		http.StatusOK,
	)
	if err != nil {
		return clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return clusterInstance, nil
}

// DeleteClusterInstance deletes a cluster instance by ID.
func DeleteClusterInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.ClusterInstance, error) {
	var clusterInstance v0.ClusterInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &clusterInstance, nil
}
