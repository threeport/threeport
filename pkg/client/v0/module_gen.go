// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetModuleApis fetches all module apis.
// TODO: implement pagination
func GetModuleApis(apiClient *http.Client, apiAddr string) (*[]v0.ModuleApi, error) {
	var moduleApis []v0.ModuleApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathModuleApis),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApis, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &moduleApis, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApis, nil
}

// GetModuleApiByID fetches a module api by ID.
func GetModuleApiByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ModuleApi, error) {
	var moduleApi v0.ModuleApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApis, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &moduleApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApi, nil
}

// GetModuleApisByQueryString fetches module apis by provided query string.
func GetModuleApisByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ModuleApi, error) {
	var moduleApis []v0.ModuleApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathModuleApis, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApis, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &moduleApis, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApis, nil
}

// GetModuleApiByName fetches a module api by name.
func GetModuleApiByName(apiClient *http.Client, apiAddr, name string) (*v0.ModuleApi, error) {
	var moduleApis []v0.ModuleApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathModuleApis, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ModuleApi{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ModuleApi{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApis); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(moduleApis) < 1:
		return &v0.ModuleApi{}, errors.New(fmt.Sprintf("no module api with name %s", name))
	case len(moduleApis) > 1:
		return &v0.ModuleApi{}, errors.New(fmt.Sprintf("more than one module api with name %s returned", name))
	}

	return &moduleApis[0], nil
}

// CreateModuleApi creates a new module api.
func CreateModuleApi(apiClient *http.Client, apiAddr string, moduleApi *v0.ModuleApi) (*v0.ModuleApi, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(moduleApi)
	jsonModuleApi, err := util.MarshalObject(moduleApi)
	if err != nil {
		return moduleApi, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathModuleApis),
		http.MethodPost,
		bytes.NewBuffer(jsonModuleApi),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return moduleApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return moduleApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return moduleApi, nil
}

// UpdateModuleApi updates a module api.
func UpdateModuleApi(apiClient *http.Client, apiAddr string, moduleApi *v0.ModuleApi) (*v0.ModuleApi, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(moduleApi)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	moduleApiID := *moduleApi.ID
	payloadModuleApi := *moduleApi
	payloadModuleApi.ID = nil
	payloadModuleApi.CreatedAt = nil
	payloadModuleApi.UpdatedAt = nil

	jsonModuleApi, err := util.MarshalObject(payloadModuleApi)
	if err != nil {
		return moduleApi, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApis, moduleApiID),
		http.MethodPatch,
		bytes.NewBuffer(jsonModuleApi),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return moduleApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return moduleApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadModuleApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadModuleApi.ID = &moduleApiID
	return &payloadModuleApi, nil
}

// DeleteModuleApi deletes a module api by ID.
func DeleteModuleApi(apiClient *http.Client, apiAddr string, id uint) (*v0.ModuleApi, error) {
	var moduleApi v0.ModuleApi

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApis, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApi, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &moduleApi, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApi); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApi, nil
}

// GetModuleApiRoutes fetches all module api routes.
// TODO: implement pagination
func GetModuleApiRoutes(apiClient *http.Client, apiAddr string) (*[]v0.ModuleApiRoute, error) {
	var moduleApiRoutes []v0.ModuleApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathModuleApiRoutes),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApiRoutes, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &moduleApiRoutes, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApiRoutes, nil
}

// GetModuleApiRouteByID fetches a module api route by ID.
func GetModuleApiRouteByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ModuleApiRoute, error) {
	var moduleApiRoute v0.ModuleApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApiRoutes, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &moduleApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApiRoute, nil
}

// GetModuleApiRoutesByQueryString fetches module api routes by provided query string.
func GetModuleApiRoutesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ModuleApiRoute, error) {
	var moduleApiRoutes []v0.ModuleApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathModuleApiRoutes, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApiRoutes, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &moduleApiRoutes, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApiRoutes, nil
}

// GetModuleApiRouteByName fetches a module api route by name.
func GetModuleApiRouteByName(apiClient *http.Client, apiAddr, name string) (*v0.ModuleApiRoute, error) {
	var moduleApiRoutes []v0.ModuleApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathModuleApiRoutes, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ModuleApiRoute{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ModuleApiRoute{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoutes); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(moduleApiRoutes) < 1:
		return &v0.ModuleApiRoute{}, errors.New(fmt.Sprintf("no module api route with name %s", name))
	case len(moduleApiRoutes) > 1:
		return &v0.ModuleApiRoute{}, errors.New(fmt.Sprintf("more than one module api route with name %s returned", name))
	}

	return &moduleApiRoutes[0], nil
}

// CreateModuleApiRoute creates a new module api route.
func CreateModuleApiRoute(apiClient *http.Client, apiAddr string, moduleApiRoute *v0.ModuleApiRoute) (*v0.ModuleApiRoute, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(moduleApiRoute)
	jsonModuleApiRoute, err := util.MarshalObject(moduleApiRoute)
	if err != nil {
		return moduleApiRoute, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathModuleApiRoutes),
		http.MethodPost,
		bytes.NewBuffer(jsonModuleApiRoute),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return moduleApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return moduleApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return moduleApiRoute, nil
}

// UpdateModuleApiRoute updates a module api route.
func UpdateModuleApiRoute(apiClient *http.Client, apiAddr string, moduleApiRoute *v0.ModuleApiRoute) (*v0.ModuleApiRoute, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(moduleApiRoute)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	moduleApiRouteID := *moduleApiRoute.ID
	payloadModuleApiRoute := *moduleApiRoute
	payloadModuleApiRoute.ID = nil
	payloadModuleApiRoute.CreatedAt = nil
	payloadModuleApiRoute.UpdatedAt = nil

	jsonModuleApiRoute, err := util.MarshalObject(payloadModuleApiRoute)
	if err != nil {
		return moduleApiRoute, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApiRoutes, moduleApiRouteID),
		http.MethodPatch,
		bytes.NewBuffer(jsonModuleApiRoute),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return moduleApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return moduleApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadModuleApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadModuleApiRoute.ID = &moduleApiRouteID
	return &payloadModuleApiRoute, nil
}

// DeleteModuleApiRoute deletes a module api route by ID.
func DeleteModuleApiRoute(apiClient *http.Client, apiAddr string, id uint) (*v0.ModuleApiRoute, error) {
	var moduleApiRoute v0.ModuleApiRoute

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathModuleApiRoutes, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &moduleApiRoute, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &moduleApiRoute, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&moduleApiRoute); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &moduleApiRoute, nil
}
