// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetEvents fetches all events.
// TODO: implement pagination
func GetEvents(apiClient *http.Client, apiAddr string) (*[]v0.Event, error) {
	var events []v0.Event

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathEvents),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &events, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &events, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&events); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &events, nil
}

// GetEventByID fetches a event by ID.
func GetEventByID(apiClient *http.Client, apiAddr string, id uint) (*v0.Event, error) {
	var event v0.Event

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathEvents, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &event, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &event, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&event); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &event, nil
}

// GetEventsByQueryString fetches events by provided query string.
func GetEventsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.Event, error) {
	var events []v0.Event

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathEvents, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &events, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &events, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&events); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &events, nil
}

// GetEventByName fetches a event by name.
func GetEventByName(apiClient *http.Client, apiAddr, name string) (*v0.Event, error) {
	var events []v0.Event

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathEvents, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.Event{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.Event{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&events); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(events) < 1:
		return &v0.Event{}, errors.New(fmt.Sprintf("no event with name %s", name))
	case len(events) > 1:
		return &v0.Event{}, errors.New(fmt.Sprintf("more than one event with name %s returned", name))
	}

	return &events[0], nil
}

// CreateEvent creates a new event.
func CreateEvent(apiClient *http.Client, apiAddr string, event *v0.Event) (*v0.Event, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(event)
	jsonEvent, err := util.MarshalObject(event)
	if err != nil {
		return event, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathEvents),
		http.MethodPost,
		bytes.NewBuffer(jsonEvent),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return event, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return event, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&event); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return event, nil
}

// UpdateEvent updates a event.
func UpdateEvent(apiClient *http.Client, apiAddr string, event *v0.Event) (*v0.Event, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(event)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	eventID := *event.ID
	payloadEvent := *event
	payloadEvent.ID = nil
	payloadEvent.CreatedAt = nil
	payloadEvent.UpdatedAt = nil

	jsonEvent, err := util.MarshalObject(payloadEvent)
	if err != nil {
		return event, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathEvents, eventID),
		http.MethodPatch,
		bytes.NewBuffer(jsonEvent),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return event, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return event, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadEvent); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadEvent.ID = &eventID
	return &payloadEvent, nil
}

// DeleteEvent deletes a event by ID.
func DeleteEvent(apiClient *http.Client, apiAddr string, id uint) (*v0.Event, error) {
	var event v0.Event

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathEvents, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &event, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &event, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&event); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &event, nil
}
