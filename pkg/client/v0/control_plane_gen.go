// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetControlPlaneDefinitions fetches all control plane definitions.
// TODO: implement pagination
func GetControlPlaneDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.ControlPlaneDefinition, error) {
	var controlPlaneDefinitions []v0.ControlPlaneDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathControlPlaneDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &controlPlaneDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneDefinitions, nil
}

// GetControlPlaneDefinitionByID fetches a control plane definition by ID.
func GetControlPlaneDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ControlPlaneDefinition, error) {
	var controlPlaneDefinition v0.ControlPlaneDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &controlPlaneDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneDefinition, nil
}

// GetControlPlaneDefinitionsByQueryString fetches control plane definitions by provided query string.
func GetControlPlaneDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ControlPlaneDefinition, error) {
	var controlPlaneDefinitions []v0.ControlPlaneDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathControlPlaneDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &controlPlaneDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneDefinitions, nil
}

// GetControlPlaneDefinitionByName fetches a control plane definition by name.
func GetControlPlaneDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.ControlPlaneDefinition, error) {
	var controlPlaneDefinitions []v0.ControlPlaneDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathControlPlaneDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ControlPlaneDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ControlPlaneDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(controlPlaneDefinitions) < 1:
		return &v0.ControlPlaneDefinition{}, errors.New(fmt.Sprintf("no control plane definition with name %s", name))
	case len(controlPlaneDefinitions) > 1:
		return &v0.ControlPlaneDefinition{}, errors.New(fmt.Sprintf("more than one control plane definition with name %s returned", name))
	}

	return &controlPlaneDefinitions[0], nil
}

// CreateControlPlaneDefinition creates a new control plane definition.
func CreateControlPlaneDefinition(apiClient *http.Client, apiAddr string, controlPlaneDefinition *v0.ControlPlaneDefinition) (*v0.ControlPlaneDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(controlPlaneDefinition)
	jsonControlPlaneDefinition, err := util.MarshalObject(controlPlaneDefinition)
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathControlPlaneDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonControlPlaneDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return controlPlaneDefinition, nil
}

// UpdateControlPlaneDefinition updates a control plane definition.
func UpdateControlPlaneDefinition(apiClient *http.Client, apiAddr string, controlPlaneDefinition *v0.ControlPlaneDefinition) (*v0.ControlPlaneDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(controlPlaneDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	controlPlaneDefinitionID := *controlPlaneDefinition.ID
	payloadControlPlaneDefinition := *controlPlaneDefinition
	payloadControlPlaneDefinition.ID = nil
	payloadControlPlaneDefinition.CreatedAt = nil
	payloadControlPlaneDefinition.UpdatedAt = nil

	jsonControlPlaneDefinition, err := util.MarshalObject(payloadControlPlaneDefinition)
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneDefinitions, controlPlaneDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonControlPlaneDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return controlPlaneDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadControlPlaneDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadControlPlaneDefinition.ID = &controlPlaneDefinitionID
	return &payloadControlPlaneDefinition, nil
}

// DeleteControlPlaneDefinition deletes a control plane definition by ID.
func DeleteControlPlaneDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.ControlPlaneDefinition, error) {
	var controlPlaneDefinition v0.ControlPlaneDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &controlPlaneDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneDefinition, nil
}

// GetControlPlaneInstances fetches all control plane instances.
// TODO: implement pagination
func GetControlPlaneInstances(apiClient *http.Client, apiAddr string) (*[]v0.ControlPlaneInstance, error) {
	var controlPlaneInstances []v0.ControlPlaneInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathControlPlaneInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &controlPlaneInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneInstances, nil
}

// GetControlPlaneInstanceByID fetches a control plane instance by ID.
func GetControlPlaneInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ControlPlaneInstance, error) {
	var controlPlaneInstance v0.ControlPlaneInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &controlPlaneInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneInstance, nil
}

// GetControlPlaneInstancesByQueryString fetches control plane instances by provided query string.
func GetControlPlaneInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ControlPlaneInstance, error) {
	var controlPlaneInstances []v0.ControlPlaneInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathControlPlaneInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &controlPlaneInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneInstances, nil
}

// GetControlPlaneInstanceByName fetches a control plane instance by name.
func GetControlPlaneInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.ControlPlaneInstance, error) {
	var controlPlaneInstances []v0.ControlPlaneInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathControlPlaneInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ControlPlaneInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ControlPlaneInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(controlPlaneInstances) < 1:
		return &v0.ControlPlaneInstance{}, errors.New(fmt.Sprintf("no control plane instance with name %s", name))
	case len(controlPlaneInstances) > 1:
		return &v0.ControlPlaneInstance{}, errors.New(fmt.Sprintf("more than one control plane instance with name %s returned", name))
	}

	return &controlPlaneInstances[0], nil
}

// CreateControlPlaneInstance creates a new control plane instance.
func CreateControlPlaneInstance(apiClient *http.Client, apiAddr string, controlPlaneInstance *v0.ControlPlaneInstance) (*v0.ControlPlaneInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(controlPlaneInstance)
	jsonControlPlaneInstance, err := util.MarshalObject(controlPlaneInstance)
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathControlPlaneInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonControlPlaneInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return controlPlaneInstance, nil
}

// UpdateControlPlaneInstance updates a control plane instance.
func UpdateControlPlaneInstance(apiClient *http.Client, apiAddr string, controlPlaneInstance *v0.ControlPlaneInstance) (*v0.ControlPlaneInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(controlPlaneInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	controlPlaneInstanceID := *controlPlaneInstance.ID
	payloadControlPlaneInstance := *controlPlaneInstance
	payloadControlPlaneInstance.ID = nil
	payloadControlPlaneInstance.CreatedAt = nil
	payloadControlPlaneInstance.UpdatedAt = nil

	jsonControlPlaneInstance, err := util.MarshalObject(payloadControlPlaneInstance)
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneInstances, controlPlaneInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonControlPlaneInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return controlPlaneInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadControlPlaneInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadControlPlaneInstance.ID = &controlPlaneInstanceID
	return &payloadControlPlaneInstance, nil
}

// DeleteControlPlaneInstance deletes a control plane instance by ID.
func DeleteControlPlaneInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.ControlPlaneInstance, error) {
	var controlPlaneInstance v0.ControlPlaneInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathControlPlaneInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &controlPlaneInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &controlPlaneInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&controlPlaneInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &controlPlaneInstance, nil
}
