// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	util "github.com/threeport/threeport/internal/util"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	"net/http"
)

// GetGatewayDefinitions fetches all gateway definitions.
// TODO: implement pagination
func GetGatewayDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.GatewayDefinition, error) {
	var gatewayDefinitions []v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinitions, nil
}

// GetGatewayDefinitionByID fetches a gateway definition by ID.
func GetGatewayDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayDefinition, error) {
	var gatewayDefinition v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinition, nil
}

// GetGatewayDefinitionByName fetches a gateway definition by name.
func GetGatewayDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayDefinition, error) {
	var gatewayDefinitions []v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayDefinitions) < 1:
		return &v0.GatewayDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(gatewayDefinitions) > 1:
		return &v0.GatewayDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &gatewayDefinitions[0], nil
}

// CreateGatewayDefinition creates a new gateway definition.
func CreateGatewayDefinition(apiClient *http.Client, apiAddr string, gatewayDefinition *v0.GatewayDefinition) (*v0.GatewayDefinition, error) {
	jsonGatewayDefinition, err := util.MarshalObject(gatewayDefinition)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayDefinition, nil
}

// UpdateGatewayDefinition updates a gateway definition.
func UpdateGatewayDefinition(apiClient *http.Client, apiAddr string, gatewayDefinition *v0.GatewayDefinition) (*v0.GatewayDefinition, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayDefinitionID := *gatewayDefinition.ID
	payloadGatewayDefinition := *gatewayDefinition
	payloadGatewayDefinition.ID = nil
	payloadGatewayDefinition.CreatedAt = nil
	payloadGatewayDefinition.UpdatedAt = nil

	jsonGatewayDefinition, err := util.MarshalObject(payloadGatewayDefinition)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, gatewayDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayDefinition),
		http.StatusOK,
	)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayDefinition.ID = &gatewayDefinitionID
	return &payloadGatewayDefinition, nil
}

// DeleteGatewayDefinition deletes a gateway definition by ID.
func DeleteGatewayDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayDefinition, error) {
	var gatewayDefinition v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinition, nil
}

// GetGatewayInstances fetches all gateway instances.
// TODO: implement pagination
func GetGatewayInstances(apiClient *http.Client, apiAddr string) (*[]v0.GatewayInstance, error) {
	var gatewayInstances []v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstances, nil
}

// GetGatewayInstanceByID fetches a gateway instance by ID.
func GetGatewayInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayInstance, error) {
	var gatewayInstance v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstance, nil
}

// GetGatewayInstanceByName fetches a gateway instance by name.
func GetGatewayInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayInstance, error) {
	var gatewayInstances []v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayInstances) < 1:
		return &v0.GatewayInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(gatewayInstances) > 1:
		return &v0.GatewayInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &gatewayInstances[0], nil
}

// CreateGatewayInstance creates a new gateway instance.
func CreateGatewayInstance(apiClient *http.Client, apiAddr string, gatewayInstance *v0.GatewayInstance) (*v0.GatewayInstance, error) {
	jsonGatewayInstance, err := util.MarshalObject(gatewayInstance)
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayInstance),
		http.StatusCreated,
	)
	if err != nil {
		return gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayInstance, nil
}

// UpdateGatewayInstance updates a gateway instance.
func UpdateGatewayInstance(apiClient *http.Client, apiAddr string, gatewayInstance *v0.GatewayInstance) (*v0.GatewayInstance, error) {
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayInstanceID := *gatewayInstance.ID
	payloadGatewayInstance := *gatewayInstance
	payloadGatewayInstance.ID = nil
	payloadGatewayInstance.CreatedAt = nil
	payloadGatewayInstance.UpdatedAt = nil

	jsonGatewayInstance, err := util.MarshalObject(payloadGatewayInstance)
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, gatewayInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayInstance),
		http.StatusOK,
	)
	if err != nil {
		return gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayInstance.ID = &gatewayInstanceID
	return &payloadGatewayInstance, nil
}

// DeleteGatewayInstance deletes a gateway instance by ID.
func DeleteGatewayInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayInstance, error) {
	var gatewayInstance v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstance, nil
}
