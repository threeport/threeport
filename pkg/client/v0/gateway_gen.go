// generated by 'threeport-sdk gen' for API client boilerplate' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetDomainNameDefinitions fetches all domain name definitions.
// TODO: implement pagination
func GetDomainNameDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.DomainNameDefinition, error) {
	var domainNameDefinitions []v0.DomainNameDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &domainNameDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameDefinitions, nil
}

// GetDomainNameDefinitionByID fetches a domain name definition by ID.
func GetDomainNameDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.DomainNameDefinition, error) {
	var domainNameDefinition v0.DomainNameDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &domainNameDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameDefinition, nil
}

// GetDomainNameDefinitionsByQueryString fetches domain name definitions by provided query string.
func GetDomainNameDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.DomainNameDefinition, error) {
	var domainNameDefinitions []v0.DomainNameDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &domainNameDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameDefinitions, nil
}

// GetDomainNameDefinitionByName fetches a domain name definition by name.
func GetDomainNameDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.DomainNameDefinition, error) {
	var domainNameDefinitions []v0.DomainNameDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.DomainNameDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.DomainNameDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(domainNameDefinitions) < 1:
		return &v0.DomainNameDefinition{}, ErrObjectNotFound
	case len(domainNameDefinitions) > 1:
		return &v0.DomainNameDefinition{}, errors.New(fmt.Sprintf("more than one domain name definition with name %s returned", name))
	}

	return &domainNameDefinitions[0], nil
}

// CreateDomainNameDefinition creates a new domain name definition.
func CreateDomainNameDefinition(apiClient *http.Client, apiAddr string, domainNameDefinition *v0.DomainNameDefinition) (*v0.DomainNameDefinition, error) {
	ReplaceAssociatedObjectsWithNil(domainNameDefinition)
	jsonDomainNameDefinition, err := util.MarshalObject(domainNameDefinition)
	if err != nil {
		return domainNameDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonDomainNameDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return domainNameDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return domainNameDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return domainNameDefinition, nil
}

// UpdateDomainNameDefinition updates a domain name definition.
func UpdateDomainNameDefinition(apiClient *http.Client, apiAddr string, domainNameDefinition *v0.DomainNameDefinition) (*v0.DomainNameDefinition, error) {
	ReplaceAssociatedObjectsWithNil(domainNameDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	domainNameDefinitionID := *domainNameDefinition.ID
	payloadDomainNameDefinition := *domainNameDefinition
	payloadDomainNameDefinition.ID = nil
	payloadDomainNameDefinition.CreatedAt = nil
	payloadDomainNameDefinition.UpdatedAt = nil

	jsonDomainNameDefinition, err := util.MarshalObject(payloadDomainNameDefinition)
	if err != nil {
		return domainNameDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions/%d", apiAddr, ApiVersion, domainNameDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonDomainNameDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return domainNameDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return domainNameDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadDomainNameDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadDomainNameDefinition.ID = &domainNameDefinitionID
	return &payloadDomainNameDefinition, nil
}

// DeleteDomainNameDefinition deletes a domain name definition by ID.
func DeleteDomainNameDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.DomainNameDefinition, error) {
	var domainNameDefinition v0.DomainNameDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &domainNameDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameDefinition, nil
}

// GetDomainNameInstances fetches all domain name instances.
// TODO: implement pagination
func GetDomainNameInstances(apiClient *http.Client, apiAddr string) (*[]v0.DomainNameInstance, error) {
	var domainNameInstances []v0.DomainNameInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &domainNameInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameInstances, nil
}

// GetDomainNameInstanceByID fetches a domain name instance by ID.
func GetDomainNameInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.DomainNameInstance, error) {
	var domainNameInstance v0.DomainNameInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &domainNameInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameInstance, nil
}

// GetDomainNameInstancesByQueryString fetches domain name instances by provided query string.
func GetDomainNameInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.DomainNameInstance, error) {
	var domainNameInstances []v0.DomainNameInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &domainNameInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameInstances, nil
}

// GetDomainNameInstanceByName fetches a domain name instance by name.
func GetDomainNameInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.DomainNameInstance, error) {
	var domainNameInstances []v0.DomainNameInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.DomainNameInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.DomainNameInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(domainNameInstances) < 1:
		return &v0.DomainNameInstance{}, ErrObjectNotFound
	case len(domainNameInstances) > 1:
		return &v0.DomainNameInstance{}, errors.New(fmt.Sprintf("more than one domain name instance with name %s returned", name))
	}

	return &domainNameInstances[0], nil
}

// CreateDomainNameInstance creates a new domain name instance.
func CreateDomainNameInstance(apiClient *http.Client, apiAddr string, domainNameInstance *v0.DomainNameInstance) (*v0.DomainNameInstance, error) {
	ReplaceAssociatedObjectsWithNil(domainNameInstance)
	jsonDomainNameInstance, err := util.MarshalObject(domainNameInstance)
	if err != nil {
		return domainNameInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonDomainNameInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return domainNameInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return domainNameInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return domainNameInstance, nil
}

// UpdateDomainNameInstance updates a domain name instance.
func UpdateDomainNameInstance(apiClient *http.Client, apiAddr string, domainNameInstance *v0.DomainNameInstance) (*v0.DomainNameInstance, error) {
	ReplaceAssociatedObjectsWithNil(domainNameInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	domainNameInstanceID := *domainNameInstance.ID
	payloadDomainNameInstance := *domainNameInstance
	payloadDomainNameInstance.ID = nil
	payloadDomainNameInstance.CreatedAt = nil
	payloadDomainNameInstance.UpdatedAt = nil

	jsonDomainNameInstance, err := util.MarshalObject(payloadDomainNameInstance)
	if err != nil {
		return domainNameInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances/%d", apiAddr, ApiVersion, domainNameInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonDomainNameInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return domainNameInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return domainNameInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadDomainNameInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadDomainNameInstance.ID = &domainNameInstanceID
	return &payloadDomainNameInstance, nil
}

// DeleteDomainNameInstance deletes a domain name instance by ID.
func DeleteDomainNameInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.DomainNameInstance, error) {
	var domainNameInstance v0.DomainNameInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/domain-name-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &domainNameInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &domainNameInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&domainNameInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &domainNameInstance, nil
}

// GetGatewayDefinitions fetches all gateway definitions.
// TODO: implement pagination
func GetGatewayDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.GatewayDefinition, error) {
	var gatewayDefinitions []v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinitions, nil
}

// GetGatewayDefinitionByID fetches a gateway definition by ID.
func GetGatewayDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayDefinition, error) {
	var gatewayDefinition v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinition, nil
}

// GetGatewayDefinitionsByQueryString fetches gateway definitions by provided query string.
func GetGatewayDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.GatewayDefinition, error) {
	var gatewayDefinitions []v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinitions, nil
}

// GetGatewayDefinitionByName fetches a gateway definition by name.
func GetGatewayDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayDefinition, error) {
	var gatewayDefinitions []v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayDefinitions) < 1:
		return &v0.GatewayDefinition{}, ErrObjectNotFound
	case len(gatewayDefinitions) > 1:
		return &v0.GatewayDefinition{}, errors.New(fmt.Sprintf("more than one gateway definition with name %s returned", name))
	}

	return &gatewayDefinitions[0], nil
}

// CreateGatewayDefinition creates a new gateway definition.
func CreateGatewayDefinition(apiClient *http.Client, apiAddr string, gatewayDefinition *v0.GatewayDefinition) (*v0.GatewayDefinition, error) {
	ReplaceAssociatedObjectsWithNil(gatewayDefinition)
	jsonGatewayDefinition, err := util.MarshalObject(gatewayDefinition)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayDefinition, nil
}

// UpdateGatewayDefinition updates a gateway definition.
func UpdateGatewayDefinition(apiClient *http.Client, apiAddr string, gatewayDefinition *v0.GatewayDefinition) (*v0.GatewayDefinition, error) {
	ReplaceAssociatedObjectsWithNil(gatewayDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayDefinitionID := *gatewayDefinition.ID
	payloadGatewayDefinition := *gatewayDefinition
	payloadGatewayDefinition.ID = nil
	payloadGatewayDefinition.CreatedAt = nil
	payloadGatewayDefinition.UpdatedAt = nil

	jsonGatewayDefinition, err := util.MarshalObject(payloadGatewayDefinition)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, gatewayDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayDefinition.ID = &gatewayDefinitionID
	return &payloadGatewayDefinition, nil
}

// DeleteGatewayDefinition deletes a gateway definition by ID.
func DeleteGatewayDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayDefinition, error) {
	var gatewayDefinition v0.GatewayDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayDefinition, nil
}

// GetGatewayHttpPorts fetches all gateway http ports.
// TODO: implement pagination
func GetGatewayHttpPorts(apiClient *http.Client, apiAddr string) (*[]v0.GatewayHttpPort, error) {
	var gatewayHttpPorts []v0.GatewayHttpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayHttpPorts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayHttpPorts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayHttpPorts, nil
}

// GetGatewayHttpPortByID fetches a gateway http port by ID.
func GetGatewayHttpPortByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayHttpPort, error) {
	var gatewayHttpPort v0.GatewayHttpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayHttpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayHttpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayHttpPort, nil
}

// GetGatewayHttpPortsByQueryString fetches gateway http ports by provided query string.
func GetGatewayHttpPortsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.GatewayHttpPort, error) {
	var gatewayHttpPorts []v0.GatewayHttpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayHttpPorts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayHttpPorts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayHttpPorts, nil
}

// GetGatewayHttpPortByName fetches a gateway http port by name.
func GetGatewayHttpPortByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayHttpPort, error) {
	var gatewayHttpPorts []v0.GatewayHttpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayHttpPort{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayHttpPort{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayHttpPorts) < 1:
		return &v0.GatewayHttpPort{}, ErrObjectNotFound
	case len(gatewayHttpPorts) > 1:
		return &v0.GatewayHttpPort{}, errors.New(fmt.Sprintf("more than one gateway http port with name %s returned", name))
	}

	return &gatewayHttpPorts[0], nil
}

// CreateGatewayHttpPort creates a new gateway http port.
func CreateGatewayHttpPort(apiClient *http.Client, apiAddr string, gatewayHttpPort *v0.GatewayHttpPort) (*v0.GatewayHttpPort, error) {
	ReplaceAssociatedObjectsWithNil(gatewayHttpPort)
	jsonGatewayHttpPort, err := util.MarshalObject(gatewayHttpPort)
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayHttpPort),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayHttpPort, nil
}

// UpdateGatewayHttpPort updates a gateway http port.
func UpdateGatewayHttpPort(apiClient *http.Client, apiAddr string, gatewayHttpPort *v0.GatewayHttpPort) (*v0.GatewayHttpPort, error) {
	ReplaceAssociatedObjectsWithNil(gatewayHttpPort)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayHttpPortID := *gatewayHttpPort.ID
	payloadGatewayHttpPort := *gatewayHttpPort
	payloadGatewayHttpPort.ID = nil
	payloadGatewayHttpPort.CreatedAt = nil
	payloadGatewayHttpPort.UpdatedAt = nil

	jsonGatewayHttpPort, err := util.MarshalObject(payloadGatewayHttpPort)
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports/%d", apiAddr, ApiVersion, gatewayHttpPortID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayHttpPort),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayHttpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayHttpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayHttpPort.ID = &gatewayHttpPortID
	return &payloadGatewayHttpPort, nil
}

// DeleteGatewayHttpPort deletes a gateway http port by ID.
func DeleteGatewayHttpPort(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayHttpPort, error) {
	var gatewayHttpPort v0.GatewayHttpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-http-ports/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayHttpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayHttpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayHttpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayHttpPort, nil
}

// GetGatewayInstances fetches all gateway instances.
// TODO: implement pagination
func GetGatewayInstances(apiClient *http.Client, apiAddr string) (*[]v0.GatewayInstance, error) {
	var gatewayInstances []v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstances, nil
}

// GetGatewayInstanceByID fetches a gateway instance by ID.
func GetGatewayInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayInstance, error) {
	var gatewayInstance v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstance, nil
}

// GetGatewayInstancesByQueryString fetches gateway instances by provided query string.
func GetGatewayInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.GatewayInstance, error) {
	var gatewayInstances []v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstances, nil
}

// GetGatewayInstanceByName fetches a gateway instance by name.
func GetGatewayInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayInstance, error) {
	var gatewayInstances []v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayInstances) < 1:
		return &v0.GatewayInstance{}, ErrObjectNotFound
	case len(gatewayInstances) > 1:
		return &v0.GatewayInstance{}, errors.New(fmt.Sprintf("more than one gateway instance with name %s returned", name))
	}

	return &gatewayInstances[0], nil
}

// CreateGatewayInstance creates a new gateway instance.
func CreateGatewayInstance(apiClient *http.Client, apiAddr string, gatewayInstance *v0.GatewayInstance) (*v0.GatewayInstance, error) {
	ReplaceAssociatedObjectsWithNil(gatewayInstance)
	jsonGatewayInstance, err := util.MarshalObject(gatewayInstance)
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayInstance, nil
}

// UpdateGatewayInstance updates a gateway instance.
func UpdateGatewayInstance(apiClient *http.Client, apiAddr string, gatewayInstance *v0.GatewayInstance) (*v0.GatewayInstance, error) {
	ReplaceAssociatedObjectsWithNil(gatewayInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayInstanceID := *gatewayInstance.ID
	payloadGatewayInstance := *gatewayInstance
	payloadGatewayInstance.ID = nil
	payloadGatewayInstance.CreatedAt = nil
	payloadGatewayInstance.UpdatedAt = nil

	jsonGatewayInstance, err := util.MarshalObject(payloadGatewayInstance)
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, gatewayInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayInstance.ID = &gatewayInstanceID
	return &payloadGatewayInstance, nil
}

// DeleteGatewayInstance deletes a gateway instance by ID.
func DeleteGatewayInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayInstance, error) {
	var gatewayInstance v0.GatewayInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayInstance, nil
}

// GetGatewayTcpPorts fetches all gateway tcp ports.
// TODO: implement pagination
func GetGatewayTcpPorts(apiClient *http.Client, apiAddr string) (*[]v0.GatewayTcpPort, error) {
	var gatewayTcpPorts []v0.GatewayTcpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayTcpPorts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayTcpPorts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayTcpPorts, nil
}

// GetGatewayTcpPortByID fetches a gateway tcp port by ID.
func GetGatewayTcpPortByID(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayTcpPort, error) {
	var gatewayTcpPort v0.GatewayTcpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayTcpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayTcpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayTcpPort, nil
}

// GetGatewayTcpPortsByQueryString fetches gateway tcp ports by provided query string.
func GetGatewayTcpPortsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.GatewayTcpPort, error) {
	var gatewayTcpPorts []v0.GatewayTcpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayTcpPorts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &gatewayTcpPorts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayTcpPorts, nil
}

// GetGatewayTcpPortByName fetches a gateway tcp port by name.
func GetGatewayTcpPortByName(apiClient *http.Client, apiAddr, name string) (*v0.GatewayTcpPort, error) {
	var gatewayTcpPorts []v0.GatewayTcpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.GatewayTcpPort{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.GatewayTcpPort{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPorts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(gatewayTcpPorts) < 1:
		return &v0.GatewayTcpPort{}, ErrObjectNotFound
	case len(gatewayTcpPorts) > 1:
		return &v0.GatewayTcpPort{}, errors.New(fmt.Sprintf("more than one gateway tcp port with name %s returned", name))
	}

	return &gatewayTcpPorts[0], nil
}

// CreateGatewayTcpPort creates a new gateway tcp port.
func CreateGatewayTcpPort(apiClient *http.Client, apiAddr string, gatewayTcpPort *v0.GatewayTcpPort) (*v0.GatewayTcpPort, error) {
	ReplaceAssociatedObjectsWithNil(gatewayTcpPort)
	jsonGatewayTcpPort, err := util.MarshalObject(gatewayTcpPort)
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonGatewayTcpPort),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return gatewayTcpPort, nil
}

// UpdateGatewayTcpPort updates a gateway tcp port.
func UpdateGatewayTcpPort(apiClient *http.Client, apiAddr string, gatewayTcpPort *v0.GatewayTcpPort) (*v0.GatewayTcpPort, error) {
	ReplaceAssociatedObjectsWithNil(gatewayTcpPort)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	gatewayTcpPortID := *gatewayTcpPort.ID
	payloadGatewayTcpPort := *gatewayTcpPort
	payloadGatewayTcpPort.ID = nil
	payloadGatewayTcpPort.CreatedAt = nil
	payloadGatewayTcpPort.UpdatedAt = nil

	jsonGatewayTcpPort, err := util.MarshalObject(payloadGatewayTcpPort)
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports/%d", apiAddr, ApiVersion, gatewayTcpPortID),
		http.MethodPatch,
		bytes.NewBuffer(jsonGatewayTcpPort),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return gatewayTcpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadGatewayTcpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadGatewayTcpPort.ID = &gatewayTcpPortID
	return &payloadGatewayTcpPort, nil
}

// DeleteGatewayTcpPort deletes a gateway tcp port by ID.
func DeleteGatewayTcpPort(apiClient *http.Client, apiAddr string, id uint) (*v0.GatewayTcpPort, error) {
	var gatewayTcpPort v0.GatewayTcpPort

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/gateway-tcp-ports/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &gatewayTcpPort, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &gatewayTcpPort, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&gatewayTcpPort); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &gatewayTcpPort, nil
}
