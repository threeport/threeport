// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetLoggingDefinitions fetches all logging definitions.
// TODO: implement pagination
func GetLoggingDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.LoggingDefinition, error) {
	var loggingDefinitions []v0.LoggingDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathLoggingDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &loggingDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingDefinitions, nil
}

// GetLoggingDefinitionByID fetches a logging definition by ID.
func GetLoggingDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.LoggingDefinition, error) {
	var loggingDefinition v0.LoggingDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &loggingDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingDefinition, nil
}

// GetLoggingDefinitionsByQueryString fetches logging definitions by provided query string.
func GetLoggingDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.LoggingDefinition, error) {
	var loggingDefinitions []v0.LoggingDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathLoggingDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &loggingDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingDefinitions, nil
}

// GetLoggingDefinitionByName fetches a logging definition by name.
func GetLoggingDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.LoggingDefinition, error) {
	var loggingDefinitions []v0.LoggingDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathLoggingDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.LoggingDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.LoggingDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(loggingDefinitions) < 1:
		return &v0.LoggingDefinition{}, errors.New(fmt.Sprintf("no logging definition with name %s", name))
	case len(loggingDefinitions) > 1:
		return &v0.LoggingDefinition{}, errors.New(fmt.Sprintf("more than one logging definition with name %s returned", name))
	}

	return &loggingDefinitions[0], nil
}

// CreateLoggingDefinition creates a new logging definition.
func CreateLoggingDefinition(apiClient *http.Client, apiAddr string, loggingDefinition *v0.LoggingDefinition) (*v0.LoggingDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(loggingDefinition)
	jsonLoggingDefinition, err := util.MarshalObject(loggingDefinition)
	if err != nil {
		return loggingDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathLoggingDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonLoggingDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return loggingDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return loggingDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return loggingDefinition, nil
}

// UpdateLoggingDefinition updates a logging definition.
func UpdateLoggingDefinition(apiClient *http.Client, apiAddr string, loggingDefinition *v0.LoggingDefinition) (*v0.LoggingDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(loggingDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	loggingDefinitionID := *loggingDefinition.ID
	payloadLoggingDefinition := *loggingDefinition
	payloadLoggingDefinition.ID = nil
	payloadLoggingDefinition.CreatedAt = nil
	payloadLoggingDefinition.UpdatedAt = nil

	jsonLoggingDefinition, err := util.MarshalObject(payloadLoggingDefinition)
	if err != nil {
		return loggingDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingDefinitions, loggingDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonLoggingDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return loggingDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return loggingDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadLoggingDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadLoggingDefinition.ID = &loggingDefinitionID
	return &payloadLoggingDefinition, nil
}

// DeleteLoggingDefinition deletes a logging definition by ID.
func DeleteLoggingDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.LoggingDefinition, error) {
	var loggingDefinition v0.LoggingDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &loggingDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingDefinition, nil
}

// GetLoggingInstances fetches all logging instances.
// TODO: implement pagination
func GetLoggingInstances(apiClient *http.Client, apiAddr string) (*[]v0.LoggingInstance, error) {
	var loggingInstances []v0.LoggingInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathLoggingInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &loggingInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingInstances, nil
}

// GetLoggingInstanceByID fetches a logging instance by ID.
func GetLoggingInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.LoggingInstance, error) {
	var loggingInstance v0.LoggingInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &loggingInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingInstance, nil
}

// GetLoggingInstancesByQueryString fetches logging instances by provided query string.
func GetLoggingInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.LoggingInstance, error) {
	var loggingInstances []v0.LoggingInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathLoggingInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &loggingInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingInstances, nil
}

// GetLoggingInstanceByName fetches a logging instance by name.
func GetLoggingInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.LoggingInstance, error) {
	var loggingInstances []v0.LoggingInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathLoggingInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.LoggingInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.LoggingInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(loggingInstances) < 1:
		return &v0.LoggingInstance{}, errors.New(fmt.Sprintf("no logging instance with name %s", name))
	case len(loggingInstances) > 1:
		return &v0.LoggingInstance{}, errors.New(fmt.Sprintf("more than one logging instance with name %s returned", name))
	}

	return &loggingInstances[0], nil
}

// CreateLoggingInstance creates a new logging instance.
func CreateLoggingInstance(apiClient *http.Client, apiAddr string, loggingInstance *v0.LoggingInstance) (*v0.LoggingInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(loggingInstance)
	jsonLoggingInstance, err := util.MarshalObject(loggingInstance)
	if err != nil {
		return loggingInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathLoggingInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonLoggingInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return loggingInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return loggingInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return loggingInstance, nil
}

// UpdateLoggingInstance updates a logging instance.
func UpdateLoggingInstance(apiClient *http.Client, apiAddr string, loggingInstance *v0.LoggingInstance) (*v0.LoggingInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(loggingInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	loggingInstanceID := *loggingInstance.ID
	payloadLoggingInstance := *loggingInstance
	payloadLoggingInstance.ID = nil
	payloadLoggingInstance.CreatedAt = nil
	payloadLoggingInstance.UpdatedAt = nil

	jsonLoggingInstance, err := util.MarshalObject(payloadLoggingInstance)
	if err != nil {
		return loggingInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingInstances, loggingInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonLoggingInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return loggingInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return loggingInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadLoggingInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadLoggingInstance.ID = &loggingInstanceID
	return &payloadLoggingInstance, nil
}

// DeleteLoggingInstance deletes a logging instance by ID.
func DeleteLoggingInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.LoggingInstance, error) {
	var loggingInstance v0.LoggingInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathLoggingInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &loggingInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &loggingInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&loggingInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &loggingInstance, nil
}

// GetMetricsDefinitions fetches all metrics definitions.
// TODO: implement pagination
func GetMetricsDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.MetricsDefinition, error) {
	var metricsDefinitions []v0.MetricsDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathMetricsDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &metricsDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsDefinitions, nil
}

// GetMetricsDefinitionByID fetches a metrics definition by ID.
func GetMetricsDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.MetricsDefinition, error) {
	var metricsDefinition v0.MetricsDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &metricsDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsDefinition, nil
}

// GetMetricsDefinitionsByQueryString fetches metrics definitions by provided query string.
func GetMetricsDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.MetricsDefinition, error) {
	var metricsDefinitions []v0.MetricsDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathMetricsDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &metricsDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsDefinitions, nil
}

// GetMetricsDefinitionByName fetches a metrics definition by name.
func GetMetricsDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.MetricsDefinition, error) {
	var metricsDefinitions []v0.MetricsDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathMetricsDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.MetricsDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.MetricsDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(metricsDefinitions) < 1:
		return &v0.MetricsDefinition{}, errors.New(fmt.Sprintf("no metrics definition with name %s", name))
	case len(metricsDefinitions) > 1:
		return &v0.MetricsDefinition{}, errors.New(fmt.Sprintf("more than one metrics definition with name %s returned", name))
	}

	return &metricsDefinitions[0], nil
}

// CreateMetricsDefinition creates a new metrics definition.
func CreateMetricsDefinition(apiClient *http.Client, apiAddr string, metricsDefinition *v0.MetricsDefinition) (*v0.MetricsDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(metricsDefinition)
	jsonMetricsDefinition, err := util.MarshalObject(metricsDefinition)
	if err != nil {
		return metricsDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathMetricsDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonMetricsDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return metricsDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return metricsDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return metricsDefinition, nil
}

// UpdateMetricsDefinition updates a metrics definition.
func UpdateMetricsDefinition(apiClient *http.Client, apiAddr string, metricsDefinition *v0.MetricsDefinition) (*v0.MetricsDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(metricsDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	metricsDefinitionID := *metricsDefinition.ID
	payloadMetricsDefinition := *metricsDefinition
	payloadMetricsDefinition.ID = nil
	payloadMetricsDefinition.CreatedAt = nil
	payloadMetricsDefinition.UpdatedAt = nil

	jsonMetricsDefinition, err := util.MarshalObject(payloadMetricsDefinition)
	if err != nil {
		return metricsDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsDefinitions, metricsDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonMetricsDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return metricsDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return metricsDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadMetricsDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadMetricsDefinition.ID = &metricsDefinitionID
	return &payloadMetricsDefinition, nil
}

// DeleteMetricsDefinition deletes a metrics definition by ID.
func DeleteMetricsDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.MetricsDefinition, error) {
	var metricsDefinition v0.MetricsDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &metricsDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsDefinition, nil
}

// GetMetricsInstances fetches all metrics instances.
// TODO: implement pagination
func GetMetricsInstances(apiClient *http.Client, apiAddr string) (*[]v0.MetricsInstance, error) {
	var metricsInstances []v0.MetricsInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathMetricsInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &metricsInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsInstances, nil
}

// GetMetricsInstanceByID fetches a metrics instance by ID.
func GetMetricsInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.MetricsInstance, error) {
	var metricsInstance v0.MetricsInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &metricsInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsInstance, nil
}

// GetMetricsInstancesByQueryString fetches metrics instances by provided query string.
func GetMetricsInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.MetricsInstance, error) {
	var metricsInstances []v0.MetricsInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathMetricsInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &metricsInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsInstances, nil
}

// GetMetricsInstanceByName fetches a metrics instance by name.
func GetMetricsInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.MetricsInstance, error) {
	var metricsInstances []v0.MetricsInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathMetricsInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.MetricsInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.MetricsInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(metricsInstances) < 1:
		return &v0.MetricsInstance{}, errors.New(fmt.Sprintf("no metrics instance with name %s", name))
	case len(metricsInstances) > 1:
		return &v0.MetricsInstance{}, errors.New(fmt.Sprintf("more than one metrics instance with name %s returned", name))
	}

	return &metricsInstances[0], nil
}

// CreateMetricsInstance creates a new metrics instance.
func CreateMetricsInstance(apiClient *http.Client, apiAddr string, metricsInstance *v0.MetricsInstance) (*v0.MetricsInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(metricsInstance)
	jsonMetricsInstance, err := util.MarshalObject(metricsInstance)
	if err != nil {
		return metricsInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathMetricsInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonMetricsInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return metricsInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return metricsInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return metricsInstance, nil
}

// UpdateMetricsInstance updates a metrics instance.
func UpdateMetricsInstance(apiClient *http.Client, apiAddr string, metricsInstance *v0.MetricsInstance) (*v0.MetricsInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(metricsInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	metricsInstanceID := *metricsInstance.ID
	payloadMetricsInstance := *metricsInstance
	payloadMetricsInstance.ID = nil
	payloadMetricsInstance.CreatedAt = nil
	payloadMetricsInstance.UpdatedAt = nil

	jsonMetricsInstance, err := util.MarshalObject(payloadMetricsInstance)
	if err != nil {
		return metricsInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsInstances, metricsInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonMetricsInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return metricsInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return metricsInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadMetricsInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadMetricsInstance.ID = &metricsInstanceID
	return &payloadMetricsInstance, nil
}

// DeleteMetricsInstance deletes a metrics instance by ID.
func DeleteMetricsInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.MetricsInstance, error) {
	var metricsInstance v0.MetricsInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathMetricsInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &metricsInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &metricsInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&metricsInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &metricsInstance, nil
}

// GetObservabilityDashboardDefinitions fetches all observability dashboard definitions.
// TODO: implement pagination
func GetObservabilityDashboardDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.ObservabilityDashboardDefinition, error) {
	var observabilityDashboardDefinitions []v0.ObservabilityDashboardDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityDashboardDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityDashboardDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardDefinitions, nil
}

// GetObservabilityDashboardDefinitionByID fetches a observability dashboard definition by ID.
func GetObservabilityDashboardDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityDashboardDefinition, error) {
	var observabilityDashboardDefinition v0.ObservabilityDashboardDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityDashboardDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardDefinition, nil
}

// GetObservabilityDashboardDefinitionsByQueryString fetches observability dashboard definitions by provided query string.
func GetObservabilityDashboardDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ObservabilityDashboardDefinition, error) {
	var observabilityDashboardDefinitions []v0.ObservabilityDashboardDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathObservabilityDashboardDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityDashboardDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardDefinitions, nil
}

// GetObservabilityDashboardDefinitionByName fetches a observability dashboard definition by name.
func GetObservabilityDashboardDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.ObservabilityDashboardDefinition, error) {
	var observabilityDashboardDefinitions []v0.ObservabilityDashboardDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathObservabilityDashboardDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ObservabilityDashboardDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ObservabilityDashboardDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(observabilityDashboardDefinitions) < 1:
		return &v0.ObservabilityDashboardDefinition{}, errors.New(fmt.Sprintf("no observability dashboard definition with name %s", name))
	case len(observabilityDashboardDefinitions) > 1:
		return &v0.ObservabilityDashboardDefinition{}, errors.New(fmt.Sprintf("more than one observability dashboard definition with name %s returned", name))
	}

	return &observabilityDashboardDefinitions[0], nil
}

// CreateObservabilityDashboardDefinition creates a new observability dashboard definition.
func CreateObservabilityDashboardDefinition(apiClient *http.Client, apiAddr string, observabilityDashboardDefinition *v0.ObservabilityDashboardDefinition) (*v0.ObservabilityDashboardDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityDashboardDefinition)
	jsonObservabilityDashboardDefinition, err := util.MarshalObject(observabilityDashboardDefinition)
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityDashboardDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonObservabilityDashboardDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return observabilityDashboardDefinition, nil
}

// UpdateObservabilityDashboardDefinition updates a observability dashboard definition.
func UpdateObservabilityDashboardDefinition(apiClient *http.Client, apiAddr string, observabilityDashboardDefinition *v0.ObservabilityDashboardDefinition) (*v0.ObservabilityDashboardDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityDashboardDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	observabilityDashboardDefinitionID := *observabilityDashboardDefinition.ID
	payloadObservabilityDashboardDefinition := *observabilityDashboardDefinition
	payloadObservabilityDashboardDefinition.ID = nil
	payloadObservabilityDashboardDefinition.CreatedAt = nil
	payloadObservabilityDashboardDefinition.UpdatedAt = nil

	jsonObservabilityDashboardDefinition, err := util.MarshalObject(payloadObservabilityDashboardDefinition)
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardDefinitions, observabilityDashboardDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonObservabilityDashboardDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityDashboardDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadObservabilityDashboardDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadObservabilityDashboardDefinition.ID = &observabilityDashboardDefinitionID
	return &payloadObservabilityDashboardDefinition, nil
}

// DeleteObservabilityDashboardDefinition deletes a observability dashboard definition by ID.
func DeleteObservabilityDashboardDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityDashboardDefinition, error) {
	var observabilityDashboardDefinition v0.ObservabilityDashboardDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityDashboardDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardDefinition, nil
}

// GetObservabilityDashboardInstances fetches all observability dashboard instances.
// TODO: implement pagination
func GetObservabilityDashboardInstances(apiClient *http.Client, apiAddr string) (*[]v0.ObservabilityDashboardInstance, error) {
	var observabilityDashboardInstances []v0.ObservabilityDashboardInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityDashboardInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityDashboardInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardInstances, nil
}

// GetObservabilityDashboardInstanceByID fetches a observability dashboard instance by ID.
func GetObservabilityDashboardInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityDashboardInstance, error) {
	var observabilityDashboardInstance v0.ObservabilityDashboardInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityDashboardInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardInstance, nil
}

// GetObservabilityDashboardInstancesByQueryString fetches observability dashboard instances by provided query string.
func GetObservabilityDashboardInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ObservabilityDashboardInstance, error) {
	var observabilityDashboardInstances []v0.ObservabilityDashboardInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathObservabilityDashboardInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityDashboardInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardInstances, nil
}

// GetObservabilityDashboardInstanceByName fetches a observability dashboard instance by name.
func GetObservabilityDashboardInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.ObservabilityDashboardInstance, error) {
	var observabilityDashboardInstances []v0.ObservabilityDashboardInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathObservabilityDashboardInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ObservabilityDashboardInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ObservabilityDashboardInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(observabilityDashboardInstances) < 1:
		return &v0.ObservabilityDashboardInstance{}, errors.New(fmt.Sprintf("no observability dashboard instance with name %s", name))
	case len(observabilityDashboardInstances) > 1:
		return &v0.ObservabilityDashboardInstance{}, errors.New(fmt.Sprintf("more than one observability dashboard instance with name %s returned", name))
	}

	return &observabilityDashboardInstances[0], nil
}

// CreateObservabilityDashboardInstance creates a new observability dashboard instance.
func CreateObservabilityDashboardInstance(apiClient *http.Client, apiAddr string, observabilityDashboardInstance *v0.ObservabilityDashboardInstance) (*v0.ObservabilityDashboardInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityDashboardInstance)
	jsonObservabilityDashboardInstance, err := util.MarshalObject(observabilityDashboardInstance)
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityDashboardInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonObservabilityDashboardInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return observabilityDashboardInstance, nil
}

// UpdateObservabilityDashboardInstance updates a observability dashboard instance.
func UpdateObservabilityDashboardInstance(apiClient *http.Client, apiAddr string, observabilityDashboardInstance *v0.ObservabilityDashboardInstance) (*v0.ObservabilityDashboardInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityDashboardInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	observabilityDashboardInstanceID := *observabilityDashboardInstance.ID
	payloadObservabilityDashboardInstance := *observabilityDashboardInstance
	payloadObservabilityDashboardInstance.ID = nil
	payloadObservabilityDashboardInstance.CreatedAt = nil
	payloadObservabilityDashboardInstance.UpdatedAt = nil

	jsonObservabilityDashboardInstance, err := util.MarshalObject(payloadObservabilityDashboardInstance)
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardInstances, observabilityDashboardInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonObservabilityDashboardInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityDashboardInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadObservabilityDashboardInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadObservabilityDashboardInstance.ID = &observabilityDashboardInstanceID
	return &payloadObservabilityDashboardInstance, nil
}

// DeleteObservabilityDashboardInstance deletes a observability dashboard instance by ID.
func DeleteObservabilityDashboardInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityDashboardInstance, error) {
	var observabilityDashboardInstance v0.ObservabilityDashboardInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityDashboardInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityDashboardInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityDashboardInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityDashboardInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityDashboardInstance, nil
}

// GetObservabilityStackDefinitions fetches all observability stack definitions.
// TODO: implement pagination
func GetObservabilityStackDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.ObservabilityStackDefinition, error) {
	var observabilityStackDefinitions []v0.ObservabilityStackDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityStackDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityStackDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackDefinitions, nil
}

// GetObservabilityStackDefinitionByID fetches a observability stack definition by ID.
func GetObservabilityStackDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityStackDefinition, error) {
	var observabilityStackDefinition v0.ObservabilityStackDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityStackDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackDefinition, nil
}

// GetObservabilityStackDefinitionsByQueryString fetches observability stack definitions by provided query string.
func GetObservabilityStackDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ObservabilityStackDefinition, error) {
	var observabilityStackDefinitions []v0.ObservabilityStackDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathObservabilityStackDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityStackDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackDefinitions, nil
}

// GetObservabilityStackDefinitionByName fetches a observability stack definition by name.
func GetObservabilityStackDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.ObservabilityStackDefinition, error) {
	var observabilityStackDefinitions []v0.ObservabilityStackDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathObservabilityStackDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ObservabilityStackDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ObservabilityStackDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(observabilityStackDefinitions) < 1:
		return &v0.ObservabilityStackDefinition{}, errors.New(fmt.Sprintf("no observability stack definition with name %s", name))
	case len(observabilityStackDefinitions) > 1:
		return &v0.ObservabilityStackDefinition{}, errors.New(fmt.Sprintf("more than one observability stack definition with name %s returned", name))
	}

	return &observabilityStackDefinitions[0], nil
}

// CreateObservabilityStackDefinition creates a new observability stack definition.
func CreateObservabilityStackDefinition(apiClient *http.Client, apiAddr string, observabilityStackDefinition *v0.ObservabilityStackDefinition) (*v0.ObservabilityStackDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityStackDefinition)
	jsonObservabilityStackDefinition, err := util.MarshalObject(observabilityStackDefinition)
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityStackDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonObservabilityStackDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return observabilityStackDefinition, nil
}

// UpdateObservabilityStackDefinition updates a observability stack definition.
func UpdateObservabilityStackDefinition(apiClient *http.Client, apiAddr string, observabilityStackDefinition *v0.ObservabilityStackDefinition) (*v0.ObservabilityStackDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityStackDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	observabilityStackDefinitionID := *observabilityStackDefinition.ID
	payloadObservabilityStackDefinition := *observabilityStackDefinition
	payloadObservabilityStackDefinition.ID = nil
	payloadObservabilityStackDefinition.CreatedAt = nil
	payloadObservabilityStackDefinition.UpdatedAt = nil

	jsonObservabilityStackDefinition, err := util.MarshalObject(payloadObservabilityStackDefinition)
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackDefinitions, observabilityStackDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonObservabilityStackDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityStackDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadObservabilityStackDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadObservabilityStackDefinition.ID = &observabilityStackDefinitionID
	return &payloadObservabilityStackDefinition, nil
}

// DeleteObservabilityStackDefinition deletes a observability stack definition by ID.
func DeleteObservabilityStackDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityStackDefinition, error) {
	var observabilityStackDefinition v0.ObservabilityStackDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityStackDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackDefinition, nil
}

// GetObservabilityStackInstances fetches all observability stack instances.
// TODO: implement pagination
func GetObservabilityStackInstances(apiClient *http.Client, apiAddr string) (*[]v0.ObservabilityStackInstance, error) {
	var observabilityStackInstances []v0.ObservabilityStackInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityStackInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityStackInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackInstances, nil
}

// GetObservabilityStackInstanceByID fetches a observability stack instance by ID.
func GetObservabilityStackInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityStackInstance, error) {
	var observabilityStackInstance v0.ObservabilityStackInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityStackInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackInstance, nil
}

// GetObservabilityStackInstancesByQueryString fetches observability stack instances by provided query string.
func GetObservabilityStackInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ObservabilityStackInstance, error) {
	var observabilityStackInstances []v0.ObservabilityStackInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathObservabilityStackInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &observabilityStackInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackInstances, nil
}

// GetObservabilityStackInstanceByName fetches a observability stack instance by name.
func GetObservabilityStackInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.ObservabilityStackInstance, error) {
	var observabilityStackInstances []v0.ObservabilityStackInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathObservabilityStackInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.ObservabilityStackInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ObservabilityStackInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(observabilityStackInstances) < 1:
		return &v0.ObservabilityStackInstance{}, errors.New(fmt.Sprintf("no observability stack instance with name %s", name))
	case len(observabilityStackInstances) > 1:
		return &v0.ObservabilityStackInstance{}, errors.New(fmt.Sprintf("more than one observability stack instance with name %s returned", name))
	}

	return &observabilityStackInstances[0], nil
}

// CreateObservabilityStackInstance creates a new observability stack instance.
func CreateObservabilityStackInstance(apiClient *http.Client, apiAddr string, observabilityStackInstance *v0.ObservabilityStackInstance) (*v0.ObservabilityStackInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityStackInstance)
	jsonObservabilityStackInstance, err := util.MarshalObject(observabilityStackInstance)
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathObservabilityStackInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonObservabilityStackInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return observabilityStackInstance, nil
}

// UpdateObservabilityStackInstance updates a observability stack instance.
func UpdateObservabilityStackInstance(apiClient *http.Client, apiAddr string, observabilityStackInstance *v0.ObservabilityStackInstance) (*v0.ObservabilityStackInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(observabilityStackInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	observabilityStackInstanceID := *observabilityStackInstance.ID
	payloadObservabilityStackInstance := *observabilityStackInstance
	payloadObservabilityStackInstance.ID = nil
	payloadObservabilityStackInstance.CreatedAt = nil
	payloadObservabilityStackInstance.UpdatedAt = nil

	jsonObservabilityStackInstance, err := util.MarshalObject(payloadObservabilityStackInstance)
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackInstances, observabilityStackInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonObservabilityStackInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return observabilityStackInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadObservabilityStackInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadObservabilityStackInstance.ID = &observabilityStackInstanceID
	return &payloadObservabilityStackInstance, nil
}

// DeleteObservabilityStackInstance deletes a observability stack instance by ID.
func DeleteObservabilityStackInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.ObservabilityStackInstance, error) {
	var observabilityStackInstance v0.ObservabilityStackInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathObservabilityStackInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &observabilityStackInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &observabilityStackInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&observabilityStackInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &observabilityStackInstance, nil
}
