// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetOciAccounts fetches all oci accounts.
// TODO: implement pagination
func GetOciAccounts(apiClient *http.Client, apiAddr string) (*[]v0.OciAccount, error) {
	var ociAccounts []v0.OciAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciAccounts),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociAccounts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociAccounts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociAccounts, nil
}

// GetOciAccountByID fetches a oci account by ID.
func GetOciAccountByID(apiClient *http.Client, apiAddr string, id uint) (*v0.OciAccount, error) {
	var ociAccount v0.OciAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciAccounts, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociAccount, nil
}

// GetOciAccountsByQueryString fetches oci accounts by provided query string.
func GetOciAccountsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.OciAccount, error) {
	var ociAccounts []v0.OciAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathOciAccounts, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociAccounts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociAccounts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociAccounts, nil
}

// GetOciAccountByName fetches a oci account by name.
func GetOciAccountByName(apiClient *http.Client, apiAddr, name string) (*v0.OciAccount, error) {
	var ociAccounts []v0.OciAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathOciAccounts, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.OciAccount{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.OciAccount{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(ociAccounts) < 1:
		return &v0.OciAccount{}, errors.New(fmt.Sprintf("no oci account with name %s", name))
	case len(ociAccounts) > 1:
		return &v0.OciAccount{}, errors.New(fmt.Sprintf("more than one oci account with name %s returned", name))
	}

	return &ociAccounts[0], nil
}

// CreateOciAccount creates a new oci account.
func CreateOciAccount(apiClient *http.Client, apiAddr string, ociAccount *v0.OciAccount) (*v0.OciAccount, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociAccount)
	jsonOciAccount, err := util.MarshalObject(ociAccount)
	if err != nil {
		return ociAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciAccounts),
		http.MethodPost,
		bytes.NewBuffer(jsonOciAccount),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return ociAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return ociAccount, nil
}

// UpdateOciAccount updates a oci account.
func UpdateOciAccount(apiClient *http.Client, apiAddr string, ociAccount *v0.OciAccount) (*v0.OciAccount, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociAccount)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	ociAccountID := *ociAccount.ID
	payloadOciAccount := *ociAccount
	payloadOciAccount.ID = nil
	payloadOciAccount.CreatedAt = nil
	payloadOciAccount.UpdatedAt = nil

	jsonOciAccount, err := util.MarshalObject(payloadOciAccount)
	if err != nil {
		return ociAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciAccounts, ociAccountID),
		http.MethodPatch,
		bytes.NewBuffer(jsonOciAccount),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return ociAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadOciAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadOciAccount.ID = &ociAccountID
	return &payloadOciAccount, nil
}

// DeleteOciAccount deletes a oci account by ID.
func DeleteOciAccount(apiClient *http.Client, apiAddr string, id uint) (*v0.OciAccount, error) {
	var ociAccount v0.OciAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciAccounts, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociAccount, nil
}

// GetOciOkeKubernetesRuntimeDefinitions fetches all oci oke kubernetes runtime definitions.
// TODO: implement pagination
func GetOciOkeKubernetesRuntimeDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.OciOkeKubernetesRuntimeDefinition, error) {
	var ociOkeKubernetesRuntimeDefinitions []v0.OciOkeKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeDefinitions, nil
}

// GetOciOkeKubernetesRuntimeDefinitionByID fetches a oci oke kubernetes runtime definition by ID.
func GetOciOkeKubernetesRuntimeDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.OciOkeKubernetesRuntimeDefinition, error) {
	var ociOkeKubernetesRuntimeDefinition v0.OciOkeKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeDefinition, nil
}

// GetOciOkeKubernetesRuntimeDefinitionsByQueryString fetches oci oke kubernetes runtime definitions by provided query string.
func GetOciOkeKubernetesRuntimeDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.OciOkeKubernetesRuntimeDefinition, error) {
	var ociOkeKubernetesRuntimeDefinitions []v0.OciOkeKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeDefinitions, nil
}

// GetOciOkeKubernetesRuntimeDefinitionByName fetches a oci oke kubernetes runtime definition by name.
func GetOciOkeKubernetesRuntimeDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.OciOkeKubernetesRuntimeDefinition, error) {
	var ociOkeKubernetesRuntimeDefinitions []v0.OciOkeKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.OciOkeKubernetesRuntimeDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.OciOkeKubernetesRuntimeDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(ociOkeKubernetesRuntimeDefinitions) < 1:
		return &v0.OciOkeKubernetesRuntimeDefinition{}, errors.New(fmt.Sprintf("no oci oke kubernetes runtime definition with name %s", name))
	case len(ociOkeKubernetesRuntimeDefinitions) > 1:
		return &v0.OciOkeKubernetesRuntimeDefinition{}, errors.New(fmt.Sprintf("more than one oci oke kubernetes runtime definition with name %s returned", name))
	}

	return &ociOkeKubernetesRuntimeDefinitions[0], nil
}

// CreateOciOkeKubernetesRuntimeDefinition creates a new oci oke kubernetes runtime definition.
func CreateOciOkeKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, ociOkeKubernetesRuntimeDefinition *v0.OciOkeKubernetesRuntimeDefinition) (*v0.OciOkeKubernetesRuntimeDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociOkeKubernetesRuntimeDefinition)
	jsonOciOkeKubernetesRuntimeDefinition, err := util.MarshalObject(ociOkeKubernetesRuntimeDefinition)
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions),
		http.MethodPost,
		bytes.NewBuffer(jsonOciOkeKubernetesRuntimeDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return ociOkeKubernetesRuntimeDefinition, nil
}

// UpdateOciOkeKubernetesRuntimeDefinition updates a oci oke kubernetes runtime definition.
func UpdateOciOkeKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, ociOkeKubernetesRuntimeDefinition *v0.OciOkeKubernetesRuntimeDefinition) (*v0.OciOkeKubernetesRuntimeDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociOkeKubernetesRuntimeDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	ociOkeKubernetesRuntimeDefinitionID := *ociOkeKubernetesRuntimeDefinition.ID
	payloadOciOkeKubernetesRuntimeDefinition := *ociOkeKubernetesRuntimeDefinition
	payloadOciOkeKubernetesRuntimeDefinition.ID = nil
	payloadOciOkeKubernetesRuntimeDefinition.CreatedAt = nil
	payloadOciOkeKubernetesRuntimeDefinition.UpdatedAt = nil

	jsonOciOkeKubernetesRuntimeDefinition, err := util.MarshalObject(payloadOciOkeKubernetesRuntimeDefinition)
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions, ociOkeKubernetesRuntimeDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonOciOkeKubernetesRuntimeDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadOciOkeKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadOciOkeKubernetesRuntimeDefinition.ID = &ociOkeKubernetesRuntimeDefinitionID
	return &payloadOciOkeKubernetesRuntimeDefinition, nil
}

// DeleteOciOkeKubernetesRuntimeDefinition deletes a oci oke kubernetes runtime definition by ID.
func DeleteOciOkeKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.OciOkeKubernetesRuntimeDefinition, error) {
	var ociOkeKubernetesRuntimeDefinition v0.OciOkeKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeDefinitions, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociOkeKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeDefinition, nil
}

// GetOciOkeKubernetesRuntimeInstances fetches all oci oke kubernetes runtime instances.
// TODO: implement pagination
func GetOciOkeKubernetesRuntimeInstances(apiClient *http.Client, apiAddr string) (*[]v0.OciOkeKubernetesRuntimeInstance, error) {
	var ociOkeKubernetesRuntimeInstances []v0.OciOkeKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeInstances, nil
}

// GetOciOkeKubernetesRuntimeInstanceByID fetches a oci oke kubernetes runtime instance by ID.
func GetOciOkeKubernetesRuntimeInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.OciOkeKubernetesRuntimeInstance, error) {
	var ociOkeKubernetesRuntimeInstance v0.OciOkeKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeInstance, nil
}

// GetOciOkeKubernetesRuntimeInstancesByQueryString fetches oci oke kubernetes runtime instances by provided query string.
func GetOciOkeKubernetesRuntimeInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.OciOkeKubernetesRuntimeInstance, error) {
	var ociOkeKubernetesRuntimeInstances []v0.OciOkeKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?%s", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeInstances, nil
}

// GetOciOkeKubernetesRuntimeInstanceByName fetches a oci oke kubernetes runtime instance by name.
func GetOciOkeKubernetesRuntimeInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.OciOkeKubernetesRuntimeInstance, error) {
	var ociOkeKubernetesRuntimeInstances []v0.OciOkeKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s?name=%s", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.OciOkeKubernetesRuntimeInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.OciOkeKubernetesRuntimeInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(ociOkeKubernetesRuntimeInstances) < 1:
		return &v0.OciOkeKubernetesRuntimeInstance{}, errors.New(fmt.Sprintf("no oci oke kubernetes runtime instance with name %s", name))
	case len(ociOkeKubernetesRuntimeInstances) > 1:
		return &v0.OciOkeKubernetesRuntimeInstance{}, errors.New(fmt.Sprintf("more than one oci oke kubernetes runtime instance with name %s returned", name))
	}

	return &ociOkeKubernetesRuntimeInstances[0], nil
}

// CreateOciOkeKubernetesRuntimeInstance creates a new oci oke kubernetes runtime instance.
func CreateOciOkeKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, ociOkeKubernetesRuntimeInstance *v0.OciOkeKubernetesRuntimeInstance) (*v0.OciOkeKubernetesRuntimeInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociOkeKubernetesRuntimeInstance)
	jsonOciOkeKubernetesRuntimeInstance, err := util.MarshalObject(ociOkeKubernetesRuntimeInstance)
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances),
		http.MethodPost,
		bytes.NewBuffer(jsonOciOkeKubernetesRuntimeInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return ociOkeKubernetesRuntimeInstance, nil
}

// UpdateOciOkeKubernetesRuntimeInstance updates a oci oke kubernetes runtime instance.
func UpdateOciOkeKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, ociOkeKubernetesRuntimeInstance *v0.OciOkeKubernetesRuntimeInstance) (*v0.OciOkeKubernetesRuntimeInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(ociOkeKubernetesRuntimeInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	ociOkeKubernetesRuntimeInstanceID := *ociOkeKubernetesRuntimeInstance.ID
	payloadOciOkeKubernetesRuntimeInstance := *ociOkeKubernetesRuntimeInstance
	payloadOciOkeKubernetesRuntimeInstance.ID = nil
	payloadOciOkeKubernetesRuntimeInstance.CreatedAt = nil
	payloadOciOkeKubernetesRuntimeInstance.UpdatedAt = nil

	jsonOciOkeKubernetesRuntimeInstance, err := util.MarshalObject(payloadOciOkeKubernetesRuntimeInstance)
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances, ociOkeKubernetesRuntimeInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonOciOkeKubernetesRuntimeInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadOciOkeKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadOciOkeKubernetesRuntimeInstance.ID = &ociOkeKubernetesRuntimeInstanceID
	return &payloadOciOkeKubernetesRuntimeInstance, nil
}

// DeleteOciOkeKubernetesRuntimeInstance deletes a oci oke kubernetes runtime instance by ID.
func DeleteOciOkeKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.OciOkeKubernetesRuntimeInstance, error) {
	var ociOkeKubernetesRuntimeInstance v0.OciOkeKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s%s/%d", apiAddr, v0.PathOciOkeKubernetesRuntimeInstances, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &ociOkeKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &ociOkeKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&ociOkeKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &ociOkeKubernetesRuntimeInstance, nil
}
