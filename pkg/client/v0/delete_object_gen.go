// generated by 'threeport-codegen api-version' - do not edit

package v0

import (
	"fmt"
	"net/http"
)

// DeleteObjectByTypeAndID deletes an instance given a string representation of its type and ID.
func DeleteObjectByTypeAndID(apiClient *http.Client, apiAddr string, objectType string, id uint) error {

	switch objectType {
	case "v0.Profile":
		if _, err := DeleteProfile(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete Profile: %w", err)
		}
	case "v0.Tier":
		if _, err := DeleteTier(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete Tier: %w", err)
		}
	case "v0.AwsAccount":
		if _, err := DeleteAwsAccount(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsAccount: %w", err)
		}
	case "v0.AwsEksKubernetesRuntimeDefinition":
		if _, err := DeleteAwsEksKubernetesRuntimeDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsEksKubernetesRuntimeDefinition: %w", err)
		}
	case "v0.AwsEksKubernetesRuntimeInstance":
		if _, err := DeleteAwsEksKubernetesRuntimeInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsEksKubernetesRuntimeInstance: %w", err)
		}
	case "v0.AwsRelationalDatabaseDefinition":
		if _, err := DeleteAwsRelationalDatabaseDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsRelationalDatabaseDefinition: %w", err)
		}
	case "v0.AwsRelationalDatabaseInstance":
		if _, err := DeleteAwsRelationalDatabaseInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsRelationalDatabaseInstance: %w", err)
		}
	case "v0.AwsObjectStorageBucketDefinition":
		if _, err := DeleteAwsObjectStorageBucketDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsObjectStorageBucketDefinition: %w", err)
		}
	case "v0.AwsObjectStorageBucketInstance":
		if _, err := DeleteAwsObjectStorageBucketInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AwsObjectStorageBucketInstance: %w", err)
		}
	case "v0.ForwardProxyDefinition":
		if _, err := DeleteForwardProxyDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ForwardProxyDefinition: %w", err)
		}
	case "v0.ForwardProxyInstance":
		if _, err := DeleteForwardProxyInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete ForwardProxyInstance: %w", err)
		}
	case "v0.GatewayDefinition":
		if _, err := DeleteGatewayDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete GatewayDefinition: %w", err)
		}
	case "v0.GatewayInstance":
		if _, err := DeleteGatewayInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete GatewayInstance: %w", err)
		}
	case "v0.DomainNameDefinition":
		if _, err := DeleteDomainNameDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete DomainNameDefinition: %w", err)
		}
	case "v0.DomainNameInstance":
		if _, err := DeleteDomainNameInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete DomainNameInstance: %w", err)
		}
	case "v0.KubernetesRuntimeDefinition":
		if _, err := DeleteKubernetesRuntimeDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete KubernetesRuntimeDefinition: %w", err)
		}
	case "v0.KubernetesRuntimeInstance":
		if _, err := DeleteKubernetesRuntimeInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete KubernetesRuntimeInstance: %w", err)
		}
	case "v0.LogBackend":
		if _, err := DeleteLogBackend(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogBackend: %w", err)
		}
	case "v0.LogStorageDefinition":
		if _, err := DeleteLogStorageDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogStorageDefinition: %w", err)
		}
	case "v0.LogStorageInstance":
		if _, err := DeleteLogStorageInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete LogStorageInstance: %w", err)
		}
	case "v0.WorkloadDefinition":
		if _, err := DeleteWorkloadDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadDefinition: %w", err)
		}
	case "v0.WorkloadResourceDefinition":
		if _, err := DeleteWorkloadResourceDefinition(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadResourceDefinition: %w", err)
		}
	case "v0.WorkloadInstance":
		if _, err := DeleteWorkloadInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadInstance: %w", err)
		}
	case "v0.AttachedObjectReference":
		if _, err := DeleteAttachedObjectReference(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete AttachedObjectReference: %w", err)
		}
	case "v0.WorkloadResourceInstance":
		if _, err := DeleteWorkloadResourceInstance(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadResourceInstance: %w", err)
		}
	case "v0.WorkloadEvent":
		if _, err := DeleteWorkloadEvent(apiClient, apiAddr, id); err != nil {
			return fmt.Errorf("failed to delete WorkloadEvent: %w", err)
		}

	}

	return nil
}
