// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetForwardProxyDefinitions fetches all forward proxy definitions.
// TODO: implement pagination
func GetForwardProxyDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinitions []v0.ForwardProxyDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &forwardProxyDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyDefinitions, nil
}

// GetForwardProxyDefinitionByID fetches a forward proxy definition by ID.
func GetForwardProxyDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinition v0.ForwardProxyDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyDefinition, nil
}

// GetForwardProxyDefinitionsByQueryString fetches forward proxy definitions by provided query string.
func GetForwardProxyDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinitions []v0.ForwardProxyDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &forwardProxyDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyDefinitions, nil
}

// GetForwardProxyDefinitionByName fetches a forward proxy definition by name.
func GetForwardProxyDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinitions []v0.ForwardProxyDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ForwardProxyDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ForwardProxyDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(forwardProxyDefinitions) < 1:
		return &v0.ForwardProxyDefinition{}, errors.New(fmt.Sprintf("no forward proxy definition with name %s", name))
	case len(forwardProxyDefinitions) > 1:
		return &v0.ForwardProxyDefinition{}, errors.New(fmt.Sprintf("more than one forward proxy definition with name %s returned", name))
	}

	return &forwardProxyDefinitions[0], nil
}

// CreateForwardProxyDefinition creates a new forward proxy definition.
func CreateForwardProxyDefinition(apiClient *http.Client, apiAddr string, forwardProxyDefinition *v0.ForwardProxyDefinition) (*v0.ForwardProxyDefinition, error) {
	ReplaceAssociatedObjectsWithNil(forwardProxyDefinition)
	jsonForwardProxyDefinition, err := util.MarshalObject(forwardProxyDefinition)
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonForwardProxyDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return forwardProxyDefinition, nil
}

// UpdateForwardProxyDefinition updates a forward proxy definition.
func UpdateForwardProxyDefinition(apiClient *http.Client, apiAddr string, forwardProxyDefinition *v0.ForwardProxyDefinition) (*v0.ForwardProxyDefinition, error) {
	ReplaceAssociatedObjectsWithNil(forwardProxyDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	forwardProxyDefinitionID := *forwardProxyDefinition.ID
	payloadForwardProxyDefinition := *forwardProxyDefinition
	payloadForwardProxyDefinition.ID = nil
	payloadForwardProxyDefinition.CreatedAt = nil
	payloadForwardProxyDefinition.UpdatedAt = nil

	jsonForwardProxyDefinition, err := util.MarshalObject(payloadForwardProxyDefinition)
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions/%d", apiAddr, ApiVersion, forwardProxyDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonForwardProxyDefinition),
		http.StatusOK,
	)
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadForwardProxyDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadForwardProxyDefinition.ID = &forwardProxyDefinitionID
	return &payloadForwardProxyDefinition, nil
}

// DeleteForwardProxyDefinition deletes a forward proxy definition by ID.
func DeleteForwardProxyDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinition v0.ForwardProxyDefinition

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-definitions/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyDefinition, nil
}

// GetForwardProxyInstances fetches all forward proxy instances.
// TODO: implement pagination
func GetForwardProxyInstances(apiClient *http.Client, apiAddr string) (*[]v0.ForwardProxyInstance, error) {
	var forwardProxyInstances []v0.ForwardProxyInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &forwardProxyInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyInstances, nil
}

// GetForwardProxyInstanceByID fetches a forward proxy instance by ID.
func GetForwardProxyInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.ForwardProxyInstance, error) {
	var forwardProxyInstance v0.ForwardProxyInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyInstance, nil
}

// GetForwardProxyInstancesByQueryString fetches forward proxy instances by provided query string.
func GetForwardProxyInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.ForwardProxyInstance, error) {
	var forwardProxyInstances []v0.ForwardProxyInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &forwardProxyInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyInstances, nil
}

// GetForwardProxyInstanceByName fetches a forward proxy instance by name.
func GetForwardProxyInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.ForwardProxyInstance, error) {
	var forwardProxyInstances []v0.ForwardProxyInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ForwardProxyInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ForwardProxyInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(forwardProxyInstances) < 1:
		return &v0.ForwardProxyInstance{}, errors.New(fmt.Sprintf("no forward proxy instance with name %s", name))
	case len(forwardProxyInstances) > 1:
		return &v0.ForwardProxyInstance{}, errors.New(fmt.Sprintf("more than one forward proxy instance with name %s returned", name))
	}

	return &forwardProxyInstances[0], nil
}

// CreateForwardProxyInstance creates a new forward proxy instance.
func CreateForwardProxyInstance(apiClient *http.Client, apiAddr string, forwardProxyInstance *v0.ForwardProxyInstance) (*v0.ForwardProxyInstance, error) {
	ReplaceAssociatedObjectsWithNil(forwardProxyInstance)
	jsonForwardProxyInstance, err := util.MarshalObject(forwardProxyInstance)
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonForwardProxyInstance),
		http.StatusCreated,
	)
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return forwardProxyInstance, nil
}

// UpdateForwardProxyInstance updates a forward proxy instance.
func UpdateForwardProxyInstance(apiClient *http.Client, apiAddr string, forwardProxyInstance *v0.ForwardProxyInstance) (*v0.ForwardProxyInstance, error) {
	ReplaceAssociatedObjectsWithNil(forwardProxyInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	forwardProxyInstanceID := *forwardProxyInstance.ID
	payloadForwardProxyInstance := *forwardProxyInstance
	payloadForwardProxyInstance.ID = nil
	payloadForwardProxyInstance.CreatedAt = nil
	payloadForwardProxyInstance.UpdatedAt = nil

	jsonForwardProxyInstance, err := util.MarshalObject(payloadForwardProxyInstance)
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances/%d", apiAddr, ApiVersion, forwardProxyInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonForwardProxyInstance),
		http.StatusOK,
	)
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadForwardProxyInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadForwardProxyInstance.ID = &forwardProxyInstanceID
	return &payloadForwardProxyInstance, nil
}

// DeleteForwardProxyInstance deletes a forward proxy instance by ID.
func DeleteForwardProxyInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.ForwardProxyInstance, error) {
	var forwardProxyInstance v0.ForwardProxyInstance

	response, err := GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/forward-proxy-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&forwardProxyInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &forwardProxyInstance, nil
}
