// generated by 'threeport-sdk gen' for API client boilerplate' - do not edit

package v1

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v1 "github.com/threeport/threeport/pkg/api/v1"
	client_v0 "github.com/threeport/threeport/pkg/client/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetWorkloadInstances fetches all workload instances.
// TODO: implement pagination
func GetWorkloadInstances(apiClient *http.Client, apiAddr string) (*[]v1.WorkloadInstance, error) {
	var workloadInstances []v1.WorkloadInstance

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstances, nil
}

// GetWorkloadInstanceByID fetches a workload instance by ID.
func GetWorkloadInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v1.WorkloadInstance, error) {
	var workloadInstance v1.WorkloadInstance

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}

// GetWorkloadInstancesByQueryString fetches workload instances by provided query string.
func GetWorkloadInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v1.WorkloadInstance, error) {
	var workloadInstances []v1.WorkloadInstance

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances?%s", apiAddr, ApiVersion, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &workloadInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstances, nil
}

// GetWorkloadInstanceByName fetches a workload instance by name.
func GetWorkloadInstanceByName(apiClient *http.Client, apiAddr, name string) (*v1.WorkloadInstance, error) {
	var workloadInstances []v1.WorkloadInstance

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances?name=%s", apiAddr, ApiVersion, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v1.WorkloadInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v1.WorkloadInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(workloadInstances) < 1:
		return &v1.WorkloadInstance{}, client_v0.ErrObjectNotFound
	case len(workloadInstances) > 1:
		return &v1.WorkloadInstance{}, errors.New(fmt.Sprintf("more than one workload instance with name %s returned", name))
	}

	return &workloadInstances[0], nil
}

// CreateWorkloadInstance creates a new workload instance.
func CreateWorkloadInstance(apiClient *http.Client, apiAddr string, workloadInstance *v1.WorkloadInstance) (*v1.WorkloadInstance, error) {
	client_v0.ReplaceAssociatedObjectsWithNil(workloadInstance)
	jsonWorkloadInstance, err := util.MarshalObject(workloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances", apiAddr, ApiVersion),
		http.MethodPost,
		bytes.NewBuffer(jsonWorkloadInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return workloadInstance, nil
}

// UpdateWorkloadInstance updates a workload instance.
func UpdateWorkloadInstance(apiClient *http.Client, apiAddr string, workloadInstance *v1.WorkloadInstance) (*v1.WorkloadInstance, error) {
	client_v0.ReplaceAssociatedObjectsWithNil(workloadInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	workloadInstanceID := *workloadInstance.ID
	payloadWorkloadInstance := *workloadInstance
	payloadWorkloadInstance.ID = nil
	payloadWorkloadInstance.CreatedAt = nil
	payloadWorkloadInstance.UpdatedAt = nil

	jsonWorkloadInstance, err := util.MarshalObject(payloadWorkloadInstance)
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, workloadInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonWorkloadInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadWorkloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadWorkloadInstance.ID = &workloadInstanceID
	return &payloadWorkloadInstance, nil
}

// DeleteWorkloadInstance deletes a workload instance by ID.
func DeleteWorkloadInstance(apiClient *http.Client, apiAddr string, id uint) (*v1.WorkloadInstance, error) {
	var workloadInstance v1.WorkloadInstance

	response, err := client_v0.GetResponse(
		apiClient,
		fmt.Sprintf("%s/%s/workload-instances/%d", apiAddr, ApiVersion, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &workloadInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &workloadInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&workloadInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &workloadInstance, nil
}
