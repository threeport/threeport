// generated by 'threeport-codegen api-model' - do not edit

package handlers

import (
	"errors"
	"fmt"
	echo "github.com/labstack/echo/v4"
	api "github.com/threeport/threeport/pkg/api"
	iapi "github.com/threeport/threeport/pkg/api-server/v0"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	gorm "gorm.io/gorm"
	"net/http"
	"time"
)

///////////////////////////////////////////////////////////////////////////////
// AwsAccount
///////////////////////////////////////////////////////////////////////////////

// @Summary GetAwsAccountVersions gets the supported versions for the aws account API.
// @Description Get the supported API versions for aws accounts.
// @ID awsAccount-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /aws-accounts/versions [get]
func (h Handler) GetAwsAccountVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeAwsAccount)])
}

// @Summary adds a new aws account.
// @Description Add a new aws account to the Threeport database.
// @ID add-awsAccount
// @Accept json
// @Produce json
// @Param awsAccount body v0.AwsAccount true "AwsAccount object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts [post]
func (h Handler) AddAwsAccount(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	var awsAccount v0.AwsAccount

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&awsAccount); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, awsAccount, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingAwsAccount v0.AwsAccount
	nameUsed := true
	result := h.DB.Where("name = ?", awsAccount.Name).First(&existingAwsAccount)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return iapi.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&awsAccount); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsAccount)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all aws accounts.
// @Description Get all aws accounts from the Threeport database.
// @ID get-awsAccounts
// @Accept json
// @Produce json
// @Param name query string false "aws account search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts [get]
func (h Handler) GetAwsAccounts(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.AwsAccount
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.AwsAccount{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.AwsAccount{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a aws account.
// @Description Get a particular aws account from the database.
// @ID get-awsAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts/{id} [get]
func (h Handler) GetAwsAccount(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	awsAccountID := c.Param("id")
	var awsAccount v0.AwsAccount
	if result := h.DB.First(&awsAccount, awsAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsAccount)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing aws account.
// @Description Update a aws account in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating aws account objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-awsAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsAccount body v0.AwsAccount true "AwsAccount object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts/{id} [patch]
func (h Handler) UpdateAwsAccount(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	awsAccountID := c.Param("id")
	var existingAwsAccount v0.AwsAccount
	if result := h.DB.First(&existingAwsAccount, awsAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsAccount v0.AwsAccount
	if err := c.Bind(&updatedAwsAccount); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingAwsAccount).Updates(updatedAwsAccount); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsAccount)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing aws account by replacing the entire object.
// @Description Replace a aws account in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating aws account objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-awsAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsAccount body v0.AwsAccount true "AwsAccount object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts/{id} [put]
func (h Handler) ReplaceAwsAccount(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	awsAccountID := c.Param("id")
	var existingAwsAccount v0.AwsAccount
	if result := h.DB.First(&existingAwsAccount, awsAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsAccount v0.AwsAccount
	if err := c.Bind(&updatedAwsAccount); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedAwsAccount, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedAwsAccount.ID = existingAwsAccount.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedAwsAccount); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingAwsAccount, awsAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsAccount)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a aws account.
// @Description Delete a aws account by ID from the database.
// @ID delete-awsAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-accounts/{id} [delete]
func (h Handler) DeleteAwsAccount(c echo.Context) error {
	objectType := v0.ObjectTypeAwsAccount
	awsAccountID := c.Param("id")
	var awsAccount v0.AwsAccount
	if result := h.DB.First(&awsAccount, awsAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// delete object
	if result := h.DB.Delete(&awsAccount); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsAccount)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// AwsEksKubernetesRuntimeDefinition
///////////////////////////////////////////////////////////////////////////////

// @Summary GetAwsEksKubernetesRuntimeDefinitionVersions gets the supported versions for the aws eks kubernetes runtime definition API.
// @Description Get the supported API versions for aws eks kubernetes runtime definitions.
// @ID awsEksKubernetesRuntimeDefinition-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /aws-eks-kubernetes-runtime-definitions/versions [get]
func (h Handler) GetAwsEksKubernetesRuntimeDefinitionVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeAwsEksKubernetesRuntimeDefinition)])
}

// @Summary adds a new aws eks kubernetes runtime definition.
// @Description Add a new aws eks kubernetes runtime definition to the Threeport database.
// @ID add-awsEksKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param awsEksKubernetesRuntimeDefinition body v0.AwsEksKubernetesRuntimeDefinition true "AwsEksKubernetesRuntimeDefinition object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions [post]
func (h Handler) AddAwsEksKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	var awsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&awsEksKubernetesRuntimeDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, awsEksKubernetesRuntimeDefinition, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingAwsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	nameUsed := true
	result := h.DB.Where("name = ?", awsEksKubernetesRuntimeDefinition.Name).First(&existingAwsEksKubernetesRuntimeDefinition)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return iapi.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&awsEksKubernetesRuntimeDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all aws eks kubernetes runtime definitions.
// @Description Get all aws eks kubernetes runtime definitions from the Threeport database.
// @ID get-awsEksKubernetesRuntimeDefinitions
// @Accept json
// @Produce json
// @Param name query string false "aws eks kubernetes runtime definition search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions [get]
func (h Handler) GetAwsEksKubernetesRuntimeDefinitions(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.AwsEksKubernetesRuntimeDefinition
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.AwsEksKubernetesRuntimeDefinition{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.AwsEksKubernetesRuntimeDefinition{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a aws eks kubernetes runtime definition.
// @Description Get a particular aws eks kubernetes runtime definition from the database.
// @ID get-awsEksKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions/{id} [get]
func (h Handler) GetAwsEksKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	awsEksKubernetesRuntimeDefinitionID := c.Param("id")
	var awsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if result := h.DB.First(&awsEksKubernetesRuntimeDefinition, awsEksKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing aws eks kubernetes runtime definition.
// @Description Update a aws eks kubernetes runtime definition in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating aws eks kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-awsEksKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsEksKubernetesRuntimeDefinition body v0.AwsEksKubernetesRuntimeDefinition true "AwsEksKubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions/{id} [patch]
func (h Handler) UpdateAwsEksKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	awsEksKubernetesRuntimeDefinitionID := c.Param("id")
	var existingAwsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeDefinition, awsEksKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if err := c.Bind(&updatedAwsEksKubernetesRuntimeDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingAwsEksKubernetesRuntimeDefinition).Updates(updatedAwsEksKubernetesRuntimeDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsEksKubernetesRuntimeDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing aws eks kubernetes runtime definition by replacing the entire object.
// @Description Replace a aws eks kubernetes runtime definition in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating aws eks kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-awsEksKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsEksKubernetesRuntimeDefinition body v0.AwsEksKubernetesRuntimeDefinition true "AwsEksKubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions/{id} [put]
func (h Handler) ReplaceAwsEksKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	awsEksKubernetesRuntimeDefinitionID := c.Param("id")
	var existingAwsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeDefinition, awsEksKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if err := c.Bind(&updatedAwsEksKubernetesRuntimeDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedAwsEksKubernetesRuntimeDefinition, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedAwsEksKubernetesRuntimeDefinition.ID = existingAwsEksKubernetesRuntimeDefinition.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedAwsEksKubernetesRuntimeDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeDefinition, awsEksKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsEksKubernetesRuntimeDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a aws eks kubernetes runtime definition.
// @Description Delete a aws eks kubernetes runtime definition by ID from the database.
// @ID delete-awsEksKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-definitions/{id} [delete]
func (h Handler) DeleteAwsEksKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeDefinition
	awsEksKubernetesRuntimeDefinitionID := c.Param("id")
	var awsEksKubernetesRuntimeDefinition v0.AwsEksKubernetesRuntimeDefinition
	if result := h.DB.Preload("AwsEksKubernetesRuntimeInstances").First(&awsEksKubernetesRuntimeDefinition, awsEksKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check to make sure no dependent instances exist for this definition
	if len(awsEksKubernetesRuntimeDefinition.AwsEksKubernetesRuntimeInstances) != 0 {
		err := errors.New("aws eks kubernetes runtime definition has related aws eks kubernetes runtime instances - cannot be deleted")
		return iapi.ResponseStatus409(c, nil, err, objectType)
	}

	// delete object
	if result := h.DB.Delete(&awsEksKubernetesRuntimeDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// AwsEksKubernetesRuntimeInstance
///////////////////////////////////////////////////////////////////////////////

// @Summary GetAwsEksKubernetesRuntimeInstanceVersions gets the supported versions for the aws eks kubernetes runtime instance API.
// @Description Get the supported API versions for aws eks kubernetes runtime instances.
// @ID awsEksKubernetesRuntimeInstance-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /aws-eks-kubernetes-runtime-instances/versions [get]
func (h Handler) GetAwsEksKubernetesRuntimeInstanceVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeAwsEksKubernetesRuntimeInstance)])
}

// @Summary adds a new aws eks kubernetes runtime instance.
// @Description Add a new aws eks kubernetes runtime instance to the Threeport database.
// @ID add-awsEksKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param awsEksKubernetesRuntimeInstance body v0.AwsEksKubernetesRuntimeInstance true "AwsEksKubernetesRuntimeInstance object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances [post]
func (h Handler) AddAwsEksKubernetesRuntimeInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	var awsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&awsEksKubernetesRuntimeInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, awsEksKubernetesRuntimeInstance, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingAwsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	nameUsed := true
	result := h.DB.Where("name = ?", awsEksKubernetesRuntimeInstance.Name).First(&existingAwsEksKubernetesRuntimeInstance)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return iapi.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&awsEksKubernetesRuntimeInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*awsEksKubernetesRuntimeInstance.Reconciled {
		notifPayload, err := awsEksKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsEksKubernetesRuntimeInstanceCreateSubject, *notifPayload)
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all aws eks kubernetes runtime instances.
// @Description Get all aws eks kubernetes runtime instances from the Threeport database.
// @ID get-awsEksKubernetesRuntimeInstances
// @Accept json
// @Produce json
// @Param name query string false "aws eks kubernetes runtime instance search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances [get]
func (h Handler) GetAwsEksKubernetesRuntimeInstances(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.AwsEksKubernetesRuntimeInstance
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.AwsEksKubernetesRuntimeInstance{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.AwsEksKubernetesRuntimeInstance{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a aws eks kubernetes runtime instance.
// @Description Get a particular aws eks kubernetes runtime instance from the database.
// @ID get-awsEksKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances/{id} [get]
func (h Handler) GetAwsEksKubernetesRuntimeInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	awsEksKubernetesRuntimeInstanceID := c.Param("id")
	var awsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if result := h.DB.First(&awsEksKubernetesRuntimeInstance, awsEksKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing aws eks kubernetes runtime instance.
// @Description Update a aws eks kubernetes runtime instance in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating aws eks kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-awsEksKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsEksKubernetesRuntimeInstance body v0.AwsEksKubernetesRuntimeInstance true "AwsEksKubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances/{id} [patch]
func (h Handler) UpdateAwsEksKubernetesRuntimeInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	awsEksKubernetesRuntimeInstanceID := c.Param("id")
	var existingAwsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeInstance, awsEksKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if err := c.Bind(&updatedAwsEksKubernetesRuntimeInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingAwsEksKubernetesRuntimeInstance).Updates(updatedAwsEksKubernetesRuntimeInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingAwsEksKubernetesRuntimeInstance.Reconciled {
		notifPayload, err := existingAwsEksKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsEksKubernetesRuntimeInstanceUpdateSubject, *notifPayload)
	}

	response, err := v0.CreateResponse(nil, existingAwsEksKubernetesRuntimeInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing aws eks kubernetes runtime instance by replacing the entire object.
// @Description Replace a aws eks kubernetes runtime instance in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating aws eks kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-awsEksKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsEksKubernetesRuntimeInstance body v0.AwsEksKubernetesRuntimeInstance true "AwsEksKubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances/{id} [put]
func (h Handler) ReplaceAwsEksKubernetesRuntimeInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	awsEksKubernetesRuntimeInstanceID := c.Param("id")
	var existingAwsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeInstance, awsEksKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if err := c.Bind(&updatedAwsEksKubernetesRuntimeInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedAwsEksKubernetesRuntimeInstance, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedAwsEksKubernetesRuntimeInstance.ID = existingAwsEksKubernetesRuntimeInstance.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedAwsEksKubernetesRuntimeInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingAwsEksKubernetesRuntimeInstance, awsEksKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsEksKubernetesRuntimeInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a aws eks kubernetes runtime instance.
// @Description Delete a aws eks kubernetes runtime instance by ID from the database.
// @ID delete-awsEksKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-eks-kubernetes-runtime-instances/{id} [delete]
func (h Handler) DeleteAwsEksKubernetesRuntimeInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsEksKubernetesRuntimeInstance
	awsEksKubernetesRuntimeInstanceID := c.Param("id")
	var awsEksKubernetesRuntimeInstance v0.AwsEksKubernetesRuntimeInstance
	if result := h.DB.First(&awsEksKubernetesRuntimeInstance, awsEksKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if awsEksKubernetesRuntimeInstance.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledAwsEksKubernetesRuntimeInstance := v0.AwsEksKubernetesRuntimeInstance{
			Reconciliation: v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.DB.Model(&awsEksKubernetesRuntimeInstance).Updates(scheduledAwsEksKubernetesRuntimeInstance); result.Error != nil {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := awsEksKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsEksKubernetesRuntimeInstanceDeleteSubject, *notifPayload)
	} else {
		if awsEksKubernetesRuntimeInstance.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return iapi.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*awsEksKubernetesRuntimeInstance.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.DB.Delete(&awsEksKubernetesRuntimeInstance); result.Error != nil {
				return iapi.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := v0.CreateResponse(nil, awsEksKubernetesRuntimeInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// AwsRelationalDatabaseDefinition
///////////////////////////////////////////////////////////////////////////////

// @Summary GetAwsRelationalDatabaseDefinitionVersions gets the supported versions for the aws relational database definition API.
// @Description Get the supported API versions for aws relational database definitions.
// @ID awsRelationalDatabaseDefinition-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /aws-relational-database-definitions/versions [get]
func (h Handler) GetAwsRelationalDatabaseDefinitionVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeAwsRelationalDatabaseDefinition)])
}

// @Summary adds a new aws relational database definition.
// @Description Add a new aws relational database definition to the Threeport database.
// @ID add-awsRelationalDatabaseDefinition
// @Accept json
// @Produce json
// @Param awsRelationalDatabaseDefinition body v0.AwsRelationalDatabaseDefinition true "AwsRelationalDatabaseDefinition object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions [post]
func (h Handler) AddAwsRelationalDatabaseDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	var awsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&awsRelationalDatabaseDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, awsRelationalDatabaseDefinition, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingAwsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	nameUsed := true
	result := h.DB.Where("name = ?", awsRelationalDatabaseDefinition.Name).First(&existingAwsRelationalDatabaseDefinition)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return iapi.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&awsRelationalDatabaseDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all aws relational database definitions.
// @Description Get all aws relational database definitions from the Threeport database.
// @ID get-awsRelationalDatabaseDefinitions
// @Accept json
// @Produce json
// @Param name query string false "aws relational database definition search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions [get]
func (h Handler) GetAwsRelationalDatabaseDefinitions(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.AwsRelationalDatabaseDefinition
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.AwsRelationalDatabaseDefinition{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.AwsRelationalDatabaseDefinition{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a aws relational database definition.
// @Description Get a particular aws relational database definition from the database.
// @ID get-awsRelationalDatabaseDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions/{id} [get]
func (h Handler) GetAwsRelationalDatabaseDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	awsRelationalDatabaseDefinitionID := c.Param("id")
	var awsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if result := h.DB.First(&awsRelationalDatabaseDefinition, awsRelationalDatabaseDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing aws relational database definition.
// @Description Update a aws relational database definition in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating aws relational database definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-awsRelationalDatabaseDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsRelationalDatabaseDefinition body v0.AwsRelationalDatabaseDefinition true "AwsRelationalDatabaseDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions/{id} [patch]
func (h Handler) UpdateAwsRelationalDatabaseDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	awsRelationalDatabaseDefinitionID := c.Param("id")
	var existingAwsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if result := h.DB.First(&existingAwsRelationalDatabaseDefinition, awsRelationalDatabaseDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if err := c.Bind(&updatedAwsRelationalDatabaseDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingAwsRelationalDatabaseDefinition).Updates(updatedAwsRelationalDatabaseDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsRelationalDatabaseDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing aws relational database definition by replacing the entire object.
// @Description Replace a aws relational database definition in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating aws relational database definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-awsRelationalDatabaseDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsRelationalDatabaseDefinition body v0.AwsRelationalDatabaseDefinition true "AwsRelationalDatabaseDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions/{id} [put]
func (h Handler) ReplaceAwsRelationalDatabaseDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	awsRelationalDatabaseDefinitionID := c.Param("id")
	var existingAwsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if result := h.DB.First(&existingAwsRelationalDatabaseDefinition, awsRelationalDatabaseDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if err := c.Bind(&updatedAwsRelationalDatabaseDefinition); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedAwsRelationalDatabaseDefinition, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedAwsRelationalDatabaseDefinition.ID = existingAwsRelationalDatabaseDefinition.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedAwsRelationalDatabaseDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingAwsRelationalDatabaseDefinition, awsRelationalDatabaseDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsRelationalDatabaseDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a aws relational database definition.
// @Description Delete a aws relational database definition by ID from the database.
// @ID delete-awsRelationalDatabaseDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-definitions/{id} [delete]
func (h Handler) DeleteAwsRelationalDatabaseDefinition(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseDefinition
	awsRelationalDatabaseDefinitionID := c.Param("id")
	var awsRelationalDatabaseDefinition v0.AwsRelationalDatabaseDefinition
	if result := h.DB.First(&awsRelationalDatabaseDefinition, awsRelationalDatabaseDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// delete object
	if result := h.DB.Delete(&awsRelationalDatabaseDefinition); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseDefinition)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// AwsRelationalDatabaseInstance
///////////////////////////////////////////////////////////////////////////////

// @Summary GetAwsRelationalDatabaseInstanceVersions gets the supported versions for the aws relational database instance API.
// @Description Get the supported API versions for aws relational database instances.
// @ID awsRelationalDatabaseInstance-get-versions
// @Produce json
// @Success 200 {object} api.RESTAPIVersions "OK"
// @Router /aws-relational-database-instances/versions [get]
func (h Handler) GetAwsRelationalDatabaseInstanceVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, api.RestapiVersions[string(v0.ObjectTypeAwsRelationalDatabaseInstance)])
}

// @Summary adds a new aws relational database instance.
// @Description Add a new aws relational database instance to the Threeport database.
// @ID add-awsRelationalDatabaseInstance
// @Accept json
// @Produce json
// @Param awsRelationalDatabaseInstance body v0.AwsRelationalDatabaseInstance true "AwsRelationalDatabaseInstance object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances [post]
func (h Handler) AddAwsRelationalDatabaseInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	var awsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, false, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&awsRelationalDatabaseInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, awsRelationalDatabaseInstance, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingAwsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	nameUsed := true
	result := h.DB.Where("name = ?", awsRelationalDatabaseInstance.Name).First(&existingAwsRelationalDatabaseInstance)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return iapi.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&awsRelationalDatabaseInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*awsRelationalDatabaseInstance.Reconciled {
		notifPayload, err := awsRelationalDatabaseInstance.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsRelationalDatabaseInstanceCreateSubject, *notifPayload)
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus201(c, *response)
}

// @Summary gets all aws relational database instances.
// @Description Get all aws relational database instances from the Threeport database.
// @ID get-awsRelationalDatabaseInstances
// @Accept json
// @Produce json
// @Param name query string false "aws relational database instance search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances [get]
func (h Handler) GetAwsRelationalDatabaseInstances(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	params, err := c.(*iapi.CustomContext).GetPaginationParams()
	if err != nil {
		return iapi.ResponseStatus400(c, &params, err, objectType)
	}

	var filter v0.AwsRelationalDatabaseInstance
	if err := c.Bind(&filter); err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&v0.AwsRelationalDatabaseInstance{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]v0.AwsRelationalDatabaseInstance{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return iapi.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := v0.CreateResponse(v0.CreateMeta(params, totalCount), *records)
	if err != nil {
		return iapi.ResponseStatus500(c, &params, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary gets a aws relational database instance.
// @Description Get a particular aws relational database instance from the database.
// @ID get-awsRelationalDatabaseInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances/{id} [get]
func (h Handler) GetAwsRelationalDatabaseInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	awsRelationalDatabaseInstanceID := c.Param("id")
	var awsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if result := h.DB.First(&awsRelationalDatabaseInstance, awsRelationalDatabaseInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing aws relational database instance.
// @Description Update a aws relational database instance in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating aws relational database instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-awsRelationalDatabaseInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsRelationalDatabaseInstance body v0.AwsRelationalDatabaseInstance true "AwsRelationalDatabaseInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances/{id} [patch]
func (h Handler) UpdateAwsRelationalDatabaseInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	awsRelationalDatabaseInstanceID := c.Param("id")
	var existingAwsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if result := h.DB.First(&existingAwsRelationalDatabaseInstance, awsRelationalDatabaseInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if err := c.Bind(&updatedAwsRelationalDatabaseInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingAwsRelationalDatabaseInstance).Updates(updatedAwsRelationalDatabaseInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingAwsRelationalDatabaseInstance.Reconciled {
		notifPayload, err := existingAwsRelationalDatabaseInstance.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsRelationalDatabaseInstanceUpdateSubject, *notifPayload)
	}

	response, err := v0.CreateResponse(nil, existingAwsRelationalDatabaseInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary updates an existing aws relational database instance by replacing the entire object.
// @Description Replace a aws relational database instance in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating aws relational database instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-awsRelationalDatabaseInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param awsRelationalDatabaseInstance body v0.AwsRelationalDatabaseInstance true "AwsRelationalDatabaseInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances/{id} [put]
func (h Handler) ReplaceAwsRelationalDatabaseInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	awsRelationalDatabaseInstanceID := c.Param("id")
	var existingAwsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if result := h.DB.First(&existingAwsRelationalDatabaseInstance, awsRelationalDatabaseInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := iapi.PayloadCheck(c, true, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedAwsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if err := c.Bind(&updatedAwsRelationalDatabaseInstance); err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := iapi.ValidateBoundData(c, updatedAwsRelationalDatabaseInstance, objectType); err != nil {
		return iapi.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedAwsRelationalDatabaseInstance.ID = existingAwsRelationalDatabaseInstance.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedAwsRelationalDatabaseInstance); result.Error != nil {
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingAwsRelationalDatabaseInstance, awsRelationalDatabaseInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := v0.CreateResponse(nil, existingAwsRelationalDatabaseInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}

// @Summary deletes a aws relational database instance.
// @Description Delete a aws relational database instance by ID from the database.
// @ID delete-awsRelationalDatabaseInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/aws-relational-database-instances/{id} [delete]
func (h Handler) DeleteAwsRelationalDatabaseInstance(c echo.Context) error {
	objectType := v0.ObjectTypeAwsRelationalDatabaseInstance
	awsRelationalDatabaseInstanceID := c.Param("id")
	var awsRelationalDatabaseInstance v0.AwsRelationalDatabaseInstance
	if result := h.DB.First(&awsRelationalDatabaseInstance, awsRelationalDatabaseInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return iapi.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return iapi.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if awsRelationalDatabaseInstance.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledAwsRelationalDatabaseInstance := v0.AwsRelationalDatabaseInstance{
			Reconciliation: v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.DB.Model(&awsRelationalDatabaseInstance).Updates(scheduledAwsRelationalDatabaseInstance); result.Error != nil {
			return iapi.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := awsRelationalDatabaseInstance.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return iapi.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(v0.AwsRelationalDatabaseInstanceDeleteSubject, *notifPayload)
	} else {
		if awsRelationalDatabaseInstance.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return iapi.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*awsRelationalDatabaseInstance.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.DB.Delete(&awsRelationalDatabaseInstance); result.Error != nil {
				return iapi.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := v0.CreateResponse(nil, awsRelationalDatabaseInstance)
	if err != nil {
		return iapi.ResponseStatus500(c, nil, err, objectType)
	}

	return iapi.ResponseStatus200(c, *response)
}
