// generated by 'threeport-sdk gen' - do not edit

package handlers

import (
	"errors"
	"fmt"
	echo "github.com/labstack/echo/v4"
	notif "github.com/threeport/threeport/internal/oci/notif"
	apiserver_lib "github.com/threeport/threeport/pkg/api-server/lib/v0"
	api_v0 "github.com/threeport/threeport/pkg/api/v0"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	gorm "gorm.io/gorm"
	"net/http"
	"time"
)

///////////////////////////////////////////////////////////////////////////////
// OciAccount
///////////////////////////////////////////////////////////////////////////////

// @Summary GetOciAccountVersions gets the supported versions for the oci account API.
// @Description Get the supported API versions for oci accounts.
// @ID ociAccount-get-versions
// @Produce json
// @Success 200 {object} apiserver_lib.ApiObjectVersions "OK"
// @Router /oci-accounts/versions [GET]
func (h Handler) GetOciAccountVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, apiserver_lib.ObjectVersions[string(api_v0.ObjectTypeOciAccount)])
}

// @Summary adds a new oci account.
// @Description Add a new oci account to the Threeport database.
// @ID add-v0-ociAccount
// @Accept json
// @Produce json
// @Param ociAccount body api_v0.OciAccount true "OciAccount object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts [POST]
func (h Handler) AddOciAccount(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	var ociAccount api_v0.OciAccount

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, false, objectType, ociAccount); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&ociAccount); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, ociAccount, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingOciAccount api_v0.OciAccount
	nameUsed := true
	result := h.DB.Where("name = ?", ociAccount.Name).First(&existingOciAccount)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return apiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&ociAccount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociAccount, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all oci accounts.
// @Description Get all oci accounts from the Threeport database.
// @ID get-v0-ociAccounts
// @Accept json
// @Produce json
// @Param name query string false "oci account search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts [GET]
func (h Handler) GetOciAccounts(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	params, err := c.(*apiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return apiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.OciAccount
	if err := c.Bind(&filter); err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&api_v0.OciAccount{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.OciAccount{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(apiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a oci account.
// @Description Get a particular oci account from the database.
// @ID get-v0-ociAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts/{id} [GET]
func (h Handler) GetOciAccount(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	ociAccountID := c.Param("id")
	var ociAccount api_v0.OciAccount
	if result := h.DB.First(&ociAccount, ociAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociAccount, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing oci account.
// @Description Update a oci account in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating oci account objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-ociAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociAccount body api_v0.OciAccount true "OciAccount object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts/{id} [PATCH]
func (h Handler) UpdateOciAccount(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	ociAccountID := c.Param("id")
	var existingOciAccount api_v0.OciAccount
	if result := h.DB.First(&existingOciAccount, ociAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciAccount); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciAccount api_v0.OciAccount
	if err := c.Bind(&updatedOciAccount); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingOciAccount).Updates(updatedOciAccount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciAccount, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing oci account by replacing the entire object.
// @Description Replace a oci account in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating oci account objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-ociAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociAccount body api_v0.OciAccount true "OciAccount object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts/{id} [PUT]
func (h Handler) ReplaceOciAccount(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	ociAccountID := c.Param("id")
	var existingOciAccount api_v0.OciAccount
	if result := h.DB.First(&existingOciAccount, ociAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciAccount); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciAccount api_v0.OciAccount
	if err := c.Bind(&updatedOciAccount); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, updatedOciAccount, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedOciAccount.ID = existingOciAccount.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedOciAccount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingOciAccount, ociAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciAccount, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a oci account.
// @Description Delete a oci account by ID from the database.
// @ID delete-v0-ociAccount
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-accounts/{id} [DELETE]
func (h Handler) DeleteOciAccount(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciAccount
	ociAccountID := c.Param("id")
	var ociAccount api_v0.OciAccount
	if result := h.DB.First(&ociAccount, ociAccountID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// delete object
	if result := h.DB.Delete(&ociAccount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociAccount, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// OciOkeKubernetesRuntimeDefinition
///////////////////////////////////////////////////////////////////////////////

// @Summary GetOciOkeKubernetesRuntimeDefinitionVersions gets the supported versions for the oci oke kubernetes runtime definition API.
// @Description Get the supported API versions for oci oke kubernetes runtime definitions.
// @ID ociOkeKubernetesRuntimeDefinition-get-versions
// @Produce json
// @Success 200 {object} apiserver_lib.ApiObjectVersions "OK"
// @Router /oci-oke-kubernetes-runtime-definitions/versions [GET]
func (h Handler) GetOciOkeKubernetesRuntimeDefinitionVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, apiserver_lib.ObjectVersions[string(api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition)])
}

// @Summary adds a new oci oke kubernetes runtime definition.
// @Description Add a new oci oke kubernetes runtime definition to the Threeport database.
// @ID add-v0-ociOkeKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param ociOkeKubernetesRuntimeDefinition body api_v0.OciOkeKubernetesRuntimeDefinition true "OciOkeKubernetesRuntimeDefinition object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions [POST]
func (h Handler) AddOciOkeKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	var ociOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, false, objectType, ociOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&ociOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, ociOkeKubernetesRuntimeDefinition, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingOciOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	nameUsed := true
	result := h.DB.Where("name = ?", ociOkeKubernetesRuntimeDefinition.Name).First(&existingOciOkeKubernetesRuntimeDefinition)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return apiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&ociOkeKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all oci oke kubernetes runtime definitions.
// @Description Get all oci oke kubernetes runtime definitions from the Threeport database.
// @ID get-v0-ociOkeKubernetesRuntimeDefinitions
// @Accept json
// @Produce json
// @Param name query string false "oci oke kubernetes runtime definition search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions [GET]
func (h Handler) GetOciOkeKubernetesRuntimeDefinitions(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	params, err := c.(*apiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return apiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.OciOkeKubernetesRuntimeDefinition
	if err := c.Bind(&filter); err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&api_v0.OciOkeKubernetesRuntimeDefinition{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.OciOkeKubernetesRuntimeDefinition{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(apiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a oci oke kubernetes runtime definition.
// @Description Get a particular oci oke kubernetes runtime definition from the database.
// @ID get-v0-ociOkeKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions/{id} [GET]
func (h Handler) GetOciOkeKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	ociOkeKubernetesRuntimeDefinitionID := c.Param("id")
	var ociOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if result := h.DB.First(&ociOkeKubernetesRuntimeDefinition, ociOkeKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing oci oke kubernetes runtime definition.
// @Description Update a oci oke kubernetes runtime definition in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating oci oke kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-ociOkeKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociOkeKubernetesRuntimeDefinition body api_v0.OciOkeKubernetesRuntimeDefinition true "OciOkeKubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions/{id} [PATCH]
func (h Handler) UpdateOciOkeKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	ociOkeKubernetesRuntimeDefinitionID := c.Param("id")
	var existingOciOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeDefinition, ociOkeKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if err := c.Bind(&updatedOciOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingOciOkeKubernetesRuntimeDefinition).Updates(updatedOciOkeKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciOkeKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing oci oke kubernetes runtime definition by replacing the entire object.
// @Description Replace a oci oke kubernetes runtime definition in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating oci oke kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-ociOkeKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociOkeKubernetesRuntimeDefinition body api_v0.OciOkeKubernetesRuntimeDefinition true "OciOkeKubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions/{id} [PUT]
func (h Handler) ReplaceOciOkeKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	ociOkeKubernetesRuntimeDefinitionID := c.Param("id")
	var existingOciOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeDefinition, ociOkeKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if err := c.Bind(&updatedOciOkeKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, updatedOciOkeKubernetesRuntimeDefinition, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedOciOkeKubernetesRuntimeDefinition.ID = existingOciOkeKubernetesRuntimeDefinition.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedOciOkeKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeDefinition, ociOkeKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciOkeKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a oci oke kubernetes runtime definition.
// @Description Delete a oci oke kubernetes runtime definition by ID from the database.
// @ID delete-v0-ociOkeKubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-definitions/{id} [DELETE]
func (h Handler) DeleteOciOkeKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeDefinition
	ociOkeKubernetesRuntimeDefinitionID := c.Param("id")
	var ociOkeKubernetesRuntimeDefinition api_v0.OciOkeKubernetesRuntimeDefinition
	if result := h.DB.Preload("OciOkeKubernetesRuntimeInstances").First(&ociOkeKubernetesRuntimeDefinition, ociOkeKubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check to make sure no dependent instances exist for this definition
	if len(ociOkeKubernetesRuntimeDefinition.OciOkeKubernetesRuntimeInstances) != 0 {
		err := errors.New("oci oke kubernetes runtime definition has related oci oke kubernetes runtime instances - cannot be deleted")
		return apiserver_lib.ResponseStatus409(c, nil, err, objectType)
	}

	// delete object
	if result := h.DB.Delete(&ociOkeKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// OciOkeKubernetesRuntimeInstance
///////////////////////////////////////////////////////////////////////////////

// @Summary GetOciOkeKubernetesRuntimeInstanceVersions gets the supported versions for the oci oke kubernetes runtime instance API.
// @Description Get the supported API versions for oci oke kubernetes runtime instances.
// @ID ociOkeKubernetesRuntimeInstance-get-versions
// @Produce json
// @Success 200 {object} apiserver_lib.ApiObjectVersions "OK"
// @Router /oci-oke-kubernetes-runtime-instances/versions [GET]
func (h Handler) GetOciOkeKubernetesRuntimeInstanceVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, apiserver_lib.ObjectVersions[string(api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance)])
}

// @Summary adds a new oci oke kubernetes runtime instance.
// @Description Add a new oci oke kubernetes runtime instance to the Threeport database.
// @ID add-v0-ociOkeKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param ociOkeKubernetesRuntimeInstance body api_v0.OciOkeKubernetesRuntimeInstance true "OciOkeKubernetesRuntimeInstance object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances [POST]
func (h Handler) AddOciOkeKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	var ociOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, false, objectType, ociOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&ociOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, ociOkeKubernetesRuntimeInstance, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingOciOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	nameUsed := true
	result := h.DB.Where("name = ?", ociOkeKubernetesRuntimeInstance.Name).First(&existingOciOkeKubernetesRuntimeInstance)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return apiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&ociOkeKubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*ociOkeKubernetesRuntimeInstance.Reconciled {
		notifPayload, err := ociOkeKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.OciOkeKubernetesRuntimeInstanceCreateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all oci oke kubernetes runtime instances.
// @Description Get all oci oke kubernetes runtime instances from the Threeport database.
// @ID get-v0-ociOkeKubernetesRuntimeInstances
// @Accept json
// @Produce json
// @Param name query string false "oci oke kubernetes runtime instance search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances [GET]
func (h Handler) GetOciOkeKubernetesRuntimeInstances(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	params, err := c.(*apiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return apiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.OciOkeKubernetesRuntimeInstance
	if err := c.Bind(&filter); err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&api_v0.OciOkeKubernetesRuntimeInstance{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.OciOkeKubernetesRuntimeInstance{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(apiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a oci oke kubernetes runtime instance.
// @Description Get a particular oci oke kubernetes runtime instance from the database.
// @ID get-v0-ociOkeKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances/{id} [GET]
func (h Handler) GetOciOkeKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	ociOkeKubernetesRuntimeInstanceID := c.Param("id")
	var ociOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if result := h.DB.First(&ociOkeKubernetesRuntimeInstance, ociOkeKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing oci oke kubernetes runtime instance.
// @Description Update a oci oke kubernetes runtime instance in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating oci oke kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-ociOkeKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociOkeKubernetesRuntimeInstance body api_v0.OciOkeKubernetesRuntimeInstance true "OciOkeKubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances/{id} [PATCH]
func (h Handler) UpdateOciOkeKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	ociOkeKubernetesRuntimeInstanceID := c.Param("id")
	var existingOciOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeInstance, ociOkeKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if err := c.Bind(&updatedOciOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingOciOkeKubernetesRuntimeInstance).Updates(updatedOciOkeKubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingOciOkeKubernetesRuntimeInstance.Reconciled {
		notifPayload, err := existingOciOkeKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.OciOkeKubernetesRuntimeInstanceUpdateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciOkeKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing oci oke kubernetes runtime instance by replacing the entire object.
// @Description Replace a oci oke kubernetes runtime instance in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating oci oke kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-ociOkeKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param ociOkeKubernetesRuntimeInstance body api_v0.OciOkeKubernetesRuntimeInstance true "OciOkeKubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances/{id} [PUT]
func (h Handler) ReplaceOciOkeKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	ociOkeKubernetesRuntimeInstanceID := c.Param("id")
	var existingOciOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeInstance, ociOkeKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingOciOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedOciOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if err := c.Bind(&updatedOciOkeKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, updatedOciOkeKubernetesRuntimeInstance, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedOciOkeKubernetesRuntimeInstance.ID = existingOciOkeKubernetesRuntimeInstance.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedOciOkeKubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingOciOkeKubernetesRuntimeInstance, ociOkeKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingOciOkeKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a oci oke kubernetes runtime instance.
// @Description Delete a oci oke kubernetes runtime instance by ID from the database.
// @ID delete-v0-ociOkeKubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/oci-oke-kubernetes-runtime-instances/{id} [DELETE]
func (h Handler) DeleteOciOkeKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeOciOkeKubernetesRuntimeInstance
	ociOkeKubernetesRuntimeInstanceID := c.Param("id")
	var ociOkeKubernetesRuntimeInstance api_v0.OciOkeKubernetesRuntimeInstance
	if result := h.DB.First(&ociOkeKubernetesRuntimeInstance, ociOkeKubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if ociOkeKubernetesRuntimeInstance.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledOciOkeKubernetesRuntimeInstance := api_v0.OciOkeKubernetesRuntimeInstance{
			Reconciliation: api_v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.DB.Model(&ociOkeKubernetesRuntimeInstance).Updates(scheduledOciOkeKubernetesRuntimeInstance); result.Error != nil {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := ociOkeKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.OciOkeKubernetesRuntimeInstanceDeleteSubject, *notifPayload)
	} else {
		if ociOkeKubernetesRuntimeInstance.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return apiserver_lib.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*ociOkeKubernetesRuntimeInstance.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.DB.Delete(&ociOkeKubernetesRuntimeInstance); result.Error != nil {
				return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := apiserver_lib.CreateResponse(nil, ociOkeKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}
