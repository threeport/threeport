// generated by 'threeport-sdk gen' - do not edit

package handlers

import (
	"errors"
	"fmt"
	echo "github.com/labstack/echo/v4"
	notif "github.com/threeport/threeport/internal/kubernetes-runtime/notif"
	apiserver_lib "github.com/threeport/threeport/pkg/api-server/lib/v0"
	api_v0 "github.com/threeport/threeport/pkg/api/v0"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	gorm "gorm.io/gorm"
	"net/http"
	"time"
)

///////////////////////////////////////////////////////////////////////////////
// KubernetesRuntimeDefinition
///////////////////////////////////////////////////////////////////////////////

// @Summary GetKubernetesRuntimeDefinitionVersions gets the supported versions for the kubernetes runtime definition API.
// @Description Get the supported API versions for kubernetes runtime definitions.
// @ID kubernetesRuntimeDefinition-get-versions
// @Produce json
// @Success 200 {object} apiserver_lib.ApiObjectVersions "OK"
// @Router /kubernetes-runtime-definitions/versions [GET]
func (h Handler) GetKubernetesRuntimeDefinitionVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, apiserver_lib.ObjectVersions[string(api_v0.ObjectTypeKubernetesRuntimeDefinition)])
}

// @Summary adds a new kubernetes runtime definition.
// @Description Add a new kubernetes runtime definition to the Threeport database.
// @ID add-v0-kubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param kubernetesRuntimeDefinition body api_v0.KubernetesRuntimeDefinition true "KubernetesRuntimeDefinition object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions [POST]
func (h Handler) AddKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	var kubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, false, objectType, kubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&kubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, kubernetesRuntimeDefinition, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingKubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	nameUsed := true
	result := h.DB.Where("name = ?", kubernetesRuntimeDefinition.Name).First(&existingKubernetesRuntimeDefinition)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return apiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&kubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*kubernetesRuntimeDefinition.Reconciled {
		notifPayload, err := kubernetesRuntimeDefinition.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeDefinitionCreateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all kubernetes runtime definitions.
// @Description Get all kubernetes runtime definitions from the Threeport database.
// @ID get-v0-kubernetesRuntimeDefinitions
// @Accept json
// @Produce json
// @Param name query string false "kubernetes runtime definition search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions [GET]
func (h Handler) GetKubernetesRuntimeDefinitions(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	params, err := c.(*apiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return apiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.KubernetesRuntimeDefinition
	if err := c.Bind(&filter); err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&api_v0.KubernetesRuntimeDefinition{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.KubernetesRuntimeDefinition{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(apiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a kubernetes runtime definition.
// @Description Get a particular kubernetes runtime definition from the database.
// @ID get-v0-kubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions/{id} [GET]
func (h Handler) GetKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	kubernetesRuntimeDefinitionID := c.Param("id")
	var kubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if result := h.DB.First(&kubernetesRuntimeDefinition, kubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing kubernetes runtime definition.
// @Description Update a kubernetes runtime definition in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-kubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param kubernetesRuntimeDefinition body api_v0.KubernetesRuntimeDefinition true "KubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions/{id} [PATCH]
func (h Handler) UpdateKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	kubernetesRuntimeDefinitionID := c.Param("id")
	var existingKubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if result := h.DB.First(&existingKubernetesRuntimeDefinition, kubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedKubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if err := c.Bind(&updatedKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingKubernetesRuntimeDefinition).Updates(updatedKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingKubernetesRuntimeDefinition.Reconciled {
		notifPayload, err := existingKubernetesRuntimeDefinition.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeDefinitionUpdateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing kubernetes runtime definition by replacing the entire object.
// @Description Replace a kubernetes runtime definition in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating kubernetes runtime definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-kubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param kubernetesRuntimeDefinition body api_v0.KubernetesRuntimeDefinition true "KubernetesRuntimeDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions/{id} [PUT]
func (h Handler) ReplaceKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	kubernetesRuntimeDefinitionID := c.Param("id")
	var existingKubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if result := h.DB.First(&existingKubernetesRuntimeDefinition, kubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedKubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if err := c.Bind(&updatedKubernetesRuntimeDefinition); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, updatedKubernetesRuntimeDefinition, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedKubernetesRuntimeDefinition.ID = existingKubernetesRuntimeDefinition.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedKubernetesRuntimeDefinition); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingKubernetesRuntimeDefinition, kubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingKubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a kubernetes runtime definition.
// @Description Delete a kubernetes runtime definition by ID from the database.
// @ID delete-v0-kubernetesRuntimeDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-definitions/{id} [DELETE]
func (h Handler) DeleteKubernetesRuntimeDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeDefinition
	kubernetesRuntimeDefinitionID := c.Param("id")
	var kubernetesRuntimeDefinition api_v0.KubernetesRuntimeDefinition
	if result := h.DB.Preload("KubernetesRuntimeInstances").First(&kubernetesRuntimeDefinition, kubernetesRuntimeDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check to make sure no dependent instances exist for this definition
	if len(kubernetesRuntimeDefinition.KubernetesRuntimeInstances) != 0 {
		err := errors.New("kubernetes runtime definition has related kubernetes runtime instances - cannot be deleted")
		return apiserver_lib.ResponseStatus409(c, nil, err, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if kubernetesRuntimeDefinition.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledKubernetesRuntimeDefinition := api_v0.KubernetesRuntimeDefinition{
			Reconciliation: api_v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.DB.Model(&kubernetesRuntimeDefinition).Updates(scheduledKubernetesRuntimeDefinition); result.Error != nil {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := kubernetesRuntimeDefinition.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeDefinitionDeleteSubject, *notifPayload)
	} else {
		if kubernetesRuntimeDefinition.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return apiserver_lib.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*kubernetesRuntimeDefinition.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.DB.Delete(&kubernetesRuntimeDefinition); result.Error != nil {
				return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeDefinition, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// KubernetesRuntimeInstance
///////////////////////////////////////////////////////////////////////////////

// @Summary GetKubernetesRuntimeInstanceVersions gets the supported versions for the kubernetes runtime instance API.
// @Description Get the supported API versions for kubernetes runtime instances.
// @ID kubernetesRuntimeInstance-get-versions
// @Produce json
// @Success 200 {object} apiserver_lib.ApiObjectVersions "OK"
// @Router /kubernetes-runtime-instances/versions [GET]
func (h Handler) GetKubernetesRuntimeInstanceVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, apiserver_lib.ObjectVersions[string(api_v0.ObjectTypeKubernetesRuntimeInstance)])
}

// @Summary adds a new kubernetes runtime instance.
// @Description Add a new kubernetes runtime instance to the Threeport database.
// @ID add-v0-kubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param kubernetesRuntimeInstance body api_v0.KubernetesRuntimeInstance true "KubernetesRuntimeInstance object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances [POST]
func (h Handler) AddKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	var kubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, false, objectType, kubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&kubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, kubernetesRuntimeInstance, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingKubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	nameUsed := true
	result := h.DB.Where("name = ?", kubernetesRuntimeInstance.Name).First(&existingKubernetesRuntimeInstance)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return apiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.DB.Create(&kubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*kubernetesRuntimeInstance.Reconciled {
		notifPayload, err := kubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeInstanceCreateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all kubernetes runtime instances.
// @Description Get all kubernetes runtime instances from the Threeport database.
// @ID get-v0-kubernetesRuntimeInstances
// @Accept json
// @Produce json
// @Param name query string false "kubernetes runtime instance search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances [GET]
func (h Handler) GetKubernetesRuntimeInstances(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	params, err := c.(*apiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return apiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.KubernetesRuntimeInstance
	if err := c.Bind(&filter); err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.DB.Model(&api_v0.KubernetesRuntimeInstance{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.KubernetesRuntimeInstance{}
	if result := h.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(apiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a kubernetes runtime instance.
// @Description Get a particular kubernetes runtime instance from the database.
// @ID get-v0-kubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances/{id} [GET]
func (h Handler) GetKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	kubernetesRuntimeInstanceID := c.Param("id")
	var kubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if result := h.DB.First(&kubernetesRuntimeInstance, kubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing kubernetes runtime instance.
// @Description Update a kubernetes runtime instance in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-kubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param kubernetesRuntimeInstance body api_v0.KubernetesRuntimeInstance true "KubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances/{id} [PATCH]
func (h Handler) UpdateKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	kubernetesRuntimeInstanceID := c.Param("id")
	var existingKubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if result := h.DB.First(&existingKubernetesRuntimeInstance, kubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedKubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if err := c.Bind(&updatedKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.DB.Model(&existingKubernetesRuntimeInstance).Updates(updatedKubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingKubernetesRuntimeInstance.Reconciled {
		notifPayload, err := existingKubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeInstanceUpdateSubject, *notifPayload)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing kubernetes runtime instance by replacing the entire object.
// @Description Replace a kubernetes runtime instance in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating kubernetes runtime instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-kubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param kubernetesRuntimeInstance body api_v0.KubernetesRuntimeInstance true "KubernetesRuntimeInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances/{id} [PUT]
func (h Handler) ReplaceKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	kubernetesRuntimeInstanceID := c.Param("id")
	var existingKubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if result := h.DB.First(&existingKubernetesRuntimeInstance, kubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := apiserver_lib.PayloadCheck(c, false, true, objectType, existingKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedKubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if err := c.Bind(&updatedKubernetesRuntimeInstance); err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := apiserver_lib.ValidateBoundData(c, updatedKubernetesRuntimeInstance, objectType); err != nil {
		return apiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedKubernetesRuntimeInstance.ID = existingKubernetesRuntimeInstance.ID
	if result := h.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedKubernetesRuntimeInstance); result.Error != nil {
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.DB.First(&existingKubernetesRuntimeInstance, kubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := apiserver_lib.CreateResponse(nil, existingKubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a kubernetes runtime instance.
// @Description Delete a kubernetes runtime instance by ID from the database.
// @ID delete-v0-kubernetesRuntimeInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /v0/kubernetes-runtime-instances/{id} [DELETE]
func (h Handler) DeleteKubernetesRuntimeInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeKubernetesRuntimeInstance
	kubernetesRuntimeInstanceID := c.Param("id")
	var kubernetesRuntimeInstance api_v0.KubernetesRuntimeInstance
	if result := h.DB.First(&kubernetesRuntimeInstance, kubernetesRuntimeInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return apiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if kubernetesRuntimeInstance.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledKubernetesRuntimeInstance := api_v0.KubernetesRuntimeInstance{
			Reconciliation: api_v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.DB.Model(&kubernetesRuntimeInstance).Updates(scheduledKubernetesRuntimeInstance); result.Error != nil {
			return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := kubernetesRuntimeInstance.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.JS.Publish(notif.KubernetesRuntimeInstanceDeleteSubject, *notifPayload)
	} else {
		if kubernetesRuntimeInstance.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return apiserver_lib.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*kubernetesRuntimeInstance.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.DB.Delete(&kubernetesRuntimeInstance); result.Error != nil {
				return apiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := apiserver_lib.CreateResponse(nil, kubernetesRuntimeInstance, objectType)
	if err != nil {
		return apiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return apiserver_lib.ResponseStatus200(c, *response)
}
