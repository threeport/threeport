// generated by 'threeport-sdk gen' - do not edit

package versions

import (
	apiserver_lib "github.com/threeport/threeport/pkg/api-server/lib/v0"
	apiserver_v0 "github.com/threeport/threeport/pkg/api-server/v0"
	api_v0 "github.com/threeport/threeport/pkg/api/v0"
	"reflect"
)

// AddLoggingDefinitionVersions adds field validation info and adds it
// to the REST API versions.
func AddLoggingDefinitionVersions() {
	apiserver_v0.LoggingDefinitionTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.LoggingDefinition)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.LoggingDefinitionTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeLoggingDefinition),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.LoggingDefinitionTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddLoggingInstanceVersions adds field validation info and adds it
// to the REST API versions.
func AddLoggingInstanceVersions() {
	apiserver_v0.LoggingInstanceTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.LoggingInstance)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.LoggingInstanceTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeLoggingInstance),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.LoggingInstanceTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddMetricsDefinitionVersions adds field validation info and adds it
// to the REST API versions.
func AddMetricsDefinitionVersions() {
	apiserver_v0.MetricsDefinitionTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.MetricsDefinition)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.MetricsDefinitionTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeMetricsDefinition),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.MetricsDefinitionTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddMetricsInstanceVersions adds field validation info and adds it
// to the REST API versions.
func AddMetricsInstanceVersions() {
	apiserver_v0.MetricsInstanceTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.MetricsInstance)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.MetricsInstanceTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeMetricsInstance),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.MetricsInstanceTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddObservabilityDashboardDefinitionVersions adds field validation info and adds it
// to the REST API versions.
func AddObservabilityDashboardDefinitionVersions() {
	apiserver_v0.ObservabilityDashboardDefinitionTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.ObservabilityDashboardDefinition)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.ObservabilityDashboardDefinitionTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeObservabilityDashboardDefinition),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.ObservabilityDashboardDefinitionTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddObservabilityDashboardInstanceVersions adds field validation info and adds it
// to the REST API versions.
func AddObservabilityDashboardInstanceVersions() {
	apiserver_v0.ObservabilityDashboardInstanceTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.ObservabilityDashboardInstance)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.ObservabilityDashboardInstanceTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeObservabilityDashboardInstance),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.ObservabilityDashboardInstanceTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddObservabilityStackDefinitionVersions adds field validation info and adds it
// to the REST API versions.
func AddObservabilityStackDefinitionVersions() {
	apiserver_v0.ObservabilityStackDefinitionTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.ObservabilityStackDefinition)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.ObservabilityStackDefinitionTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeObservabilityStackDefinition),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.ObservabilityStackDefinitionTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}

// AddObservabilityStackInstanceVersions adds field validation info and adds it
// to the REST API versions.
func AddObservabilityStackInstanceVersions() {
	apiserver_v0.ObservabilityStackInstanceTaggedFields[apiserver_lib.TagNameValidate] = &apiserver_lib.FieldsByTag{
		Optional:             []string{},
		OptionalAssociations: []string{},
		Required:             []string{},
		TagName:              apiserver_lib.TagNameValidate,
	}

	// parse struct and populate the FieldsByTag object
	apiserver_lib.ParseStruct(
		apiserver_lib.TagNameValidate,
		reflect.ValueOf(new(api_v0.ObservabilityStackInstance)),
		"",
		apiserver_lib.Translate,
		apiserver_v0.ObservabilityStackInstanceTaggedFields,
	)

	// create a version object which contains the object name and versions
	versionObj := apiserver_lib.VersionObject{
		Object:  string(api_v0.ObjectTypeObservabilityStackInstance),
		Version: "v0",
	}

	// add the object tagged fields to the global tagged fields map
	apiserver_lib.ObjectTaggedFields[versionObj] = apiserver_v0.ObservabilityStackInstanceTaggedFields[apiserver_lib.TagNameValidate]

	// add the object tagged fields to the rest API version
	apiserver_lib.AddObjectVersion(versionObj)
}
