// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	"time"
)

const (
	ObjectTypeWorkloadDefinition         string = "WorkloadDefinition"
	ObjectTypeWorkloadEvent              string = "WorkloadEvent"
	ObjectTypeWorkloadInstance           string = "WorkloadInstance"
	ObjectTypeWorkloadResourceDefinition string = "WorkloadResourceDefinition"
	ObjectTypeWorkloadResourceInstance   string = "WorkloadResourceInstance"

	PathWorkloadDefinitionVersions         = "/workload-definitions/versions"
	PathWorkloadDefinitions                = "/v0/workload-definitions"
	PathWorkloadEventVersions              = "/workload-events/versions"
	PathWorkloadEvents                     = "/v0/workload-events"
	PathWorkloadInstanceVersions           = "/workload-instances/versions"
	PathWorkloadInstances                  = "/v0/workload-instances"
	PathWorkloadResourceDefinitionVersions = "/workload-resource-definitions/versions"
	PathWorkloadResourceDefinitions        = "/v0/workload-resource-definitions"
	PathWorkloadResourceInstanceVersions   = "/workload-resource-instances/versions"
	PathWorkloadResourceInstances          = "/v0/workload-resource-instances"
)

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (wd *WorkloadDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        wd,
		ObjectVersion: wd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", wd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (wd *WorkloadDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &wd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (wd *WorkloadDefinition) GetId() uint {
	return *wd.ID
}

// Type returns the object type.
func (wd *WorkloadDefinition) GetType() string {
	return "WorkloadDefinition"
}

// Version returns the version of the API object.
func (wd *WorkloadDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (wd *WorkloadDefinition) ScheduledForDeletion() *time.Time {
	return wd.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (we *WorkloadEvent) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        we,
		ObjectVersion: we.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", we, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (we *WorkloadEvent) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &we); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (we *WorkloadEvent) GetId() uint {
	return *we.ID
}

// Type returns the object type.
func (we *WorkloadEvent) GetType() string {
	return "WorkloadEvent"
}

// Version returns the version of the API object.
func (we *WorkloadEvent) GetVersion() string {
	return "v0"
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (wi *WorkloadInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        wi,
		ObjectVersion: wi.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", wi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (wi *WorkloadInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &wi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (wi *WorkloadInstance) GetId() uint {
	return *wi.ID
}

// Type returns the object type.
func (wi *WorkloadInstance) GetType() string {
	return "WorkloadInstance"
}

// Version returns the version of the API object.
func (wi *WorkloadInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (wi *WorkloadInstance) ScheduledForDeletion() *time.Time {
	return wi.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (wrd *WorkloadResourceDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        wrd,
		ObjectVersion: wrd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", wrd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (wrd *WorkloadResourceDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &wrd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (wrd *WorkloadResourceDefinition) GetId() uint {
	return *wrd.ID
}

// Type returns the object type.
func (wrd *WorkloadResourceDefinition) GetType() string {
	return "WorkloadResourceDefinition"
}

// Version returns the version of the API object.
func (wrd *WorkloadResourceDefinition) GetVersion() string {
	return "v0"
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (wri *WorkloadResourceInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        wri,
		ObjectVersion: wri.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", wri, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (wri *WorkloadResourceInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &wri); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (wri *WorkloadResourceInstance) GetId() uint {
	return *wri.ID
}

// Type returns the object type.
func (wri *WorkloadResourceInstance) GetType() string {
	return "WorkloadResourceInstance"
}

// Version returns the version of the API object.
func (wri *WorkloadResourceInstance) GetVersion() string {
	return "v0"
}
