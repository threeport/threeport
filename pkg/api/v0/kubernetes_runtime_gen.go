// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	"time"
)

const (
	ObjectTypeKubernetesRuntimeDefinition string = "KubernetesRuntimeDefinition"
	ObjectTypeKubernetesRuntimeInstance   string = "KubernetesRuntimeInstance"

	PathKubernetesRuntimeDefinitionVersions = "/kubernetes-runtime-definitions/versions"
	PathKubernetesRuntimeDefinitions        = "/v0/kubernetes-runtime-definitions"
	PathKubernetesRuntimeInstanceVersions   = "/kubernetes-runtime-instances/versions"
	PathKubernetesRuntimeInstances          = "/v0/kubernetes-runtime-instances"
)

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (krd *KubernetesRuntimeDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        krd,
		ObjectVersion: krd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", krd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (krd *KubernetesRuntimeDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &krd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (krd *KubernetesRuntimeDefinition) GetId() uint {
	return *krd.ID
}

// Type returns the object type.
func (krd *KubernetesRuntimeDefinition) GetType() string {
	return "KubernetesRuntimeDefinition"
}

// Version returns the version of the API object.
func (krd *KubernetesRuntimeDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (krd *KubernetesRuntimeDefinition) ScheduledForDeletion() *time.Time {
	return krd.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (kri *KubernetesRuntimeInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        kri,
		ObjectVersion: kri.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", kri, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (kri *KubernetesRuntimeInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &kri); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (kri *KubernetesRuntimeInstance) GetId() uint {
	return *kri.ID
}

// Type returns the object type.
func (kri *KubernetesRuntimeInstance) GetType() string {
	return "KubernetesRuntimeInstance"
}

// Version returns the version of the API object.
func (kri *KubernetesRuntimeInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (kri *KubernetesRuntimeInstance) ScheduledForDeletion() *time.Time {
	return kri.DeletionScheduled
}
