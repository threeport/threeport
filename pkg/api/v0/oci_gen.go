// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	"time"
)

const (
	ObjectTypeOciAccount                        string = "OciAccount"
	ObjectTypeOciOkeKubernetesRuntimeDefinition string = "OciOkeKubernetesRuntimeDefinition"
	ObjectTypeOciOkeKubernetesRuntimeInstance   string = "OciOkeKubernetesRuntimeInstance"

	PathOciAccountVersions                        = "/oci-accounts/versions"
	PathOciAccounts                               = "/v0/oci-accounts"
	PathOciOkeKubernetesRuntimeDefinitionVersions = "/oci-oke-kubernetes-runtime-definitions/versions"
	PathOciOkeKubernetesRuntimeDefinitions        = "/v0/oci-oke-kubernetes-runtime-definitions"
	PathOciOkeKubernetesRuntimeInstanceVersions   = "/oci-oke-kubernetes-runtime-instances/versions"
	PathOciOkeKubernetesRuntimeInstances          = "/v0/oci-oke-kubernetes-runtime-instances"
)

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (oa *OciAccount) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        oa,
		ObjectVersion: oa.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", oa, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (oa *OciAccount) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &oa); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (oa *OciAccount) GetId() uint {
	return *oa.ID
}

// Type returns the object type.
func (oa *OciAccount) GetType() string {
	return "OciAccount"
}

// Version returns the version of the API object.
func (oa *OciAccount) GetVersion() string {
	return "v0"
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ookrd *OciOkeKubernetesRuntimeDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        ookrd,
		ObjectVersion: ookrd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ookrd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (ookrd *OciOkeKubernetesRuntimeDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &ookrd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (ookrd *OciOkeKubernetesRuntimeDefinition) GetId() uint {
	return *ookrd.ID
}

// Type returns the object type.
func (ookrd *OciOkeKubernetesRuntimeDefinition) GetType() string {
	return "OciOkeKubernetesRuntimeDefinition"
}

// Version returns the version of the API object.
func (ookrd *OciOkeKubernetesRuntimeDefinition) GetVersion() string {
	return "v0"
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ookri *OciOkeKubernetesRuntimeInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        ookri,
		ObjectVersion: ookri.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ookri, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (ookri *OciOkeKubernetesRuntimeInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &ookri); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (ookri *OciOkeKubernetesRuntimeInstance) GetId() uint {
	return *ookri.ID
}

// Type returns the object type.
func (ookri *OciOkeKubernetesRuntimeInstance) GetType() string {
	return "OciOkeKubernetesRuntimeInstance"
}

// Version returns the version of the API object.
func (ookri *OciOkeKubernetesRuntimeInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (ookri *OciOkeKubernetesRuntimeInstance) ScheduledForDeletion() *time.Time {
	return ookri.DeletionScheduled
}
