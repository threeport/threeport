// generated by 'threeport-sdk gen' for API model boilerplate' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeControlPlaneDefinition string = "ControlPlaneDefinition"
	ObjectTypeControlPlaneInstance   string = "ControlPlaneInstance"

	ControlPlaneStreamName = "controlPlaneStream"

	ControlPlaneDefinitionSubject       = "controlPlaneDefinition.*"
	ControlPlaneDefinitionCreateSubject = "controlPlaneDefinition.create"
	ControlPlaneDefinitionUpdateSubject = "controlPlaneDefinition.update"
	ControlPlaneDefinitionDeleteSubject = "controlPlaneDefinition.delete"

	ControlPlaneInstanceSubject       = "controlPlaneInstance.*"
	ControlPlaneInstanceCreateSubject = "controlPlaneInstance.create"
	ControlPlaneInstanceUpdateSubject = "controlPlaneInstance.update"
	ControlPlaneInstanceDeleteSubject = "controlPlaneInstance.delete"

	PathControlPlaneDefinitions = "/v0/control-plane-definitions"
	PathControlPlaneInstances   = "/v0/control-plane-instances"
)

// GetControlPlaneDefinitionSubjects returns the NATS subjects
// for control plane definitions.
func GetControlPlaneDefinitionSubjects() []string {
	return []string{
		ControlPlaneDefinitionCreateSubject,
		ControlPlaneDefinitionUpdateSubject,
		ControlPlaneDefinitionDeleteSubject,
	}
}

// GetControlPlaneInstanceSubjects returns the NATS subjects
// for control plane instances.
func GetControlPlaneInstanceSubjects() []string {
	return []string{
		ControlPlaneInstanceCreateSubject,
		ControlPlaneInstanceUpdateSubject,
		ControlPlaneInstanceDeleteSubject,
	}
}

// GetControlPlaneSubjects returns the NATS subjects
// for all control plane objects.
func GetControlPlaneSubjects() []string {
	var controlPlaneSubjects []string

	controlPlaneSubjects = append(controlPlaneSubjects, GetControlPlaneDefinitionSubjects()...)
	controlPlaneSubjects = append(controlPlaneSubjects, GetControlPlaneInstanceSubjects()...)

	return controlPlaneSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (cpd *ControlPlaneDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       cpd,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", cpd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (cpd *ControlPlaneDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &cpd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (cpd *ControlPlaneDefinition) GetID() uint {
	return *cpd.ID
}

// String returns a string representation of the ojbect.
func (cpd ControlPlaneDefinition) String() string {
	return "v0.ControlPlaneDefinition"
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (cpi *ControlPlaneInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       cpi,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", cpi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (cpi *ControlPlaneInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &cpi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (cpi *ControlPlaneInstance) GetID() uint {
	return *cpi.ID
}

// String returns a string representation of the ojbect.
func (cpi ControlPlaneInstance) String() string {
	return "v0.ControlPlaneInstance"
}
