// generated by 'threeport-sdk gen' for API model boilerplate' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeEvent string = "Event"

	EventsStreamName = "eventsStream"

	EventSubject       = "event.*"
	EventCreateSubject = "event.create"
	EventUpdateSubject = "event.update"
	EventDeleteSubject = "event.delete"

	PathEvents = "/v0/events"
)

// GetEventSubjects returns the NATS subjects
// for events.
func GetEventSubjects() []string {
	return []string{
		EventCreateSubject,
		EventUpdateSubject,
		EventDeleteSubject,
	}
}

// GetEventsSubjects returns the NATS subjects
// for all events objects.
func GetEventsSubjects() []string {
	var eventsSubjects []string

	eventsSubjects = append(eventsSubjects, GetEventSubjects()...)

	return eventsSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (e *Event) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       e,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", e, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (e *Event) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &e); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (e *Event) GetID() uint {
	return *e.ID
}

// String returns a string representation of the ojbect.
func (e Event) String() string {
	return "v0.Event"
}
