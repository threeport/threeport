// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications"
)

const (
	ObjectTypeUser    ObjectType = "User"
	ObjectTypeCompany ObjectType = "Company"

	IdentityStreamName = "identityStream"

	UserSubject       = "user.*"
	UserCreateSubject = "user.create"
	UserUpdateSubject = "user.update"
	UserDeleteSubject = "user.delete"

	CompanySubject       = "company.*"
	CompanyCreateSubject = "company.create"
	CompanyUpdateSubject = "company.update"
	CompanyDeleteSubject = "company.delete"

	PathUsers     = "/v0/users"
	PathCompanies = "/v0/companies"
)

// GetUserSubjects returns the NATS subjects
// for users.
func GetUserSubjects() []string {
	return []string{
		UserCreateSubject,
		UserUpdateSubject,
		UserDeleteSubject,
	}
}

// GetCompanySubjects returns the NATS subjects
// for companies.
func GetCompanySubjects() []string {
	return []string{
		CompanyCreateSubject,
		CompanyUpdateSubject,
		CompanyDeleteSubject,
	}
}

// GetIdentitySubjects returns the NATS subjects
// for all identity objects.
func GetIdentitySubjects() []string {
	var identitySubjects []string

	identitySubjects = append(identitySubjects, GetUserSubjects()...)
	identitySubjects = append(identitySubjects, GetCompanySubjects()...)

	return identitySubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (u *User) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           u,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", u, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (u *User) GetID() uint {
	return *u.ID
}

// String returns a string representation of the ojbect.
func (u User) String() string {
	return fmt.Sprintf("v0.User")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (c *Company) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           c,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", c, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (c *Company) GetID() uint {
	return *c.ID
}

// String returns a string representation of the ojbect.
func (c Company) String() string {
	return fmt.Sprintf("v0.Company")
}
