// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications"
)

const (
	ObjectTypeAwsAccount                      ObjectType = "AwsAccount"
	ObjectTypeAwsEksClusterDefinition         ObjectType = "AwsEksClusterDefinition"
	ObjectTypeAwsEksClusterInstance           ObjectType = "AwsEksClusterInstance"
	ObjectTypeAwsRelationalDatabaseDefinition ObjectType = "AwsRelationalDatabaseDefinition"
	ObjectTypeAwsRelationalDatabaseInstance   ObjectType = "AwsRelationalDatabaseInstance"

	AwsStreamName = "awsStream"

	AwsAccountSubject       = "awsAccount.*"
	AwsAccountCreateSubject = "awsAccount.create"
	AwsAccountUpdateSubject = "awsAccount.update"
	AwsAccountDeleteSubject = "awsAccount.delete"

	AwsEksClusterDefinitionSubject       = "awsEksClusterDefinition.*"
	AwsEksClusterDefinitionCreateSubject = "awsEksClusterDefinition.create"
	AwsEksClusterDefinitionUpdateSubject = "awsEksClusterDefinition.update"
	AwsEksClusterDefinitionDeleteSubject = "awsEksClusterDefinition.delete"

	AwsEksClusterInstanceSubject       = "awsEksClusterInstance.*"
	AwsEksClusterInstanceCreateSubject = "awsEksClusterInstance.create"
	AwsEksClusterInstanceUpdateSubject = "awsEksClusterInstance.update"
	AwsEksClusterInstanceDeleteSubject = "awsEksClusterInstance.delete"

	AwsRelationalDatabaseDefinitionSubject       = "awsRelationalDatabaseDefinition.*"
	AwsRelationalDatabaseDefinitionCreateSubject = "awsRelationalDatabaseDefinition.create"
	AwsRelationalDatabaseDefinitionUpdateSubject = "awsRelationalDatabaseDefinition.update"
	AwsRelationalDatabaseDefinitionDeleteSubject = "awsRelationalDatabaseDefinition.delete"

	AwsRelationalDatabaseInstanceSubject       = "awsRelationalDatabaseInstance.*"
	AwsRelationalDatabaseInstanceCreateSubject = "awsRelationalDatabaseInstance.create"
	AwsRelationalDatabaseInstanceUpdateSubject = "awsRelationalDatabaseInstance.update"
	AwsRelationalDatabaseInstanceDeleteSubject = "awsRelationalDatabaseInstance.delete"

	PathAwsAccounts                      = "/v0/aws-accounts"
	PathAwsEksClusterDefinitions         = "/v0/aws-eks-cluster-definitions"
	PathAwsEksClusterInstances           = "/v0/aws-eks-cluster-instances"
	PathAwsRelationalDatabaseDefinitions = "/v0/aws-relational-database-definitions"
	PathAwsRelationalDatabaseInstances   = "/v0/aws-relational-database-instances"
)

// GetAwsAccountSubjects returns the NATS subjects
// for aws accounts.
func GetAwsAccountSubjects() []string {
	return []string{
		AwsAccountCreateSubject,
		AwsAccountUpdateSubject,
		AwsAccountDeleteSubject,
	}
}

// GetAwsEksClusterDefinitionSubjects returns the NATS subjects
// for aws eks cluster definitions.
func GetAwsEksClusterDefinitionSubjects() []string {
	return []string{
		AwsEksClusterDefinitionCreateSubject,
		AwsEksClusterDefinitionUpdateSubject,
		AwsEksClusterDefinitionDeleteSubject,
	}
}

// GetAwsEksClusterInstanceSubjects returns the NATS subjects
// for aws eks cluster instances.
func GetAwsEksClusterInstanceSubjects() []string {
	return []string{
		AwsEksClusterInstanceCreateSubject,
		AwsEksClusterInstanceUpdateSubject,
		AwsEksClusterInstanceDeleteSubject,
	}
}

// GetAwsRelationalDatabaseDefinitionSubjects returns the NATS subjects
// for aws relational database definitions.
func GetAwsRelationalDatabaseDefinitionSubjects() []string {
	return []string{
		AwsRelationalDatabaseDefinitionCreateSubject,
		AwsRelationalDatabaseDefinitionUpdateSubject,
		AwsRelationalDatabaseDefinitionDeleteSubject,
	}
}

// GetAwsRelationalDatabaseInstanceSubjects returns the NATS subjects
// for aws relational database instances.
func GetAwsRelationalDatabaseInstanceSubjects() []string {
	return []string{
		AwsRelationalDatabaseInstanceCreateSubject,
		AwsRelationalDatabaseInstanceUpdateSubject,
		AwsRelationalDatabaseInstanceDeleteSubject,
	}
}

// GetAwsSubjects returns the NATS subjects
// for all aws objects.
func GetAwsSubjects() []string {
	var awsSubjects []string

	awsSubjects = append(awsSubjects, GetAwsAccountSubjects()...)
	awsSubjects = append(awsSubjects, GetAwsEksClusterDefinitionSubjects()...)
	awsSubjects = append(awsSubjects, GetAwsEksClusterInstanceSubjects()...)
	awsSubjects = append(awsSubjects, GetAwsRelationalDatabaseDefinitionSubjects()...)
	awsSubjects = append(awsSubjects, GetAwsRelationalDatabaseInstanceSubjects()...)

	return awsSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (aa *AwsAccount) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           aa,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", aa, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (aa *AwsAccount) GetID() uint {
	return *aa.ID
}

// String returns a string representation of the ojbect.
func (aa AwsAccount) String() string {
	return fmt.Sprintf("v0.AwsAccount")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (aecd *AwsEksClusterDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           aecd,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", aecd, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (aecd *AwsEksClusterDefinition) GetID() uint {
	return *aecd.ID
}

// String returns a string representation of the ojbect.
func (aecd AwsEksClusterDefinition) String() string {
	return fmt.Sprintf("v0.AwsEksClusterDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (aeci *AwsEksClusterInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           aeci,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", aeci, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (aeci *AwsEksClusterInstance) GetID() uint {
	return *aeci.ID
}

// String returns a string representation of the ojbect.
func (aeci AwsEksClusterInstance) String() string {
	return fmt.Sprintf("v0.AwsEksClusterInstance")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ardd *AwsRelationalDatabaseDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           ardd,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ardd, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (ardd *AwsRelationalDatabaseDefinition) GetID() uint {
	return *ardd.ID
}

// String returns a string representation of the ojbect.
func (ardd AwsRelationalDatabaseDefinition) String() string {
	return fmt.Sprintf("v0.AwsRelationalDatabaseDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ardi *AwsRelationalDatabaseInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           ardi,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ardi, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (ardi *AwsRelationalDatabaseInstance) GetID() uint {
	return *ardi.ID
}

// String returns a string representation of the ojbect.
func (ardi AwsRelationalDatabaseInstance) String() string {
	return fmt.Sprintf("v0.AwsRelationalDatabaseInstance")
}
