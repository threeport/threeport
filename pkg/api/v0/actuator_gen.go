// generated by 'threeport-sdk codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeProfile string = "Profile"
	ObjectTypeTier    string = "Tier"

	ActuatorStreamName = "actuatorStream"

	ProfileSubject       = "profile.*"
	ProfileCreateSubject = "profile.create"
	ProfileUpdateSubject = "profile.update"
	ProfileDeleteSubject = "profile.delete"

	TierSubject       = "tier.*"
	TierCreateSubject = "tier.create"
	TierUpdateSubject = "tier.update"
	TierDeleteSubject = "tier.delete"

	PathProfiles = "/v0/profiles"
	PathTiers    = "/v0/tiers"
)

// GetProfileSubjects returns the NATS subjects
// for profiles.
func GetProfileSubjects() []string {
	return []string{
		ProfileCreateSubject,
		ProfileUpdateSubject,
		ProfileDeleteSubject,
	}
}

// GetTierSubjects returns the NATS subjects
// for tiers.
func GetTierSubjects() []string {
	return []string{
		TierCreateSubject,
		TierUpdateSubject,
		TierDeleteSubject,
	}
}

// GetActuatorSubjects returns the NATS subjects
// for all actuator objects.
func GetActuatorSubjects() []string {
	var actuatorSubjects []string

	actuatorSubjects = append(actuatorSubjects, GetProfileSubjects()...)
	actuatorSubjects = append(actuatorSubjects, GetTierSubjects()...)

	return actuatorSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (p *Profile) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       p,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", p, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (p *Profile) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &p); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (p *Profile) GetID() uint {
	return *p.ID
}

// String returns a string representation of the ojbect.
func (p Profile) String() string {
	return fmt.Sprintf("v0.Profile")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (t *Tier) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       t,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", t, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (t *Tier) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &t); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (t *Tier) GetID() uint {
	return *t.ID
}

// String returns a string representation of the ojbect.
func (t Tier) String() string {
	return fmt.Sprintf("v0.Tier")
}
