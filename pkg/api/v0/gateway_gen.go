// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeGatewayDefinition ObjectType = "GatewayDefinition"
	ObjectTypeGatewayInstance   ObjectType = "GatewayInstance"

	GatewayStreamName = "gatewayStream"

	GatewayDefinitionSubject       = "gatewayDefinition.*"
	GatewayDefinitionCreateSubject = "gatewayDefinition.create"
	GatewayDefinitionUpdateSubject = "gatewayDefinition.update"
	GatewayDefinitionDeleteSubject = "gatewayDefinition.delete"

	GatewayInstanceSubject       = "gatewayInstance.*"
	GatewayInstanceCreateSubject = "gatewayInstance.create"
	GatewayInstanceUpdateSubject = "gatewayInstance.update"
	GatewayInstanceDeleteSubject = "gatewayInstance.delete"

	PathGatewayDefinitions = "/v0/gateway-definitions"
	PathGatewayInstances   = "/v0/gateway-instances"
)

// GetGatewayDefinitionSubjects returns the NATS subjects
// for gateway definitions.
func GetGatewayDefinitionSubjects() []string {
	return []string{
		GatewayDefinitionCreateSubject,
		GatewayDefinitionUpdateSubject,
		GatewayDefinitionDeleteSubject,
	}
}

// GetGatewayInstanceSubjects returns the NATS subjects
// for gateway instances.
func GetGatewayInstanceSubjects() []string {
	return []string{
		GatewayInstanceCreateSubject,
		GatewayInstanceUpdateSubject,
		GatewayInstanceDeleteSubject,
	}
}

// GetGatewaySubjects returns the NATS subjects
// for all gateway objects.
func GetGatewaySubjects() []string {
	var gatewaySubjects []string

	gatewaySubjects = append(gatewaySubjects, GetGatewayDefinitionSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetGatewayInstanceSubjects()...)

	return gatewaySubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (gd *GatewayDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           gd,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", gd, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (gd *GatewayDefinition) GetID() uint {
	return *gd.ID
}

// String returns a string representation of the ojbect.
func (gd GatewayDefinition) String() string {
	return fmt.Sprintf("v0.GatewayDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (gi *GatewayInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           gi,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", gi, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (gi *GatewayInstance) GetID() uint {
	return *gi.ID
}

// String returns a string representation of the ojbect.
func (gi GatewayInstance) String() string {
	return fmt.Sprintf("v0.GatewayInstance")
}
