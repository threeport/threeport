// generated by 'threeport-sdk gen' for API model boilerplate' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeDomainNameDefinition string = "DomainNameDefinition"
	ObjectTypeDomainNameInstance   string = "DomainNameInstance"
	ObjectTypeGatewayDefinition    string = "GatewayDefinition"
	ObjectTypeGatewayHttpPort      string = "GatewayHttpPort"
	ObjectTypeGatewayInstance      string = "GatewayInstance"
	ObjectTypeGatewayTcpPort       string = "GatewayTcpPort"

	GatewayStreamName = "gatewayStream"

	DomainNameDefinitionSubject       = "domainNameDefinition.*"
	DomainNameDefinitionCreateSubject = "domainNameDefinition.create"
	DomainNameDefinitionUpdateSubject = "domainNameDefinition.update"
	DomainNameDefinitionDeleteSubject = "domainNameDefinition.delete"

	DomainNameInstanceSubject       = "domainNameInstance.*"
	DomainNameInstanceCreateSubject = "domainNameInstance.create"
	DomainNameInstanceUpdateSubject = "domainNameInstance.update"
	DomainNameInstanceDeleteSubject = "domainNameInstance.delete"

	GatewayDefinitionSubject       = "gatewayDefinition.*"
	GatewayDefinitionCreateSubject = "gatewayDefinition.create"
	GatewayDefinitionUpdateSubject = "gatewayDefinition.update"
	GatewayDefinitionDeleteSubject = "gatewayDefinition.delete"

	GatewayHttpPortSubject       = "gatewayHttpPort.*"
	GatewayHttpPortCreateSubject = "gatewayHttpPort.create"
	GatewayHttpPortUpdateSubject = "gatewayHttpPort.update"
	GatewayHttpPortDeleteSubject = "gatewayHttpPort.delete"

	GatewayInstanceSubject       = "gatewayInstance.*"
	GatewayInstanceCreateSubject = "gatewayInstance.create"
	GatewayInstanceUpdateSubject = "gatewayInstance.update"
	GatewayInstanceDeleteSubject = "gatewayInstance.delete"

	GatewayTcpPortSubject       = "gatewayTcpPort.*"
	GatewayTcpPortCreateSubject = "gatewayTcpPort.create"
	GatewayTcpPortUpdateSubject = "gatewayTcpPort.update"
	GatewayTcpPortDeleteSubject = "gatewayTcpPort.delete"

	PathDomainNameDefinitions = "/v0/domain-name-definitions"
	PathDomainNameInstances   = "/v0/domain-name-instances"
	PathGatewayDefinitions    = "/v0/gateway-definitions"
	PathGatewayHttpPorts      = "/v0/gateway-http-ports"
	PathGatewayInstances      = "/v0/gateway-instances"
	PathGatewayTcpPorts       = "/v0/gateway-tcp-ports"
)

// GetDomainNameDefinitionSubjects returns the NATS subjects
// for domain name definitions.
func GetDomainNameDefinitionSubjects() []string {
	return []string{
		DomainNameDefinitionCreateSubject,
		DomainNameDefinitionUpdateSubject,
		DomainNameDefinitionDeleteSubject,
	}
}

// GetDomainNameInstanceSubjects returns the NATS subjects
// for domain name instances.
func GetDomainNameInstanceSubjects() []string {
	return []string{
		DomainNameInstanceCreateSubject,
		DomainNameInstanceUpdateSubject,
		DomainNameInstanceDeleteSubject,
	}
}

// GetGatewayDefinitionSubjects returns the NATS subjects
// for gateway definitions.
func GetGatewayDefinitionSubjects() []string {
	return []string{
		GatewayDefinitionCreateSubject,
		GatewayDefinitionUpdateSubject,
		GatewayDefinitionDeleteSubject,
	}
}

// GetGatewayHttpPortSubjects returns the NATS subjects
// for gateway http ports.
func GetGatewayHttpPortSubjects() []string {
	return []string{
		GatewayHttpPortCreateSubject,
		GatewayHttpPortUpdateSubject,
		GatewayHttpPortDeleteSubject,
	}
}

// GetGatewayInstanceSubjects returns the NATS subjects
// for gateway instances.
func GetGatewayInstanceSubjects() []string {
	return []string{
		GatewayInstanceCreateSubject,
		GatewayInstanceUpdateSubject,
		GatewayInstanceDeleteSubject,
	}
}

// GetGatewayTcpPortSubjects returns the NATS subjects
// for gateway tcp ports.
func GetGatewayTcpPortSubjects() []string {
	return []string{
		GatewayTcpPortCreateSubject,
		GatewayTcpPortUpdateSubject,
		GatewayTcpPortDeleteSubject,
	}
}

// GetGatewaySubjects returns the NATS subjects
// for all gateway objects.
func GetGatewaySubjects() []string {
	var gatewaySubjects []string

	gatewaySubjects = append(gatewaySubjects, GetDomainNameDefinitionSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetDomainNameInstanceSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetGatewayDefinitionSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetGatewayHttpPortSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetGatewayInstanceSubjects()...)
	gatewaySubjects = append(gatewaySubjects, GetGatewayTcpPortSubjects()...)

	return gatewaySubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (dnd *DomainNameDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       dnd,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", dnd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (dnd *DomainNameDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &dnd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (dnd *DomainNameDefinition) GetID() uint {
	return *dnd.ID
}

// String returns a string representation of the ojbect.
func (dnd DomainNameDefinition) String() string {
	return fmt.Sprintf("v0.DomainNameDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (dni *DomainNameInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       dni,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", dni, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (dni *DomainNameInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &dni); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (dni *DomainNameInstance) GetID() uint {
	return *dni.ID
}

// String returns a string representation of the ojbect.
func (dni DomainNameInstance) String() string {
	return fmt.Sprintf("v0.DomainNameInstance")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (gd *GatewayDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       gd,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", gd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (gd *GatewayDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &gd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (gd *GatewayDefinition) GetID() uint {
	return *gd.ID
}

// String returns a string representation of the ojbect.
func (gd GatewayDefinition) String() string {
	return fmt.Sprintf("v0.GatewayDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ghp *GatewayHttpPort) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       ghp,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ghp, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (ghp *GatewayHttpPort) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &ghp); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (ghp *GatewayHttpPort) GetID() uint {
	return *ghp.ID
}

// String returns a string representation of the ojbect.
func (ghp GatewayHttpPort) String() string {
	return fmt.Sprintf("v0.GatewayHttpPort")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (gi *GatewayInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       gi,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", gi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (gi *GatewayInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &gi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (gi *GatewayInstance) GetID() uint {
	return *gi.ID
}

// String returns a string representation of the ojbect.
func (gi GatewayInstance) String() string {
	return fmt.Sprintf("v0.GatewayInstance")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (gtp *GatewayTcpPort) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       gtp,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", gtp, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (gtp *GatewayTcpPort) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &gtp); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (gtp *GatewayTcpPort) GetID() uint {
	return *gtp.ID
}

// String returns a string representation of the ojbect.
func (gtp GatewayTcpPort) String() string {
	return fmt.Sprintf("v0.GatewayTcpPort")
}
