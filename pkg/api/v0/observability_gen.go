// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeMetricsDefinition ObjectType = "MetricsDefinition"
	ObjectTypeMetricsInstance   ObjectType = "MetricsInstance"
	ObjectTypeLoggingDefinition ObjectType = "LoggingDefinition"
	ObjectTypeLoggingInstance   ObjectType = "LoggingInstance"

	ObservabilityStreamName = "observabilityStream"

	MetricsDefinitionSubject       = "metricsDefinition.*"
	MetricsDefinitionCreateSubject = "metricsDefinition.create"
	MetricsDefinitionUpdateSubject = "metricsDefinition.update"
	MetricsDefinitionDeleteSubject = "metricsDefinition.delete"

	MetricsInstanceSubject       = "metricsInstance.*"
	MetricsInstanceCreateSubject = "metricsInstance.create"
	MetricsInstanceUpdateSubject = "metricsInstance.update"
	MetricsInstanceDeleteSubject = "metricsInstance.delete"

	LoggingDefinitionSubject       = "loggingDefinition.*"
	LoggingDefinitionCreateSubject = "loggingDefinition.create"
	LoggingDefinitionUpdateSubject = "loggingDefinition.update"
	LoggingDefinitionDeleteSubject = "loggingDefinition.delete"

	LoggingInstanceSubject       = "loggingInstance.*"
	LoggingInstanceCreateSubject = "loggingInstance.create"
	LoggingInstanceUpdateSubject = "loggingInstance.update"
	LoggingInstanceDeleteSubject = "loggingInstance.delete"

	PathMetricsDefinitions = "/v0/metrics-definitions"
	PathMetricsInstances   = "/v0/metrics-instances"
	PathLoggingDefinitions = "/v0/logging-definitions"
	PathLoggingInstances   = "/v0/logging-instances"
)

// GetMetricsDefinitionSubjects returns the NATS subjects
// for metrics definitions.
func GetMetricsDefinitionSubjects() []string {
	return []string{
		MetricsDefinitionCreateSubject,
		MetricsDefinitionUpdateSubject,
		MetricsDefinitionDeleteSubject,
	}
}

// GetMetricsInstanceSubjects returns the NATS subjects
// for metrics instances.
func GetMetricsInstanceSubjects() []string {
	return []string{
		MetricsInstanceCreateSubject,
		MetricsInstanceUpdateSubject,
		MetricsInstanceDeleteSubject,
	}
}

// GetLoggingDefinitionSubjects returns the NATS subjects
// for logging definitions.
func GetLoggingDefinitionSubjects() []string {
	return []string{
		LoggingDefinitionCreateSubject,
		LoggingDefinitionUpdateSubject,
		LoggingDefinitionDeleteSubject,
	}
}

// GetLoggingInstanceSubjects returns the NATS subjects
// for logging instances.
func GetLoggingInstanceSubjects() []string {
	return []string{
		LoggingInstanceCreateSubject,
		LoggingInstanceUpdateSubject,
		LoggingInstanceDeleteSubject,
	}
}

// GetObservabilitySubjects returns the NATS subjects
// for all observability objects.
func GetObservabilitySubjects() []string {
	var observabilitySubjects []string

	observabilitySubjects = append(observabilitySubjects, GetMetricsDefinitionSubjects()...)
	observabilitySubjects = append(observabilitySubjects, GetMetricsInstanceSubjects()...)
	observabilitySubjects = append(observabilitySubjects, GetLoggingDefinitionSubjects()...)
	observabilitySubjects = append(observabilitySubjects, GetLoggingInstanceSubjects()...)

	return observabilitySubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (md *MetricsDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       md,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", md, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (md *MetricsDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &md); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (md *MetricsDefinition) GetID() uint {
	return *md.ID
}

// String returns a string representation of the ojbect.
func (md MetricsDefinition) String() string {
	return fmt.Sprintf("v0.MetricsDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (mi *MetricsInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       mi,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", mi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (mi *MetricsInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &mi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (mi *MetricsInstance) GetID() uint {
	return *mi.ID
}

// String returns a string representation of the ojbect.
func (mi MetricsInstance) String() string {
	return fmt.Sprintf("v0.MetricsInstance")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ld *LoggingDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       ld,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ld, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (ld *LoggingDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &ld); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (ld *LoggingDefinition) GetID() uint {
	return *ld.ID
}

// String returns a string representation of the ojbect.
func (ld LoggingDefinition) String() string {
	return fmt.Sprintf("v0.LoggingDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (li *LoggingInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       li,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", li, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (li *LoggingInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &li); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (li *LoggingInstance) GetID() uint {
	return *li.ID
}

// String returns a string representation of the ojbect.
func (li LoggingInstance) String() string {
	return fmt.Sprintf("v0.LoggingInstance")
}
