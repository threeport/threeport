// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	"time"
)

const (
	ObjectTypeLoggingDefinition                string = "LoggingDefinition"
	ObjectTypeLoggingInstance                  string = "LoggingInstance"
	ObjectTypeMetricsDefinition                string = "MetricsDefinition"
	ObjectTypeMetricsInstance                  string = "MetricsInstance"
	ObjectTypeObservabilityDashboardDefinition string = "ObservabilityDashboardDefinition"
	ObjectTypeObservabilityDashboardInstance   string = "ObservabilityDashboardInstance"
	ObjectTypeObservabilityStackDefinition     string = "ObservabilityStackDefinition"
	ObjectTypeObservabilityStackInstance       string = "ObservabilityStackInstance"

	PathLoggingDefinitionVersions                = "/logging-definitions/versions"
	PathLoggingDefinitions                       = "/v0/logging-definitions"
	PathLoggingInstanceVersions                  = "/logging-instances/versions"
	PathLoggingInstances                         = "/v0/logging-instances"
	PathMetricsDefinitionVersions                = "/metrics-definitions/versions"
	PathMetricsDefinitions                       = "/v0/metrics-definitions"
	PathMetricsInstanceVersions                  = "/metrics-instances/versions"
	PathMetricsInstances                         = "/v0/metrics-instances"
	PathObservabilityDashboardDefinitionVersions = "/observability-dashboard-definitions/versions"
	PathObservabilityDashboardDefinitions        = "/v0/observability-dashboard-definitions"
	PathObservabilityDashboardInstanceVersions   = "/observability-dashboard-instances/versions"
	PathObservabilityDashboardInstances          = "/v0/observability-dashboard-instances"
	PathObservabilityStackDefinitionVersions     = "/observability-stack-definitions/versions"
	PathObservabilityStackDefinitions            = "/v0/observability-stack-definitions"
	PathObservabilityStackInstanceVersions       = "/observability-stack-instances/versions"
	PathObservabilityStackInstances              = "/v0/observability-stack-instances"
)

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ld *LoggingDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        ld,
		ObjectVersion: ld.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ld, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (ld *LoggingDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &ld); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (ld *LoggingDefinition) GetId() uint {
	return *ld.ID
}

// Type returns the object type.
func (ld *LoggingDefinition) GetType() string {
	return "LoggingDefinition"
}

// Version returns the version of the API object.
func (ld *LoggingDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (ld *LoggingDefinition) ScheduledForDeletion() *time.Time {
	return ld.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (li *LoggingInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        li,
		ObjectVersion: li.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", li, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (li *LoggingInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &li); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (li *LoggingInstance) GetId() uint {
	return *li.ID
}

// Type returns the object type.
func (li *LoggingInstance) GetType() string {
	return "LoggingInstance"
}

// Version returns the version of the API object.
func (li *LoggingInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (li *LoggingInstance) ScheduledForDeletion() *time.Time {
	return li.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (md *MetricsDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        md,
		ObjectVersion: md.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", md, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (md *MetricsDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &md); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (md *MetricsDefinition) GetId() uint {
	return *md.ID
}

// Type returns the object type.
func (md *MetricsDefinition) GetType() string {
	return "MetricsDefinition"
}

// Version returns the version of the API object.
func (md *MetricsDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (md *MetricsDefinition) ScheduledForDeletion() *time.Time {
	return md.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (mi *MetricsInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        mi,
		ObjectVersion: mi.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", mi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (mi *MetricsInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &mi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (mi *MetricsInstance) GetId() uint {
	return *mi.ID
}

// Type returns the object type.
func (mi *MetricsInstance) GetType() string {
	return "MetricsInstance"
}

// Version returns the version of the API object.
func (mi *MetricsInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (mi *MetricsInstance) ScheduledForDeletion() *time.Time {
	return mi.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (odd *ObservabilityDashboardDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        odd,
		ObjectVersion: odd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", odd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (odd *ObservabilityDashboardDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &odd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (odd *ObservabilityDashboardDefinition) GetId() uint {
	return *odd.ID
}

// Type returns the object type.
func (odd *ObservabilityDashboardDefinition) GetType() string {
	return "ObservabilityDashboardDefinition"
}

// Version returns the version of the API object.
func (odd *ObservabilityDashboardDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (odd *ObservabilityDashboardDefinition) ScheduledForDeletion() *time.Time {
	return odd.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (odi *ObservabilityDashboardInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        odi,
		ObjectVersion: odi.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", odi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (odi *ObservabilityDashboardInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &odi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (odi *ObservabilityDashboardInstance) GetId() uint {
	return *odi.ID
}

// Type returns the object type.
func (odi *ObservabilityDashboardInstance) GetType() string {
	return "ObservabilityDashboardInstance"
}

// Version returns the version of the API object.
func (odi *ObservabilityDashboardInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (odi *ObservabilityDashboardInstance) ScheduledForDeletion() *time.Time {
	return odi.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (osd *ObservabilityStackDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        osd,
		ObjectVersion: osd.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", osd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (osd *ObservabilityStackDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &osd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (osd *ObservabilityStackDefinition) GetId() uint {
	return *osd.ID
}

// Type returns the object type.
func (osd *ObservabilityStackDefinition) GetType() string {
	return "ObservabilityStackDefinition"
}

// Version returns the version of the API object.
func (osd *ObservabilityStackDefinition) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (osd *ObservabilityStackDefinition) ScheduledForDeletion() *time.Time {
	return osd.DeletionScheduled
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (osi *ObservabilityStackInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime:  &creationTime,
		Object:        osi,
		ObjectVersion: osi.GetVersion(),
		Operation:     operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", osi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (osi *ObservabilityStackInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &osi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetId returns the unique ID for the object.
func (osi *ObservabilityStackInstance) GetId() uint {
	return *osi.ID
}

// Type returns the object type.
func (osi *ObservabilityStackInstance) GetType() string {
	return "ObservabilityStackInstance"
}

// Version returns the version of the API object.
func (osi *ObservabilityStackInstance) GetVersion() string {
	return "v0"
}

// ScheduledForDeletion returns a pointer to the DeletionScheduled timestamp
// if scheduled for deletion or nil if not scheduled for deletion.
func (osi *ObservabilityStackInstance) ScheduledForDeletion() *time.Time {
	return osi.DeletionScheduled
}
