// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeNetworkIngressDefinition ObjectType = "NetworkIngressDefinition"
	ObjectTypeNetworkIngressInstance   ObjectType = "NetworkIngressInstance"

	NetworkIngressStreamName = "networkIngressStream"

	NetworkIngressDefinitionSubject       = "networkIngressDefinition.*"
	NetworkIngressDefinitionCreateSubject = "networkIngressDefinition.create"
	NetworkIngressDefinitionUpdateSubject = "networkIngressDefinition.update"
	NetworkIngressDefinitionDeleteSubject = "networkIngressDefinition.delete"

	NetworkIngressInstanceSubject       = "networkIngressInstance.*"
	NetworkIngressInstanceCreateSubject = "networkIngressInstance.create"
	NetworkIngressInstanceUpdateSubject = "networkIngressInstance.update"
	NetworkIngressInstanceDeleteSubject = "networkIngressInstance.delete"

	PathNetworkIngressDefinitions = "/v0/network-ingress-definitions"
	PathNetworkIngressInstances   = "/v0/network-ingress-instances"
)

// GetNetworkIngressDefinitionSubjects returns the NATS subjects
// for network ingress definitions.
func GetNetworkIngressDefinitionSubjects() []string {
	return []string{
		NetworkIngressDefinitionCreateSubject,
		NetworkIngressDefinitionUpdateSubject,
		NetworkIngressDefinitionDeleteSubject,
	}
}

// GetNetworkIngressInstanceSubjects returns the NATS subjects
// for network ingress instances.
func GetNetworkIngressInstanceSubjects() []string {
	return []string{
		NetworkIngressInstanceCreateSubject,
		NetworkIngressInstanceUpdateSubject,
		NetworkIngressInstanceDeleteSubject,
	}
}

// GetNetworkIngressSubjects returns the NATS subjects
// for all network ingress objects.
func GetNetworkIngressSubjects() []string {
	var networkIngressSubjects []string

	networkIngressSubjects = append(networkIngressSubjects, GetNetworkIngressDefinitionSubjects()...)
	networkIngressSubjects = append(networkIngressSubjects, GetNetworkIngressInstanceSubjects()...)

	return networkIngressSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (nid *NetworkIngressDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           nid,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", nid, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (nid *NetworkIngressDefinition) GetID() uint {
	return *nid.ID
}

// String returns a string representation of the ojbect.
func (nid NetworkIngressDefinition) String() string {
	return fmt.Sprintf("v0.NetworkIngressDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (nii *NetworkIngressInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	lastDelay int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           nii,
		Operation:        operation,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", nii, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (nii *NetworkIngressInstance) GetID() uint {
	return *nii.ID
}

// String returns a string representation of the ojbect.
func (nii NetworkIngressInstance) String() string {
	return fmt.Sprintf("v0.NetworkIngressInstance")
}
