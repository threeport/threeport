// generated by 'threeport-sdk codegen api-model' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// ObservabilityStack
///////////////////////////////////////////////////////////////////////////////

// GetObservabilityStacksCmd represents the observability-stack command
var GetObservabilityStacksCmd = &cobra.Command{
	Example: "  tptctl get observability-stacks",
	Long:    "Get observability stacks from the system.\n\nA observability stack is a simple abstraction of observability stack definitions and observability stack instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get observability stacks
		observabilityStackInstances, err := client.GetObservabilityStackInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve observability stack instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*observabilityStackInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No observability stack instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetObservabilityStacksCmd(
			observabilityStackInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get observability stacks from the system",
	SilenceUsage: true,
	Use:          "observability-stacks",
}

func init() {
	GetCmd.AddCommand(GetObservabilityStacksCmd)

	GetObservabilityStacksCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createObservabilityStackConfigPath string

// CreateObservabilityStackCmd represents the observability-stack command
var CreateObservabilityStackCmd = &cobra.Command{
	Example: "  tptctl create observability-stack --config path/to/config.yaml",
	Long:    "Create a new observability stack. This command creates a new observability stack definition and observability stack instance based on the observability stack config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load observability stack config
		configContent, err := os.ReadFile(createObservabilityStackConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var observabilityStackConfig config.ObservabilityStackConfig
		if err := yaml.UnmarshalStrict(configContent, &observabilityStackConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create observability stack
		observabilityStack := observabilityStackConfig.ObservabilityStack
		observabilityStack.ObservabilityConfigPath = createObservabilityStackConfigPath
		createdObservabilityStackDefinition, createdObservabilityStackInstance, err := observabilityStack.Create(
			apiClient,
			apiEndpoint,
		)
		if err != nil {
			cli.Error("failed to create observability stack", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("observability stack definition %s created", *createdObservabilityStackDefinition.Name))
		cli.Info(fmt.Sprintf("observability stack instance %s created", *createdObservabilityStackInstance.Name))
		cli.Complete(fmt.Sprintf("observability stack %s created", observabilityStackConfig.ObservabilityStack.Name))
	},
	Short:        "Create a new observability stack",
	SilenceUsage: true,
	Use:          "observability-stack",
}

func init() {
	CreateCmd.AddCommand(CreateObservabilityStackCmd)

	CreateObservabilityStackCmd.Flags().StringVarP(
		&createObservabilityStackConfigPath,
		"config", "c", "", "Path to file with observability stack config.",
	)
	CreateObservabilityStackCmd.MarkFlagRequired("config")
	CreateObservabilityStackCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteObservabilityStackConfigPath string
	deleteObservabilityStackName       string
)

// DeleteObservabilityStackCmd represents the observability-stack command
var DeleteObservabilityStackCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete observability-stack --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete observability-stack --name some-observability-stack",
	Long:    "Delete an existing observability stack. This command deletes an existing observability stack definition and observability stack instance based on the observability stack config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if deleteObservabilityStackConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		var observabilityStackConfig config.ObservabilityStackConfig
		// load observability stack config
		configContent, err := os.ReadFile(deleteObservabilityStackConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		if err := yaml.UnmarshalStrict(configContent, &observabilityStackConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// delete observability stack
		observabilityStack := observabilityStackConfig.ObservabilityStack
		observabilityStack.ObservabilityConfigPath = deleteObservabilityStackConfigPath
		_, _, err = observabilityStack.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete observability stack", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("observability stack definition %s deleted", observabilityStack.Name))
		cli.Info(fmt.Sprintf("observability stack instance %s deleted", observabilityStack.Name))
		cli.Complete(fmt.Sprintf("observability stack %s deleted", observabilityStackConfig.ObservabilityStack.Name))
	},
	Short:        "Delete an existing observability stack",
	SilenceUsage: true,
	Use:          "observability-stack",
}

func init() {
	DeleteCmd.AddCommand(DeleteObservabilityStackCmd)

	DeleteObservabilityStackCmd.Flags().StringVarP(
		&deleteObservabilityStackConfigPath,
		"config", "c", "", "Path to file with observability stack config.",
	)
	DeleteObservabilityStackCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// ObservabilityStackDefinition
///////////////////////////////////////////////////////////////////////////////

// GetObservabilityStackDefinitionsCmd represents the observability-stack-definition command
var GetObservabilityStackDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get observability-stack-definitions",
	Long:    "Get observability stack definitions from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get observability stack definitions
		observabilityStackDefinitions, err := client.GetObservabilityStackDefinitions(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve observability stack definitions", err)
			os.Exit(1)
		}

		// write the output
		if len(*observabilityStackDefinitions) == 0 {
			cli.Info(fmt.Sprintf(
				"No observability stack definitions currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetObservabilityStackDefinitionsCmd(
			observabilityStackDefinitions,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get observability stack definitions from the system",
	SilenceUsage: true,
	Use:          "observability-stack-definitions",
}

func init() {
	GetCmd.AddCommand(GetObservabilityStackDefinitionsCmd)

	GetObservabilityStackDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createObservabilityStackDefinitionConfigPath string

// CreateObservabilityStackDefinitionCmd represents the observability-stack-definition command
var CreateObservabilityStackDefinitionCmd = &cobra.Command{
	Example: "  tptctl create observability-stack-definition --config path/to/config.yaml",
	Long:    "Create a new observability stack definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load observability stack definition config
		configContent, err := os.ReadFile(createObservabilityStackDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var observabilityStackDefinitionConfig config.ObservabilityStackDefinitionConfig
		if err := yaml.UnmarshalStrict(configContent, &observabilityStackDefinitionConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create observability stack definition
		observabilityStackDefinition := observabilityStackDefinitionConfig.ObservabilityStackDefinition
		observabilityStackDefinition.ObservabilityConfigPath = createObservabilityStackDefinitionConfigPath
		createdObservabilityStackDefinition, err := observabilityStackDefinition.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create observability stack definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("observability stack definition %s created", *createdObservabilityStackDefinition.Name))
	},
	Short:        "Create a new observability stack definition",
	SilenceUsage: true,
	Use:          "observability-stack-definition",
}

func init() {
	CreateCmd.AddCommand(CreateObservabilityStackDefinitionCmd)

	CreateObservabilityStackDefinitionCmd.Flags().StringVarP(
		&createObservabilityStackDefinitionConfigPath,
		"config", "c", "", "Path to file with observability stack definition config.",
	)
	CreateObservabilityStackDefinitionCmd.MarkFlagRequired("config")
	CreateObservabilityStackDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteObservabilityStackDefinitionConfigPath string
	deleteObservabilityStackDefinitionName       string
)

// DeleteObservabilityStackDefinitionCmd represents the observability-stack-definition command
var DeleteObservabilityStackDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete observability-stack-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete observability-stack-definition --name some-observability-stack-definition",
	Long:    "Delete an existing observability stack definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteObservabilityStackDefinitionConfigPath,
			deleteObservabilityStackDefinitionName,
			"observability stack definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var observabilityStackDefinitionConfig config.ObservabilityStackDefinitionConfig
		if deleteObservabilityStackDefinitionConfigPath != "" {
			// load observability stack definition config
			configContent, err := os.ReadFile(deleteObservabilityStackDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &observabilityStackDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			observabilityStackDefinitionConfig = config.ObservabilityStackDefinitionConfig{
				ObservabilityStackDefinition: config.ObservabilityStackDefinitionValues{
					Name: deleteObservabilityStackDefinitionName,
				},
			}
		}

		// delete observability stack definition
		observabilityStackDefinition := observabilityStackDefinitionConfig.ObservabilityStackDefinition
		observabilityStackDefinition.ObservabilityConfigPath = deleteObservabilityStackDefinitionConfigPath
		deletedObservabilityStackDefinition, err := observabilityStackDefinition.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete observability stack definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("observability stack definition %s deleted", *deletedObservabilityStackDefinition.Name))
	},
	Short:        "Delete an existing observability stack definition",
	SilenceUsage: true,
	Use:          "observability-stack-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteObservabilityStackDefinitionCmd)

	DeleteObservabilityStackDefinitionCmd.Flags().StringVarP(
		&deleteObservabilityStackDefinitionConfigPath,
		"config", "c", "", "Path to file with observability stack definition config.",
	)
	DeleteObservabilityStackDefinitionCmd.Flags().StringVarP(
		&deleteObservabilityStackDefinitionName,
		"name", "n", "", "Name of observability stack definition.",
	)
	DeleteObservabilityStackDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeObservabilityStackDefinitionConfigPath string
	describeObservabilityStackDefinitionName       string
	describeObservabilityStackDefinitionField      string
	describeObservabilityStackDefinitionOutput     string
)

// DescribeObservabilityStackDefinitionCmd representes the observability-stack-definition command
var DescribeObservabilityStackDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a observability stack definition\n  tptctl describe observability-stack-definition -n some-observability-stack-definition\n\n  # Get JSON output for a observability stack definition\n  tptctl describe observability-stack-definition -n some-observability-stack-definition -o json\n\n  # Get the value of the Name field for a observability stack definition\n  tptctl describe observability-stack-definition -n some-observability-stack-definition -f Name ",
	Long:    "Describe a observability stack definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeObservabilityStackDefinitionConfigPath,
			describeObservabilityStackDefinitionName,
			"observability stack definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeObservabilityStackDefinitionOutput,
			"observability stack definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load observability stack definition config by name or config file
		var observabilityStackDefinitionConfig config.ObservabilityStackDefinitionConfig
		if describeObservabilityStackDefinitionConfigPath != "" {
			configContent, err := os.ReadFile(describeObservabilityStackDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &observabilityStackDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			observabilityStackDefinitionConfig = config.ObservabilityStackDefinitionConfig{
				ObservabilityStackDefinition: config.ObservabilityStackDefinitionValues{
					Name: describeObservabilityStackDefinitionName,
				},
			}
		}

		// get observability stack definition
		observabilityStackDefinition, err := client.GetObservabilityStackDefinitionByName(
			apiClient,
			apiEndpoint,
			observabilityStackDefinitionConfig.ObservabilityStackDefinition.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve observability stack definition details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeObservabilityStackDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				observabilityStackDefinition,
				describeObservabilityStackDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from observability stack definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(observabilityStackDefinition, describeObservabilityStackDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeObservabilityStackDefinitionOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeObservabilityStackDefinitionCmd(
				observabilityStackDefinition,
				&observabilityStackDefinitionConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe observability stack definition", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedObservabilityStackDefinition := encryption.RedactEncryptedValues(observabilityStackDefinition)

			// marshal to JSON then print
			observabilityStackDefinitionJson, err := json.MarshalIndent(redactedObservabilityStackDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal observability stack definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(observabilityStackDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedObservabilityStackDefinition := encryption.RedactEncryptedValues(observabilityStackDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			observabilityStackDefinitionJson, err := json.MarshalIndent(redactedObservabilityStackDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal observability stack definition into JSON", err)
				os.Exit(1)
			}
			observabilityStackDefinitionYaml, err := ghodss_yaml.JSONToYAML(observabilityStackDefinitionJson)
			if err != nil {
				cli.Error("failed to convert observability stack definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(observabilityStackDefinitionYaml))
		}
	},
	Short:        "Describe a observability stack definition",
	SilenceUsage: true,
	Use:          "observability-stack-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeObservabilityStackDefinitionCmd)

	DescribeObservabilityStackDefinitionCmd.Flags().StringVarP(
		&describeObservabilityStackDefinitionConfigPath,
		"config", "c", "", "Path to file with observability stack definition config.")
	DescribeObservabilityStackDefinitionCmd.Flags().StringVarP(
		&describeObservabilityStackDefinitionName,
		"name", "n", "", "Name of observability stack definition.")
	DescribeObservabilityStackDefinitionCmd.Flags().StringVarP(
		&describeObservabilityStackDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeObservabilityStackDefinitionCmd.Flags().StringVarP(
		&describeObservabilityStackDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeObservabilityStackDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// ObservabilityStackInstance
///////////////////////////////////////////////////////////////////////////////

// GetObservabilityStackInstancesCmd represents the observability-stack-instance command
var GetObservabilityStackInstancesCmd = &cobra.Command{
	Example: "  tptctl get observability-stack-instances",
	Long:    "Get observability stack instances from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get observability stack instances
		observabilityStackInstances, err := client.GetObservabilityStackInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve observability stack instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*observabilityStackInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No observability stack instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetObservabilityStackInstancesCmd(
			observabilityStackInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get observability stack instances from the system",
	SilenceUsage: true,
	Use:          "observability-stack-instances",
}

func init() {
	GetCmd.AddCommand(GetObservabilityStackInstancesCmd)

	GetObservabilityStackInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createObservabilityStackInstanceConfigPath string

// CreateObservabilityStackInstanceCmd represents the observability-stack-instance command
var CreateObservabilityStackInstanceCmd = &cobra.Command{
	Example: "  tptctl create observability-stack-instance --config path/to/config.yaml",
	Long:    "Create a new observability stack instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load observability stack instance config
		configContent, err := os.ReadFile(createObservabilityStackInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var observabilityStackInstanceConfig config.ObservabilityStackInstanceConfig
		if err := yaml.UnmarshalStrict(configContent, &observabilityStackInstanceConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create observability stack instance
		observabilityStackInstance := observabilityStackInstanceConfig.ObservabilityStackInstance
		observabilityStackInstance.ObservabilityConfigPath = createObservabilityStackInstanceConfigPath
		createdObservabilityStackInstance, err := observabilityStackInstance.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create observability stack instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("observability stack instance %s created", *createdObservabilityStackInstance.Name))
	},
	Short:        "Create a new observability stack instance",
	SilenceUsage: true,
	Use:          "observability-stack-instance",
}

func init() {
	CreateCmd.AddCommand(CreateObservabilityStackInstanceCmd)

	CreateObservabilityStackInstanceCmd.Flags().StringVarP(
		&createObservabilityStackInstanceConfigPath,
		"config", "c", "", "Path to file with observability stack instance config.",
	)
	CreateObservabilityStackInstanceCmd.MarkFlagRequired("config")
	CreateObservabilityStackInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteObservabilityStackInstanceConfigPath string
	deleteObservabilityStackInstanceName       string
)

// DeleteObservabilityStackInstanceCmd represents the observability-stack-instance command
var DeleteObservabilityStackInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete observability-stack-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete observability-stack-instance --name some-observability-stack-instance",
	Long:    "Delete an existing observability stack instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteObservabilityStackInstanceConfigPath,
			deleteObservabilityStackInstanceName,
			"observability stack instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var observabilityStackInstanceConfig config.ObservabilityStackInstanceConfig
		if deleteObservabilityStackInstanceConfigPath != "" {
			// load observability stack instance config
			configContent, err := os.ReadFile(deleteObservabilityStackInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &observabilityStackInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			observabilityStackInstanceConfig = config.ObservabilityStackInstanceConfig{
				ObservabilityStackInstance: config.ObservabilityStackInstanceValues{
					Name: deleteObservabilityStackInstanceName,
				},
			}
		}

		// delete observability stack instance
		observabilityStackInstance := observabilityStackInstanceConfig.ObservabilityStackInstance
		observabilityStackInstance.ObservabilityConfigPath = deleteObservabilityStackInstanceConfigPath
		deletedObservabilityStackInstance, err := observabilityStackInstance.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete observability stack instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("observability stack instance %s deleted", *deletedObservabilityStackInstance.Name))
	},
	Short:        "Delete an existing observability stack instance",
	SilenceUsage: true,
	Use:          "observability-stack-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteObservabilityStackInstanceCmd)

	DeleteObservabilityStackInstanceCmd.Flags().StringVarP(
		&deleteObservabilityStackInstanceConfigPath,
		"config", "c", "", "Path to file with observability stack instance config.",
	)
	DeleteObservabilityStackInstanceCmd.Flags().StringVarP(
		&deleteObservabilityStackInstanceName,
		"name", "n", "", "Name of observability stack instance.",
	)
	DeleteObservabilityStackInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeObservabilityStackInstanceConfigPath string
	describeObservabilityStackInstanceName       string
	describeObservabilityStackInstanceField      string
	describeObservabilityStackInstanceOutput     string
)

// DescribeObservabilityStackInstanceCmd representes the observability-stack-instance command
var DescribeObservabilityStackInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a observability stack instance\n  tptctl describe observability-stack-instance -n some-observability-stack-instance\n\n  # Get JSON output for a observability stack instance\n  tptctl describe observability-stack-instance -n some-observability-stack-instance -o json\n\n  # Get the value of the Name field for a observability stack instance\n  tptctl describe observability-stack-instance -n some-observability-stack-instance -f Name ",
	Long:    "Describe a observability stack instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeObservabilityStackInstanceConfigPath,
			describeObservabilityStackInstanceName,
			"observability stack instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeObservabilityStackInstanceOutput,
			"observability stack instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load observability stack instance config by name or config file
		var observabilityStackInstanceConfig config.ObservabilityStackInstanceConfig
		if describeObservabilityStackInstanceConfigPath != "" {
			configContent, err := os.ReadFile(describeObservabilityStackInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &observabilityStackInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			observabilityStackInstanceConfig = config.ObservabilityStackInstanceConfig{
				ObservabilityStackInstance: config.ObservabilityStackInstanceValues{
					Name: describeObservabilityStackInstanceName,
				},
			}
		}

		// get observability stack instance
		observabilityStackInstance, err := client.GetObservabilityStackInstanceByName(
			apiClient,
			apiEndpoint,
			observabilityStackInstanceConfig.ObservabilityStackInstance.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve observability stack instance details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeObservabilityStackInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				observabilityStackInstance,
				describeObservabilityStackInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from observability stack instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(observabilityStackInstance, describeObservabilityStackInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeObservabilityStackInstanceOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeObservabilityStackInstanceCmd(
				observabilityStackInstance,
				&observabilityStackInstanceConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe observability stack instance", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedObservabilityStackInstance := encryption.RedactEncryptedValues(observabilityStackInstance)

			// marshal to JSON then print
			observabilityStackInstanceJson, err := json.MarshalIndent(redactedObservabilityStackInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal observability stack instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(observabilityStackInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedObservabilityStackInstance := encryption.RedactEncryptedValues(observabilityStackInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			observabilityStackInstanceJson, err := json.MarshalIndent(redactedObservabilityStackInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal observability stack instance into JSON", err)
				os.Exit(1)
			}
			observabilityStackInstanceYaml, err := ghodss_yaml.JSONToYAML(observabilityStackInstanceJson)
			if err != nil {
				cli.Error("failed to convert observability stack instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(observabilityStackInstanceYaml))
		}
	},
	Short:        "Describe a observability stack instance",
	SilenceUsage: true,
	Use:          "observability-stack-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeObservabilityStackInstanceCmd)

	DescribeObservabilityStackInstanceCmd.Flags().StringVarP(
		&describeObservabilityStackInstanceConfigPath,
		"config", "c", "", "Path to file with observability stack instance config.")
	DescribeObservabilityStackInstanceCmd.Flags().StringVarP(
		&describeObservabilityStackInstanceName,
		"name", "n", "", "Name of observability stack instance.")
	DescribeObservabilityStackInstanceCmd.Flags().StringVarP(
		&describeObservabilityStackInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeObservabilityStackInstanceCmd.Flags().StringVarP(
		&describeObservabilityStackInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeObservabilityStackInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}
