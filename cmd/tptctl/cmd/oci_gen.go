// generated by 'threeport-sdk gen' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	api_v0 "github.com/threeport/threeport/pkg/api/v0"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client_v0 "github.com/threeport/threeport/pkg/client/v0"
	config_v0 "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// OciAccount
///////////////////////////////////////////////////////////////////////////////

var getOciAccountVersion string

// GetOciAccountsCmd represents the oci-account command
var GetOciAccountsCmd = &cobra.Command{
	Example: "  tptctl get oci-accounts",
	Long:    "Get oci accounts from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getOciAccountVersion {
		case "v0":
			// get oci accounts
			ociAccounts, err := client_v0.GetOciAccounts(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve oci accounts", err)
				os.Exit(1)
			}

			// write the output
			if len(*ociAccounts) == 0 {
				cli.Info(fmt.Sprintf(
					"No oci accounts currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0OciAccountsCmd(
				ociAccounts,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get oci accounts from the system",
	SilenceUsage: true,
	Use:          "oci-accounts",
}

func init() {
	GetCmd.AddCommand(GetOciAccountsCmd)

	GetOciAccountsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetOciAccountsCmd.Flags().StringVarP(
		&getOciAccountVersion,
		"version", "v", "v0", "Version of oci accounts object to retrieve. One of: [v0]",
	)
}

var (
	createOciAccountConfigPath string
	createOciAccountVersion    string
)

// CreateOciAccountCmd represents the oci-account command
var CreateOciAccountCmd = &cobra.Command{
	Example: "  tptctl create oci-account --config path/to/config.yaml",
	Long:    "Create a new oci account.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read oci account config
		configContent, err := os.ReadFile(createOciAccountConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create oci account based on version
		switch createOciAccountVersion {
		case "v0":
			var ociAccountConfig config_v0.OciAccountConfig
			if err := yaml.UnmarshalStrict(configContent, &ociAccountConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create oci account
			ociAccount := ociAccountConfig.OciAccount
			createdOciAccount, err := ociAccount.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create oci account", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci account %s created", *createdOciAccount.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new oci account",
	SilenceUsage: true,
	Use:          "oci-account",
}

func init() {
	CreateCmd.AddCommand(CreateOciAccountCmd)

	CreateOciAccountCmd.Flags().StringVarP(
		&createOciAccountConfigPath,
		"config", "c", "", "Path to file with oci account config.",
	)
	CreateOciAccountCmd.MarkFlagRequired("config")
	CreateOciAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateOciAccountCmd.Flags().StringVarP(
		&createOciAccountVersion,
		"version", "v", "v0", "Version of oci accounts object to create. One of: [v0]",
	)
}

var (
	deleteOciAccountConfigPath string
	deleteOciAccountName       string
	deleteOciAccountVersion    string
)

// DeleteOciAccountCmd represents the oci-account command
var DeleteOciAccountCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete oci-account --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete oci-account --name some-oci-account",
	Long:    "Delete an existing oci account.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteOciAccountConfigPath,
			deleteOciAccountName,
			"oci account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete oci account based on version
		switch deleteOciAccountVersion {
		case "v0":
			var ociAccountConfig config_v0.OciAccountConfig
			if deleteOciAccountConfigPath != "" {
				// load oci account config
				configContent, err := os.ReadFile(deleteOciAccountConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociAccountConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociAccountConfig = config_v0.OciAccountConfig{
					OciAccount: config_v0.OciAccountValues{
						Name: &deleteOciAccountName,
					},
				}
			}

			// delete oci account
			ociAccount := ociAccountConfig.OciAccount
			deletedOciAccount, err := ociAccount.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete oci account", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci account %s deleted", *deletedOciAccount.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing oci account",
	SilenceUsage: true,
	Use:          "oci-account",
}

func init() {
	DeleteCmd.AddCommand(DeleteOciAccountCmd)

	DeleteOciAccountCmd.Flags().StringVarP(
		&deleteOciAccountConfigPath,
		"config", "c", "", "Path to file with oci account config.",
	)
	DeleteOciAccountCmd.Flags().StringVarP(
		&deleteOciAccountName,
		"name", "n", "", "Name of oci account.",
	)
	DeleteOciAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteOciAccountCmd.Flags().StringVarP(
		&deleteOciAccountVersion,
		"version", "v", "v0", "Version of oci accounts object to delete. One of: [v0]",
	)
}

var (
	describeOciAccountConfigPath string
	describeOciAccountName       string
	describeOciAccountField      string
	describeOciAccountOutput     string
	describeOciAccountVersion    string
)

// DescribeOciAccountCmd representes the oci-account command
var DescribeOciAccountCmd = &cobra.Command{
	Example: "  # Get the plain output description for a oci account\n  tptctl describe oci-account -n some-oci-account\n\n  # Get JSON output for a oci account\n  tptctl describe oci-account -n some-oci-account -o json\n\n  # Get the value of the Name field for a oci account\n  tptctl describe oci-account -n some-oci-account -f Name ",
	Long:    "Describe a oci account.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeOciAccountConfigPath,
			describeOciAccountName,
			"oci account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeOciAccountOutput,
			"oci account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get oci account
		var ociAccount interface{}
		switch describeOciAccountVersion {
		case "v0":
			// load oci account config by name or config file
			var ociAccountConfig config_v0.OciAccountConfig
			if describeOciAccountConfigPath != "" {
				configContent, err := os.ReadFile(describeOciAccountConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociAccountConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociAccountConfig = config_v0.OciAccountConfig{
					OciAccount: config_v0.OciAccountValues{
						Name: &describeOciAccountName,
					},
				}
			}

			// get oci account object by name
			obj, err := client_v0.GetOciAccountByName(
				apiClient,
				apiEndpoint,
				*ociAccountConfig.OciAccount.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve oci account details", err)
				os.Exit(1)
			}
			ociAccount = obj

			// return plain output if requested
			if describeOciAccountOutput == "plain" {
				if err := outputDescribev0OciAccountCmd(
					ociAccount.(*api_v0.OciAccount),
					&ociAccountConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe oci account", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeOciAccountField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				ociAccount,
				describeOciAccountField,
			)
			if err != nil {
				cli.Error("failed to get field value from oci account", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(ociAccount, describeOciAccountField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeOciAccountOutput {
		case "json":
			// redact encrypted values
			redactedOciAccount := encryption.RedactEncryptedValues(ociAccount)

			// marshal to JSON then print
			ociAccountJson, err := json.MarshalIndent(redactedOciAccount, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci account into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(ociAccountJson))
		case "yaml":
			// redact encrypted values
			redactedOciAccount := encryption.RedactEncryptedValues(ociAccount)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			ociAccountJson, err := json.MarshalIndent(redactedOciAccount, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci account into JSON", err)
				os.Exit(1)
			}
			ociAccountYaml, err := ghodss_yaml.JSONToYAML(ociAccountJson)
			if err != nil {
				cli.Error("failed to convert oci account JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(ociAccountYaml))
		}
	},
	Short:        "Describe a oci account",
	SilenceUsage: true,
	Use:          "oci-account",
}

func init() {
	DescribeCmd.AddCommand(DescribeOciAccountCmd)

	DescribeOciAccountCmd.Flags().StringVarP(
		&describeOciAccountConfigPath,
		"config", "c", "", "Path to file with oci account config.",
	)
	DescribeOciAccountCmd.Flags().StringVarP(
		&describeOciAccountName,
		"name", "n", "", "Name of oci account.",
	)
	DescribeOciAccountCmd.Flags().StringVarP(
		&describeOciAccountOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeOciAccountCmd.Flags().StringVarP(
		&describeOciAccountField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeOciAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeOciAccountCmd.Flags().StringVarP(
		&describeOciAccountVersion,
		"version", "v", "v0", "Version of oci accounts object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// OciOkeKubernetesRuntimeDefinition
///////////////////////////////////////////////////////////////////////////////

var getOciOkeKubernetesRuntimeDefinitionVersion string

// GetOciOkeKubernetesRuntimeDefinitionsCmd represents the oci-oke-kubernetes-runtime-definition command
var GetOciOkeKubernetesRuntimeDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get oci-oke-kubernetes-runtime-definitions",
	Long:    "Get oci oke kubernetes runtime definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getOciOkeKubernetesRuntimeDefinitionVersion {
		case "v0":
			// get oci oke kubernetes runtime definitions
			ociOkeKubernetesRuntimeDefinitions, err := client_v0.GetOciOkeKubernetesRuntimeDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve oci oke kubernetes runtime definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*ociOkeKubernetesRuntimeDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No oci oke kubernetes runtime definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0OciOkeKubernetesRuntimeDefinitionsCmd(
				ociOkeKubernetesRuntimeDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get oci oke kubernetes runtime definitions from the system",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-definitions",
}

func init() {
	GetCmd.AddCommand(GetOciOkeKubernetesRuntimeDefinitionsCmd)

	GetOciOkeKubernetesRuntimeDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetOciOkeKubernetesRuntimeDefinitionsCmd.Flags().StringVarP(
		&getOciOkeKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime definitions object to retrieve. One of: [v0]",
	)
}

var (
	createOciOkeKubernetesRuntimeDefinitionConfigPath string
	createOciOkeKubernetesRuntimeDefinitionVersion    string
)

// CreateOciOkeKubernetesRuntimeDefinitionCmd represents the oci-oke-kubernetes-runtime-definition command
var CreateOciOkeKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  tptctl create oci-oke-kubernetes-runtime-definition --config path/to/config.yaml",
	Long:    "Create a new oci oke kubernetes runtime definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read oci oke kubernetes runtime definition config
		configContent, err := os.ReadFile(createOciOkeKubernetesRuntimeDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create oci oke kubernetes runtime definition based on version
		switch createOciOkeKubernetesRuntimeDefinitionVersion {
		case "v0":
			var ociOkeKubernetesRuntimeDefinitionConfig config_v0.OciOkeKubernetesRuntimeDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create oci oke kubernetes runtime definition
			ociOkeKubernetesRuntimeDefinition := ociOkeKubernetesRuntimeDefinitionConfig.OciOkeKubernetesRuntimeDefinition
			createdOciOkeKubernetesRuntimeDefinition, err := ociOkeKubernetesRuntimeDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create oci oke kubernetes runtime definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime definition %s created", *createdOciOkeKubernetesRuntimeDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new oci oke kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-definition",
}

func init() {
	CreateCmd.AddCommand(CreateOciOkeKubernetesRuntimeDefinitionCmd)

	CreateOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime definition config.",
	)
	CreateOciOkeKubernetesRuntimeDefinitionCmd.MarkFlagRequired("config")
	CreateOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime definitions object to create. One of: [v0]",
	)
}

var (
	deleteOciOkeKubernetesRuntimeDefinitionConfigPath string
	deleteOciOkeKubernetesRuntimeDefinitionName       string
	deleteOciOkeKubernetesRuntimeDefinitionVersion    string
)

// DeleteOciOkeKubernetesRuntimeDefinitionCmd represents the oci-oke-kubernetes-runtime-definition command
var DeleteOciOkeKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete oci-oke-kubernetes-runtime-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete oci-oke-kubernetes-runtime-definition --name some-oci-oke-kubernetes-runtime-definition",
	Long:    "Delete an existing oci oke kubernetes runtime definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteOciOkeKubernetesRuntimeDefinitionConfigPath,
			deleteOciOkeKubernetesRuntimeDefinitionName,
			"oci oke kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete oci oke kubernetes runtime definition based on version
		switch deleteOciOkeKubernetesRuntimeDefinitionVersion {
		case "v0":
			var ociOkeKubernetesRuntimeDefinitionConfig config_v0.OciOkeKubernetesRuntimeDefinitionConfig
			if deleteOciOkeKubernetesRuntimeDefinitionConfigPath != "" {
				// load oci oke kubernetes runtime definition config
				configContent, err := os.ReadFile(deleteOciOkeKubernetesRuntimeDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociOkeKubernetesRuntimeDefinitionConfig = config_v0.OciOkeKubernetesRuntimeDefinitionConfig{
					OciOkeKubernetesRuntimeDefinition: config_v0.OciOkeKubernetesRuntimeDefinitionValues{
						Name: &deleteOciOkeKubernetesRuntimeDefinitionName,
					},
				}
			}

			// delete oci oke kubernetes runtime definition
			ociOkeKubernetesRuntimeDefinition := ociOkeKubernetesRuntimeDefinitionConfig.OciOkeKubernetesRuntimeDefinition
			deletedOciOkeKubernetesRuntimeDefinition, err := ociOkeKubernetesRuntimeDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete oci oke kubernetes runtime definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime definition %s deleted", *deletedOciOkeKubernetesRuntimeDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing oci oke kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteOciOkeKubernetesRuntimeDefinitionCmd)

	DeleteOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime definition config.",
	)
	DeleteOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeDefinitionName,
		"name", "n", "", "Name of oci oke kubernetes runtime definition.",
	)
	DeleteOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime definitions object to delete. One of: [v0]",
	)
}

var (
	describeOciOkeKubernetesRuntimeDefinitionConfigPath string
	describeOciOkeKubernetesRuntimeDefinitionName       string
	describeOciOkeKubernetesRuntimeDefinitionField      string
	describeOciOkeKubernetesRuntimeDefinitionOutput     string
	describeOciOkeKubernetesRuntimeDefinitionVersion    string
)

// DescribeOciOkeKubernetesRuntimeDefinitionCmd representes the oci-oke-kubernetes-runtime-definition command
var DescribeOciOkeKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a oci oke kubernetes runtime definition\n  tptctl describe oci-oke-kubernetes-runtime-definition -n some-oci-oke-kubernetes-runtime-definition\n\n  # Get JSON output for a oci oke kubernetes runtime definition\n  tptctl describe oci-oke-kubernetes-runtime-definition -n some-oci-oke-kubernetes-runtime-definition -o json\n\n  # Get the value of the Name field for a oci oke kubernetes runtime definition\n  tptctl describe oci-oke-kubernetes-runtime-definition -n some-oci-oke-kubernetes-runtime-definition -f Name ",
	Long:    "Describe a oci oke kubernetes runtime definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeOciOkeKubernetesRuntimeDefinitionConfigPath,
			describeOciOkeKubernetesRuntimeDefinitionName,
			"oci oke kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeOciOkeKubernetesRuntimeDefinitionOutput,
			"oci oke kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get oci oke kubernetes runtime definition
		var ociOkeKubernetesRuntimeDefinition interface{}
		switch describeOciOkeKubernetesRuntimeDefinitionVersion {
		case "v0":
			// load oci oke kubernetes runtime definition config by name or config file
			var ociOkeKubernetesRuntimeDefinitionConfig config_v0.OciOkeKubernetesRuntimeDefinitionConfig
			if describeOciOkeKubernetesRuntimeDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeOciOkeKubernetesRuntimeDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociOkeKubernetesRuntimeDefinitionConfig = config_v0.OciOkeKubernetesRuntimeDefinitionConfig{
					OciOkeKubernetesRuntimeDefinition: config_v0.OciOkeKubernetesRuntimeDefinitionValues{
						Name: &describeOciOkeKubernetesRuntimeDefinitionName,
					},
				}
			}

			// get oci oke kubernetes runtime definition object by name
			obj, err := client_v0.GetOciOkeKubernetesRuntimeDefinitionByName(
				apiClient,
				apiEndpoint,
				*ociOkeKubernetesRuntimeDefinitionConfig.OciOkeKubernetesRuntimeDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve oci oke kubernetes runtime definition details", err)
				os.Exit(1)
			}
			ociOkeKubernetesRuntimeDefinition = obj

			// return plain output if requested
			if describeOciOkeKubernetesRuntimeDefinitionOutput == "plain" {
				if err := outputDescribev0OciOkeKubernetesRuntimeDefinitionCmd(
					ociOkeKubernetesRuntimeDefinition.(*api_v0.OciOkeKubernetesRuntimeDefinition),
					&ociOkeKubernetesRuntimeDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe oci oke kubernetes runtime definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeOciOkeKubernetesRuntimeDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				ociOkeKubernetesRuntimeDefinition,
				describeOciOkeKubernetesRuntimeDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from oci oke kubernetes runtime definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(ociOkeKubernetesRuntimeDefinition, describeOciOkeKubernetesRuntimeDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeOciOkeKubernetesRuntimeDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedOciOkeKubernetesRuntimeDefinition := encryption.RedactEncryptedValues(ociOkeKubernetesRuntimeDefinition)

			// marshal to JSON then print
			ociOkeKubernetesRuntimeDefinitionJson, err := json.MarshalIndent(redactedOciOkeKubernetesRuntimeDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci oke kubernetes runtime definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(ociOkeKubernetesRuntimeDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedOciOkeKubernetesRuntimeDefinition := encryption.RedactEncryptedValues(ociOkeKubernetesRuntimeDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			ociOkeKubernetesRuntimeDefinitionJson, err := json.MarshalIndent(redactedOciOkeKubernetesRuntimeDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci oke kubernetes runtime definition into JSON", err)
				os.Exit(1)
			}
			ociOkeKubernetesRuntimeDefinitionYaml, err := ghodss_yaml.JSONToYAML(ociOkeKubernetesRuntimeDefinitionJson)
			if err != nil {
				cli.Error("failed to convert oci oke kubernetes runtime definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(ociOkeKubernetesRuntimeDefinitionYaml))
		}
	},
	Short:        "Describe a oci oke kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeOciOkeKubernetesRuntimeDefinitionCmd)

	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime definition config.",
	)
	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeDefinitionName,
		"name", "n", "", "Name of oci oke kubernetes runtime definition.",
	)
	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeOciOkeKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// OciOkeKubernetesRuntime
///////////////////////////////////////////////////////////////////////////////

// GetOciOkeKubernetesRuntimesCmd represents the oci-oke-kubernetes-runtime command
var GetOciOkeKubernetesRuntimesCmd = &cobra.Command{
	Example: "  tptctl get oci-oke-kubernetes-runtimes",
	Long:    "Get oci oke kubernetes runtimes from the system.\n\nA oci oke kubernetes runtime is a simple abstraction of oci oke kubernetes runtime definitions and oci oke kubernetes runtime instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		// get oci oke kubernetes runtimes
		v0ociOkeKubernetesRuntimeInstances, err := client_v0.GetOciOkeKubernetesRuntimeInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve oci oke kubernetes runtime instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0ociOkeKubernetesRuntimeInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No oci oke kubernetes runtime instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetOciOkeKubernetesRuntimesCmd(
			v0ociOkeKubernetesRuntimeInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get oci oke kubernetes runtimes from the system",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtimes",
}

func init() {
	GetCmd.AddCommand(GetOciOkeKubernetesRuntimesCmd)

	GetOciOkeKubernetesRuntimesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createOciOkeKubernetesRuntimeConfigPath string
	createOciOkeKubernetesRuntimeVersion    string
)

// CreateOciOkeKubernetesRuntimeCmd represents the oci-oke-kubernetes-runtime command
var CreateOciOkeKubernetesRuntimeCmd = &cobra.Command{
	Example: "  tptctl create oci-oke-kubernetes-runtime --config path/to/config.yaml",
	Long:    "Create a new oci oke kubernetes runtime. This command creates a new oci oke kubernetes runtime definition and oci oke kubernetes runtime instance based on the oci oke kubernetes runtime config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read oci oke kubernetes runtime config
		configContent, err := os.ReadFile(createOciOkeKubernetesRuntimeConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create oci oke kubernetes runtime based on version
		switch createOciOkeKubernetesRuntimeVersion {
		case "v0":
			var ociOkeKubernetesRuntimeConfig config_v0.OciOkeKubernetesRuntimeConfig
			if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create oci oke kubernetes runtime
			ociOkeKubernetesRuntime := ociOkeKubernetesRuntimeConfig.OciOkeKubernetesRuntime
			createdOciOkeKubernetesRuntimeDefinition, createdOciOkeKubernetesRuntimeInstance, err := ociOkeKubernetesRuntime.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create oci oke kubernetes runtime", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("oci oke kubernetes runtime definition %s created", *createdOciOkeKubernetesRuntimeDefinition.Name))
			cli.Info(fmt.Sprintf("oci oke kubernetes runtime instance %s created", *createdOciOkeKubernetesRuntimeInstance.Name))
			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime %s created", *ociOkeKubernetesRuntimeConfig.OciOkeKubernetesRuntime.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new oci oke kubernetes runtime",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime",
}

func init() {
	CreateCmd.AddCommand(CreateOciOkeKubernetesRuntimeCmd)

	CreateOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime config.",
	)
	CreateOciOkeKubernetesRuntimeCmd.MarkFlagRequired("config")
	CreateOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtimes object to create. One of: [v0]",
	)
}

var (
	deleteOciOkeKubernetesRuntimeConfigPath string
	deleteOciOkeKubernetesRuntimeName       string
	deleteOciOkeKubernetesRuntimeVersion    string
)

// DeleteOciOkeKubernetesRuntimeCmd represents the oci-oke-kubernetes-runtime command
var DeleteOciOkeKubernetesRuntimeCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete oci-oke-kubernetes-runtime --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete oci-oke-kubernetes-runtime --name some-oci-oke-kubernetes-runtime",
	Long:    "Delete an existing oci oke kubernetes runtime. This command deletes an existing oci oke kubernetes runtime definition and oci oke kubernetes runtime instance based on the oci oke kubernetes runtime config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if deleteOciOkeKubernetesRuntimeConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read oci oke kubernetes runtime config
		configContent, err := os.ReadFile(deleteOciOkeKubernetesRuntimeConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete oci oke kubernetes runtime based on version
		switch deleteOciOkeKubernetesRuntimeVersion {
		case "v0":
			var ociOkeKubernetesRuntimeConfig config_v0.OciOkeKubernetesRuntimeConfig
			if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete oci oke kubernetes runtime
			ociOkeKubernetesRuntime := ociOkeKubernetesRuntimeConfig.OciOkeKubernetesRuntime
			_, _, err = ociOkeKubernetesRuntime.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete oci oke kubernetes runtime", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("oci oke kubernetes runtime definition %s deleted", *ociOkeKubernetesRuntime.Name))
			cli.Info(fmt.Sprintf("oci oke kubernetes runtime instance %s deleted", *ociOkeKubernetesRuntime.Name))
			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime %s deleted", *ociOkeKubernetesRuntimeConfig.OciOkeKubernetesRuntime.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing oci oke kubernetes runtime",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime",
}

func init() {
	DeleteCmd.AddCommand(DeleteOciOkeKubernetesRuntimeCmd)

	DeleteOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime config.",
	)
	DeleteOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteOciOkeKubernetesRuntimeCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtimes object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// OciOkeKubernetesRuntimeInstance
///////////////////////////////////////////////////////////////////////////////

var getOciOkeKubernetesRuntimeInstanceVersion string

// GetOciOkeKubernetesRuntimeInstancesCmd represents the oci-oke-kubernetes-runtime-instance command
var GetOciOkeKubernetesRuntimeInstancesCmd = &cobra.Command{
	Example: "  tptctl get oci-oke-kubernetes-runtime-instances",
	Long:    "Get oci oke kubernetes runtime instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getOciOkeKubernetesRuntimeInstanceVersion {
		case "v0":
			// get oci oke kubernetes runtime instances
			ociOkeKubernetesRuntimeInstances, err := client_v0.GetOciOkeKubernetesRuntimeInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve oci oke kubernetes runtime instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*ociOkeKubernetesRuntimeInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No oci oke kubernetes runtime instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0OciOkeKubernetesRuntimeInstancesCmd(
				ociOkeKubernetesRuntimeInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get oci oke kubernetes runtime instances from the system",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-instances",
}

func init() {
	GetCmd.AddCommand(GetOciOkeKubernetesRuntimeInstancesCmd)

	GetOciOkeKubernetesRuntimeInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetOciOkeKubernetesRuntimeInstancesCmd.Flags().StringVarP(
		&getOciOkeKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime instances object to retrieve. One of: [v0]",
	)
}

var (
	createOciOkeKubernetesRuntimeInstanceConfigPath string
	createOciOkeKubernetesRuntimeInstanceVersion    string
)

// CreateOciOkeKubernetesRuntimeInstanceCmd represents the oci-oke-kubernetes-runtime-instance command
var CreateOciOkeKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  tptctl create oci-oke-kubernetes-runtime-instance --config path/to/config.yaml",
	Long:    "Create a new oci oke kubernetes runtime instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read oci oke kubernetes runtime instance config
		configContent, err := os.ReadFile(createOciOkeKubernetesRuntimeInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create oci oke kubernetes runtime instance based on version
		switch createOciOkeKubernetesRuntimeInstanceVersion {
		case "v0":
			var ociOkeKubernetesRuntimeInstanceConfig config_v0.OciOkeKubernetesRuntimeInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create oci oke kubernetes runtime instance
			ociOkeKubernetesRuntimeInstance := ociOkeKubernetesRuntimeInstanceConfig.OciOkeKubernetesRuntimeInstance
			createdOciOkeKubernetesRuntimeInstance, err := ociOkeKubernetesRuntimeInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create oci oke kubernetes runtime instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime instance %s created", *createdOciOkeKubernetesRuntimeInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new oci oke kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-instance",
}

func init() {
	CreateCmd.AddCommand(CreateOciOkeKubernetesRuntimeInstanceCmd)

	CreateOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime instance config.",
	)
	CreateOciOkeKubernetesRuntimeInstanceCmd.MarkFlagRequired("config")
	CreateOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&createOciOkeKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime instances object to create. One of: [v0]",
	)
}

var (
	deleteOciOkeKubernetesRuntimeInstanceConfigPath string
	deleteOciOkeKubernetesRuntimeInstanceName       string
	deleteOciOkeKubernetesRuntimeInstanceVersion    string
)

// DeleteOciOkeKubernetesRuntimeInstanceCmd represents the oci-oke-kubernetes-runtime-instance command
var DeleteOciOkeKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete oci-oke-kubernetes-runtime-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete oci-oke-kubernetes-runtime-instance --name some-oci-oke-kubernetes-runtime-instance",
	Long:    "Delete an existing oci oke kubernetes runtime instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteOciOkeKubernetesRuntimeInstanceConfigPath,
			deleteOciOkeKubernetesRuntimeInstanceName,
			"oci oke kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete oci oke kubernetes runtime instance based on version
		switch deleteOciOkeKubernetesRuntimeInstanceVersion {
		case "v0":
			var ociOkeKubernetesRuntimeInstanceConfig config_v0.OciOkeKubernetesRuntimeInstanceConfig
			if deleteOciOkeKubernetesRuntimeInstanceConfigPath != "" {
				// load oci oke kubernetes runtime instance config
				configContent, err := os.ReadFile(deleteOciOkeKubernetesRuntimeInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociOkeKubernetesRuntimeInstanceConfig = config_v0.OciOkeKubernetesRuntimeInstanceConfig{
					OciOkeKubernetesRuntimeInstance: config_v0.OciOkeKubernetesRuntimeInstanceValues{
						Name: &deleteOciOkeKubernetesRuntimeInstanceName,
					},
				}
			}

			// delete oci oke kubernetes runtime instance
			ociOkeKubernetesRuntimeInstance := ociOkeKubernetesRuntimeInstanceConfig.OciOkeKubernetesRuntimeInstance
			deletedOciOkeKubernetesRuntimeInstance, err := ociOkeKubernetesRuntimeInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete oci oke kubernetes runtime instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("oci oke kubernetes runtime instance %s deleted", *deletedOciOkeKubernetesRuntimeInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing oci oke kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteOciOkeKubernetesRuntimeInstanceCmd)

	DeleteOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime instance config.",
	)
	DeleteOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeInstanceName,
		"name", "n", "", "Name of oci oke kubernetes runtime instance.",
	)
	DeleteOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteOciOkeKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime instances object to delete. One of: [v0]",
	)
}

var (
	describeOciOkeKubernetesRuntimeInstanceConfigPath string
	describeOciOkeKubernetesRuntimeInstanceName       string
	describeOciOkeKubernetesRuntimeInstanceField      string
	describeOciOkeKubernetesRuntimeInstanceOutput     string
	describeOciOkeKubernetesRuntimeInstanceVersion    string
)

// DescribeOciOkeKubernetesRuntimeInstanceCmd representes the oci-oke-kubernetes-runtime-instance command
var DescribeOciOkeKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a oci oke kubernetes runtime instance\n  tptctl describe oci-oke-kubernetes-runtime-instance -n some-oci-oke-kubernetes-runtime-instance\n\n  # Get JSON output for a oci oke kubernetes runtime instance\n  tptctl describe oci-oke-kubernetes-runtime-instance -n some-oci-oke-kubernetes-runtime-instance -o json\n\n  # Get the value of the Name field for a oci oke kubernetes runtime instance\n  tptctl describe oci-oke-kubernetes-runtime-instance -n some-oci-oke-kubernetes-runtime-instance -f Name ",
	Long:    "Describe a oci oke kubernetes runtime instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeOciOkeKubernetesRuntimeInstanceConfigPath,
			describeOciOkeKubernetesRuntimeInstanceName,
			"oci oke kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeOciOkeKubernetesRuntimeInstanceOutput,
			"oci oke kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get oci oke kubernetes runtime instance
		var ociOkeKubernetesRuntimeInstance interface{}
		switch describeOciOkeKubernetesRuntimeInstanceVersion {
		case "v0":
			// load oci oke kubernetes runtime instance config by name or config file
			var ociOkeKubernetesRuntimeInstanceConfig config_v0.OciOkeKubernetesRuntimeInstanceConfig
			if describeOciOkeKubernetesRuntimeInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeOciOkeKubernetesRuntimeInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &ociOkeKubernetesRuntimeInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				ociOkeKubernetesRuntimeInstanceConfig = config_v0.OciOkeKubernetesRuntimeInstanceConfig{
					OciOkeKubernetesRuntimeInstance: config_v0.OciOkeKubernetesRuntimeInstanceValues{
						Name: &describeOciOkeKubernetesRuntimeInstanceName,
					},
				}
			}

			// get oci oke kubernetes runtime instance object by name
			obj, err := client_v0.GetOciOkeKubernetesRuntimeInstanceByName(
				apiClient,
				apiEndpoint,
				*ociOkeKubernetesRuntimeInstanceConfig.OciOkeKubernetesRuntimeInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve oci oke kubernetes runtime instance details", err)
				os.Exit(1)
			}
			ociOkeKubernetesRuntimeInstance = obj

			// return plain output if requested
			if describeOciOkeKubernetesRuntimeInstanceOutput == "plain" {
				if err := outputDescribev0OciOkeKubernetesRuntimeInstanceCmd(
					ociOkeKubernetesRuntimeInstance.(*api_v0.OciOkeKubernetesRuntimeInstance),
					&ociOkeKubernetesRuntimeInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe oci oke kubernetes runtime instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeOciOkeKubernetesRuntimeInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				ociOkeKubernetesRuntimeInstance,
				describeOciOkeKubernetesRuntimeInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from oci oke kubernetes runtime instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(ociOkeKubernetesRuntimeInstance, describeOciOkeKubernetesRuntimeInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeOciOkeKubernetesRuntimeInstanceOutput {
		case "json":
			// redact encrypted values
			redactedOciOkeKubernetesRuntimeInstance := encryption.RedactEncryptedValues(ociOkeKubernetesRuntimeInstance)

			// marshal to JSON then print
			ociOkeKubernetesRuntimeInstanceJson, err := json.MarshalIndent(redactedOciOkeKubernetesRuntimeInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci oke kubernetes runtime instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(ociOkeKubernetesRuntimeInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedOciOkeKubernetesRuntimeInstance := encryption.RedactEncryptedValues(ociOkeKubernetesRuntimeInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			ociOkeKubernetesRuntimeInstanceJson, err := json.MarshalIndent(redactedOciOkeKubernetesRuntimeInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal oci oke kubernetes runtime instance into JSON", err)
				os.Exit(1)
			}
			ociOkeKubernetesRuntimeInstanceYaml, err := ghodss_yaml.JSONToYAML(ociOkeKubernetesRuntimeInstanceJson)
			if err != nil {
				cli.Error("failed to convert oci oke kubernetes runtime instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(ociOkeKubernetesRuntimeInstanceYaml))
		}
	},
	Short:        "Describe a oci oke kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "oci-oke-kubernetes-runtime-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeOciOkeKubernetesRuntimeInstanceCmd)

	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with oci oke kubernetes runtime instance config.",
	)
	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeInstanceName,
		"name", "n", "", "Name of oci oke kubernetes runtime instance.",
	)
	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeOciOkeKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeOciOkeKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of oci oke kubernetes runtime instances object to describe. One of: [v0]",
	)
}
