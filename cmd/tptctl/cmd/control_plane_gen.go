// generated by 'threeport-sdk codegen api-model' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// ControlPlane
///////////////////////////////////////////////////////////////////////////////

// GetControlPlanesCmd represents the control-plane command
var GetControlPlanesCmd = &cobra.Command{
	Example: "  tptctl get control-planes",
	Long:    "Get control planes from the system.\n\nA control plane is a simple abstraction of control plane definitions and control plane instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get control planes
		controlPlaneInstances, err := client.GetControlPlaneInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve control plane instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*controlPlaneInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No control plane instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetControlPlanesCmd(
			controlPlaneInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get control planes from the system",
	SilenceUsage: true,
	Use:          "control-planes",
}

func init() {
	GetCmd.AddCommand(GetControlPlanesCmd)

	GetControlPlanesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createControlPlaneConfigPath string

// CreateControlPlaneCmd represents the control-plane command
var CreateControlPlaneCmd = &cobra.Command{
	Example: "  tptctl create control-plane --config path/to/config.yaml",
	Long:    "Create a new control plane. This command creates a new control plane definition and control plane instance based on the control plane config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load control plane config
		configContent, err := os.ReadFile(createControlPlaneConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var controlPlaneConfig config.ControlPlaneConfig
		if err := yaml.UnmarshalStrict(configContent, &controlPlaneConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create control plane
		controlPlane := controlPlaneConfig.ControlPlane
		createdControlPlaneDefinition, createdControlPlaneInstance, err := controlPlane.Create(
			apiClient,
			apiEndpoint,
		)
		if err != nil {
			cli.Error("failed to create control plane", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("control plane definition %s created", *createdControlPlaneDefinition.Name))
		cli.Info(fmt.Sprintf("control plane instance %s created", *createdControlPlaneInstance.Name))
		cli.Complete(fmt.Sprintf("control plane %s created", controlPlaneConfig.ControlPlane.Name))
	},
	Short:        "Create a new control plane",
	SilenceUsage: true,
	Use:          "control-plane",
}

func init() {
	CreateCmd.AddCommand(CreateControlPlaneCmd)

	CreateControlPlaneCmd.Flags().StringVarP(
		&createControlPlaneConfigPath,
		"config", "c", "", "Path to file with control plane config.",
	)
	CreateControlPlaneCmd.MarkFlagRequired("config")
	CreateControlPlaneCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteControlPlaneConfigPath string
	deleteControlPlaneName       string
)

// DeleteControlPlaneCmd represents the control-plane command
var DeleteControlPlaneCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete control-plane --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete control-plane --name some-control-plane",
	Long:    "Delete an existing control plane. This command deletes an existing control plane definition and control plane instance based on the control plane config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if deleteControlPlaneConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		var controlPlaneConfig config.ControlPlaneConfig
		// load control plane config
		configContent, err := os.ReadFile(deleteControlPlaneConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		if err := yaml.UnmarshalStrict(configContent, &controlPlaneConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// delete control plane
		controlPlane := controlPlaneConfig.ControlPlane
		_, _, err = controlPlane.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete control plane", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("control plane definition %s deleted", controlPlane.Name))
		cli.Info(fmt.Sprintf("control plane instance %s deleted", controlPlane.Name))
		cli.Complete(fmt.Sprintf("control plane %s deleted", controlPlaneConfig.ControlPlane.Name))
	},
	Short:        "Delete an existing control plane",
	SilenceUsage: true,
	Use:          "control-plane",
}

func init() {
	DeleteCmd.AddCommand(DeleteControlPlaneCmd)

	DeleteControlPlaneCmd.Flags().StringVarP(
		&deleteControlPlaneConfigPath,
		"config", "c", "", "Path to file with control plane config.",
	)
	DeleteControlPlaneCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// ControlPlaneDefinition
///////////////////////////////////////////////////////////////////////////////

// GetControlPlaneDefinitionsCmd represents the control-plane-definition command
var GetControlPlaneDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get control-plane-definitions",
	Long:    "Get control plane definitions from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get control plane definitions
		controlPlaneDefinitions, err := client.GetControlPlaneDefinitions(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve control plane definitions", err)
			os.Exit(1)
		}

		// write the output
		if len(*controlPlaneDefinitions) == 0 {
			cli.Info(fmt.Sprintf(
				"No control plane definitions currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetControlPlaneDefinitionsCmd(
			controlPlaneDefinitions,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get control plane definitions from the system",
	SilenceUsage: true,
	Use:          "control-plane-definitions",
}

func init() {
	GetCmd.AddCommand(GetControlPlaneDefinitionsCmd)

	GetControlPlaneDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createControlPlaneDefinitionConfigPath string

// CreateControlPlaneDefinitionCmd represents the control-plane-definition command
var CreateControlPlaneDefinitionCmd = &cobra.Command{
	Example: "  tptctl create control-plane-definition --config path/to/config.yaml",
	Long:    "Create a new control plane definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load control plane definition config
		configContent, err := os.ReadFile(createControlPlaneDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var controlPlaneDefinitionConfig config.ControlPlaneDefinitionConfig
		if err := yaml.UnmarshalStrict(configContent, &controlPlaneDefinitionConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create control plane definition
		controlPlaneDefinition := controlPlaneDefinitionConfig.ControlPlaneDefinition
		createdControlPlaneDefinition, err := controlPlaneDefinition.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create control plane definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("control plane definition %s created", *createdControlPlaneDefinition.Name))
	},
	Short:        "Create a new control plane definition",
	SilenceUsage: true,
	Use:          "control-plane-definition",
}

func init() {
	CreateCmd.AddCommand(CreateControlPlaneDefinitionCmd)

	CreateControlPlaneDefinitionCmd.Flags().StringVarP(
		&createControlPlaneDefinitionConfigPath,
		"config", "c", "", "Path to file with control plane definition config.",
	)
	CreateControlPlaneDefinitionCmd.MarkFlagRequired("config")
	CreateControlPlaneDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteControlPlaneDefinitionConfigPath string
	deleteControlPlaneDefinitionName       string
)

// DeleteControlPlaneDefinitionCmd represents the control-plane-definition command
var DeleteControlPlaneDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete control-plane-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete control-plane-definition --name some-control-plane-definition",
	Long:    "Delete an existing control plane definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteControlPlaneDefinitionConfigPath,
			deleteControlPlaneDefinitionName,
			"control plane definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var controlPlaneDefinitionConfig config.ControlPlaneDefinitionConfig
		if deleteControlPlaneDefinitionConfigPath != "" {
			// load control plane definition config
			configContent, err := os.ReadFile(deleteControlPlaneDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &controlPlaneDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			controlPlaneDefinitionConfig = config.ControlPlaneDefinitionConfig{
				ControlPlaneDefinition: config.ControlPlaneDefinitionValues{
					Name: deleteControlPlaneDefinitionName,
				},
			}
		}

		// delete control plane definition
		controlPlaneDefinition := controlPlaneDefinitionConfig.ControlPlaneDefinition
		deletedControlPlaneDefinition, err := controlPlaneDefinition.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete control plane definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("control plane definition %s deleted", *deletedControlPlaneDefinition.Name))
	},
	Short:        "Delete an existing control plane definition",
	SilenceUsage: true,
	Use:          "control-plane-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteControlPlaneDefinitionCmd)

	DeleteControlPlaneDefinitionCmd.Flags().StringVarP(
		&deleteControlPlaneDefinitionConfigPath,
		"config", "c", "", "Path to file with control plane definition config.",
	)
	DeleteControlPlaneDefinitionCmd.Flags().StringVarP(
		&deleteControlPlaneDefinitionName,
		"name", "n", "", "Name of control plane definition.",
	)
	DeleteControlPlaneDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeControlPlaneDefinitionConfigPath string
	describeControlPlaneDefinitionName       string
	describeControlPlaneDefinitionField      string
	describeControlPlaneDefinitionOutput     string
)

// DescribeControlPlaneDefinitionCmd representes the control-plane-definition command
var DescribeControlPlaneDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a control plane definition\n  tptctl describe control-plane-definition -n some-control-plane-definition\n\n  # Get JSON output for a control plane definition\n  tptctl describe control-plane-definition -n some-control-plane-definition -o json\n\n  # Get the value of the Name field for a control plane definition\n  tptctl describe control-plane-definition -n some-control-plane-definition -f Name ",
	Long:    "Describe a control plane definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeControlPlaneDefinitionConfigPath,
			describeControlPlaneDefinitionName,
			"control plane definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeControlPlaneDefinitionOutput,
			"control plane definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load control plane definition config by name or config file
		var controlPlaneDefinitionConfig config.ControlPlaneDefinitionConfig
		if describeControlPlaneDefinitionConfigPath != "" {
			configContent, err := os.ReadFile(describeControlPlaneDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &controlPlaneDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			controlPlaneDefinitionConfig = config.ControlPlaneDefinitionConfig{
				ControlPlaneDefinition: config.ControlPlaneDefinitionValues{
					Name: describeControlPlaneDefinitionName,
				},
			}
		}

		// get control plane definition
		controlPlaneDefinition, err := client.GetControlPlaneDefinitionByName(
			apiClient,
			apiEndpoint,
			controlPlaneDefinitionConfig.ControlPlaneDefinition.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve control plane definition details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeControlPlaneDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				controlPlaneDefinition,
				describeControlPlaneDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from control plane definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(controlPlaneDefinition, describeControlPlaneDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeControlPlaneDefinitionOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeControlPlaneDefinitionCmd(
				controlPlaneDefinition,
				&controlPlaneDefinitionConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe control plane definition", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedControlPlaneDefinition := encryption.RedactEncryptedValues(controlPlaneDefinition)

			// marshal to JSON then print
			controlPlaneDefinitionJson, err := json.MarshalIndent(redactedControlPlaneDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal control plane definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(controlPlaneDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedControlPlaneDefinition := encryption.RedactEncryptedValues(controlPlaneDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			controlPlaneDefinitionJson, err := json.MarshalIndent(redactedControlPlaneDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal control plane definition into JSON", err)
				os.Exit(1)
			}
			controlPlaneDefinitionYaml, err := ghodss_yaml.JSONToYAML(controlPlaneDefinitionJson)
			if err != nil {
				cli.Error("failed to convert control plane definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(controlPlaneDefinitionYaml))
		}
	},
	Short:        "Describe a control plane definition",
	SilenceUsage: true,
	Use:          "control-plane-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeControlPlaneDefinitionCmd)

	DescribeControlPlaneDefinitionCmd.Flags().StringVarP(
		&describeControlPlaneDefinitionConfigPath,
		"config", "c", "", "Path to file with control plane definition config.")
	DescribeControlPlaneDefinitionCmd.Flags().StringVarP(
		&describeControlPlaneDefinitionName,
		"name", "n", "", "Name of control plane definition.")
	DescribeControlPlaneDefinitionCmd.Flags().StringVarP(
		&describeControlPlaneDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeControlPlaneDefinitionCmd.Flags().StringVarP(
		&describeControlPlaneDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeControlPlaneDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// ControlPlaneInstance
///////////////////////////////////////////////////////////////////////////////

// GetControlPlaneInstancesCmd represents the control-plane-instance command
var GetControlPlaneInstancesCmd = &cobra.Command{
	Example: "  tptctl get control-plane-instances",
	Long:    "Get control plane instances from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get control plane instances
		controlPlaneInstances, err := client.GetControlPlaneInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve control plane instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*controlPlaneInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No control plane instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetControlPlaneInstancesCmd(
			controlPlaneInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get control plane instances from the system",
	SilenceUsage: true,
	Use:          "control-plane-instances",
}

func init() {
	GetCmd.AddCommand(GetControlPlaneInstancesCmd)

	GetControlPlaneInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createControlPlaneInstanceConfigPath string

// CreateControlPlaneInstanceCmd represents the control-plane-instance command
var CreateControlPlaneInstanceCmd = &cobra.Command{
	Example: "  tptctl create control-plane-instance --config path/to/config.yaml",
	Long:    "Create a new control plane instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load control plane instance config
		configContent, err := os.ReadFile(createControlPlaneInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var controlPlaneInstanceConfig config.ControlPlaneInstanceConfig
		if err := yaml.UnmarshalStrict(configContent, &controlPlaneInstanceConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create control plane instance
		controlPlaneInstance := controlPlaneInstanceConfig.ControlPlaneInstance
		createdControlPlaneInstance, err := controlPlaneInstance.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create control plane instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("control plane instance %s created", *createdControlPlaneInstance.Name))
	},
	Short:        "Create a new control plane instance",
	SilenceUsage: true,
	Use:          "control-plane-instance",
}

func init() {
	CreateCmd.AddCommand(CreateControlPlaneInstanceCmd)

	CreateControlPlaneInstanceCmd.Flags().StringVarP(
		&createControlPlaneInstanceConfigPath,
		"config", "c", "", "Path to file with control plane instance config.",
	)
	CreateControlPlaneInstanceCmd.MarkFlagRequired("config")
	CreateControlPlaneInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteControlPlaneInstanceConfigPath string
	deleteControlPlaneInstanceName       string
)

// DeleteControlPlaneInstanceCmd represents the control-plane-instance command
var DeleteControlPlaneInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete control-plane-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete control-plane-instance --name some-control-plane-instance",
	Long:    "Delete an existing control plane instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteControlPlaneInstanceConfigPath,
			deleteControlPlaneInstanceName,
			"control plane instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var controlPlaneInstanceConfig config.ControlPlaneInstanceConfig
		if deleteControlPlaneInstanceConfigPath != "" {
			// load control plane instance config
			configContent, err := os.ReadFile(deleteControlPlaneInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &controlPlaneInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			controlPlaneInstanceConfig = config.ControlPlaneInstanceConfig{
				ControlPlaneInstance: config.ControlPlaneInstanceValues{
					Name: deleteControlPlaneInstanceName,
				},
			}
		}

		// delete control plane instance
		controlPlaneInstance := controlPlaneInstanceConfig.ControlPlaneInstance
		deletedControlPlaneInstance, err := controlPlaneInstance.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete control plane instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("control plane instance %s deleted", *deletedControlPlaneInstance.Name))
	},
	Short:        "Delete an existing control plane instance",
	SilenceUsage: true,
	Use:          "control-plane-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteControlPlaneInstanceCmd)

	DeleteControlPlaneInstanceCmd.Flags().StringVarP(
		&deleteControlPlaneInstanceConfigPath,
		"config", "c", "", "Path to file with control plane instance config.",
	)
	DeleteControlPlaneInstanceCmd.Flags().StringVarP(
		&deleteControlPlaneInstanceName,
		"name", "n", "", "Name of control plane instance.",
	)
	DeleteControlPlaneInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeControlPlaneInstanceConfigPath string
	describeControlPlaneInstanceName       string
	describeControlPlaneInstanceField      string
	describeControlPlaneInstanceOutput     string
)

// DescribeControlPlaneInstanceCmd representes the control-plane-instance command
var DescribeControlPlaneInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a control plane instance\n  tptctl describe control-plane-instance -n some-control-plane-instance\n\n  # Get JSON output for a control plane instance\n  tptctl describe control-plane-instance -n some-control-plane-instance -o json\n\n  # Get the value of the Name field for a control plane instance\n  tptctl describe control-plane-instance -n some-control-plane-instance -f Name ",
	Long:    "Describe a control plane instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeControlPlaneInstanceConfigPath,
			describeControlPlaneInstanceName,
			"control plane instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeControlPlaneInstanceOutput,
			"control plane instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load control plane instance config by name or config file
		var controlPlaneInstanceConfig config.ControlPlaneInstanceConfig
		if describeControlPlaneInstanceConfigPath != "" {
			configContent, err := os.ReadFile(describeControlPlaneInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &controlPlaneInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			controlPlaneInstanceConfig = config.ControlPlaneInstanceConfig{
				ControlPlaneInstance: config.ControlPlaneInstanceValues{
					Name: describeControlPlaneInstanceName,
				},
			}
		}

		// get control plane instance
		controlPlaneInstance, err := client.GetControlPlaneInstanceByName(
			apiClient,
			apiEndpoint,
			controlPlaneInstanceConfig.ControlPlaneInstance.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve control plane instance details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeControlPlaneInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				controlPlaneInstance,
				describeControlPlaneInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from control plane instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(controlPlaneInstance, describeControlPlaneInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeControlPlaneInstanceOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeControlPlaneInstanceCmd(
				controlPlaneInstance,
				&controlPlaneInstanceConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe control plane instance", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedControlPlaneInstance := encryption.RedactEncryptedValues(controlPlaneInstance)

			// marshal to JSON then print
			controlPlaneInstanceJson, err := json.MarshalIndent(redactedControlPlaneInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal control plane instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(controlPlaneInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedControlPlaneInstance := encryption.RedactEncryptedValues(controlPlaneInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			controlPlaneInstanceJson, err := json.MarshalIndent(redactedControlPlaneInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal control plane instance into JSON", err)
				os.Exit(1)
			}
			controlPlaneInstanceYaml, err := ghodss_yaml.JSONToYAML(controlPlaneInstanceJson)
			if err != nil {
				cli.Error("failed to convert control plane instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(controlPlaneInstanceYaml))
		}
	},
	Short:        "Describe a control plane instance",
	SilenceUsage: true,
	Use:          "control-plane-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeControlPlaneInstanceCmd)

	DescribeControlPlaneInstanceCmd.Flags().StringVarP(
		&describeControlPlaneInstanceConfigPath,
		"config", "c", "", "Path to file with control plane instance config.")
	DescribeControlPlaneInstanceCmd.Flags().StringVarP(
		&describeControlPlaneInstanceName,
		"name", "n", "", "Name of control plane instance.")
	DescribeControlPlaneInstanceCmd.Flags().StringVarP(
		&describeControlPlaneInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeControlPlaneInstanceCmd.Flags().StringVarP(
		&describeControlPlaneInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeControlPlaneInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}
