// generated by 'threeport-sdk gen' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	api_v0 "github.com/threeport/threeport/pkg/api/v0"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client_v0 "github.com/threeport/threeport/pkg/client/v0"
	config_v0 "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// AwsAccount
///////////////////////////////////////////////////////////////////////////////

var getAwsAccountVersion string

// GetAwsAccountsCmd represents the aws-account command
var GetAwsAccountsCmd = &cobra.Command{
	Example: "  tptctl get aws-accounts",
	Long:    "Get aws accounts from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsAccountVersion {
		case "v0":
			// get aws accounts
			awsAccounts, err := client_v0.GetAwsAccounts(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws accounts", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsAccounts) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws accounts currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsAccountsCmd(
				awsAccounts,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws accounts from the system",
	SilenceUsage: true,
	Use:          "aws-accounts",
}

func init() {
	GetCmd.AddCommand(GetAwsAccountsCmd)

	GetAwsAccountsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsAccountsCmd.Flags().StringVarP(
		&getAwsAccountVersion,
		"version", "v", "v0", "Version of aws accounts object to retrieve. One of: [v0]",
	)
}

var (
	createAwsAccountConfigPath string
	createAwsAccountVersion    string
)

// CreateAwsAccountCmd represents the aws-account command
var CreateAwsAccountCmd = &cobra.Command{
	Example: "  tptctl create aws-account --config path/to/config.yaml",
	Long:    "Create a new aws account.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws account config
		configContent, err := os.ReadFile(createAwsAccountConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws account based on version
		switch createAwsAccountVersion {
		case "v0":
			var awsAccountConfig config_v0.AwsAccountConfig
			if err := yaml.UnmarshalStrict(configContent, &awsAccountConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws account
			awsAccount := awsAccountConfig.AwsAccount
			createdAwsAccount, err := awsAccount.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws account", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws account %s created", *createdAwsAccount.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws account",
	SilenceUsage: true,
	Use:          "aws-account",
}

func init() {
	CreateCmd.AddCommand(CreateAwsAccountCmd)

	CreateAwsAccountCmd.Flags().StringVarP(
		&createAwsAccountConfigPath,
		"config", "c", "", "Path to file with aws account config.",
	)
	CreateAwsAccountCmd.MarkFlagRequired("config")
	CreateAwsAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsAccountCmd.Flags().StringVarP(
		&createAwsAccountVersion,
		"version", "v", "v0", "Version of aws accounts object to create. One of: [v0]",
	)
}

var (
	deleteAwsAccountConfigPath string
	deleteAwsAccountName       string
	deleteAwsAccountVersion    string
)

// DeleteAwsAccountCmd represents the aws-account command
var DeleteAwsAccountCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-account --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-account --name some-aws-account",
	Long:    "Delete an existing aws account.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsAccountConfigPath,
			deleteAwsAccountName,
			"aws account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws account based on version
		switch deleteAwsAccountVersion {
		case "v0":
			var awsAccountConfig config_v0.AwsAccountConfig
			if deleteAwsAccountConfigPath != "" {
				// load aws account config
				configContent, err := os.ReadFile(deleteAwsAccountConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsAccountConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsAccountConfig = config_v0.AwsAccountConfig{
					AwsAccount: config_v0.AwsAccountValues{
						Name: &deleteAwsAccountName,
					},
				}
			}

			// delete aws account
			awsAccount := awsAccountConfig.AwsAccount
			deletedAwsAccount, err := awsAccount.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws account", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws account %s deleted", *deletedAwsAccount.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws account",
	SilenceUsage: true,
	Use:          "aws-account",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsAccountCmd)

	DeleteAwsAccountCmd.Flags().StringVarP(
		&deleteAwsAccountConfigPath,
		"config", "c", "", "Path to file with aws account config.",
	)
	DeleteAwsAccountCmd.Flags().StringVarP(
		&deleteAwsAccountName,
		"name", "n", "", "Name of aws account.",
	)
	DeleteAwsAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsAccountCmd.Flags().StringVarP(
		&deleteAwsAccountVersion,
		"version", "v", "v0", "Version of aws accounts object to delete. One of: [v0]",
	)
}

var (
	describeAwsAccountConfigPath string
	describeAwsAccountName       string
	describeAwsAccountField      string
	describeAwsAccountOutput     string
	describeAwsAccountVersion    string
)

// DescribeAwsAccountCmd representes the aws-account command
var DescribeAwsAccountCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws account\n  tptctl describe aws-account -n some-aws-account\n\n  # Get JSON output for a aws account\n  tptctl describe aws-account -n some-aws-account -o json\n\n  # Get the value of the Name field for a aws account\n  tptctl describe aws-account -n some-aws-account -f Name ",
	Long:    "Describe a aws account.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsAccountConfigPath,
			describeAwsAccountName,
			"aws account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsAccountOutput,
			"aws account",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws account
		var awsAccount interface{}
		switch describeAwsAccountVersion {
		case "v0":
			// load aws account config by name or config file
			var awsAccountConfig config_v0.AwsAccountConfig
			if describeAwsAccountConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsAccountConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsAccountConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsAccountConfig = config_v0.AwsAccountConfig{
					AwsAccount: config_v0.AwsAccountValues{
						Name: &describeAwsAccountName,
					},
				}
			}

			// get aws account object by name
			obj, err := client_v0.GetAwsAccountByName(
				apiClient,
				apiEndpoint,
				*awsAccountConfig.AwsAccount.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws account details", err)
				os.Exit(1)
			}
			awsAccount = obj

			// return plain output if requested
			if describeAwsAccountOutput == "plain" {
				if err := outputDescribev0AwsAccountCmd(
					awsAccount.(*api_v0.AwsAccount),
					&awsAccountConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws account", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsAccountField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsAccount,
				describeAwsAccountField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws account", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsAccount, describeAwsAccountField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsAccountOutput {
		case "json":
			// redact encrypted values
			redactedAwsAccount := encryption.RedactEncryptedValues(awsAccount)

			// marshal to JSON then print
			awsAccountJson, err := json.MarshalIndent(redactedAwsAccount, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws account into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsAccountJson))
		case "yaml":
			// redact encrypted values
			redactedAwsAccount := encryption.RedactEncryptedValues(awsAccount)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsAccountJson, err := json.MarshalIndent(redactedAwsAccount, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws account into JSON", err)
				os.Exit(1)
			}
			awsAccountYaml, err := ghodss_yaml.JSONToYAML(awsAccountJson)
			if err != nil {
				cli.Error("failed to convert aws account JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsAccountYaml))
		}
	},
	Short:        "Describe a aws account",
	SilenceUsage: true,
	Use:          "aws-account",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsAccountCmd)

	DescribeAwsAccountCmd.Flags().StringVarP(
		&describeAwsAccountConfigPath,
		"config", "c", "", "Path to file with aws account config.",
	)
	DescribeAwsAccountCmd.Flags().StringVarP(
		&describeAwsAccountName,
		"name", "n", "", "Name of aws account.",
	)
	DescribeAwsAccountCmd.Flags().StringVarP(
		&describeAwsAccountOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsAccountCmd.Flags().StringVarP(
		&describeAwsAccountField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsAccountCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsAccountCmd.Flags().StringVarP(
		&describeAwsAccountVersion,
		"version", "v", "v0", "Version of aws accounts object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsEksKubernetesRuntimeDefinition
///////////////////////////////////////////////////////////////////////////////

var getAwsEksKubernetesRuntimeDefinitionVersion string

// GetAwsEksKubernetesRuntimeDefinitionsCmd represents the aws-eks-kubernetes-runtime-definition command
var GetAwsEksKubernetesRuntimeDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get aws-eks-kubernetes-runtime-definitions",
	Long:    "Get aws eks kubernetes runtime definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsEksKubernetesRuntimeDefinitionVersion {
		case "v0":
			// get aws eks kubernetes runtime definitions
			awsEksKubernetesRuntimeDefinitions, err := client_v0.GetAwsEksKubernetesRuntimeDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws eks kubernetes runtime definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsEksKubernetesRuntimeDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws eks kubernetes runtime definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsEksKubernetesRuntimeDefinitionsCmd(
				awsEksKubernetesRuntimeDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws eks kubernetes runtime definitions from the system",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-definitions",
}

func init() {
	GetCmd.AddCommand(GetAwsEksKubernetesRuntimeDefinitionsCmd)

	GetAwsEksKubernetesRuntimeDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsEksKubernetesRuntimeDefinitionsCmd.Flags().StringVarP(
		&getAwsEksKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime definitions object to retrieve. One of: [v0]",
	)
}

var (
	createAwsEksKubernetesRuntimeDefinitionConfigPath string
	createAwsEksKubernetesRuntimeDefinitionVersion    string
)

// CreateAwsEksKubernetesRuntimeDefinitionCmd represents the aws-eks-kubernetes-runtime-definition command
var CreateAwsEksKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  tptctl create aws-eks-kubernetes-runtime-definition --config path/to/config.yaml",
	Long:    "Create a new aws eks kubernetes runtime definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws eks kubernetes runtime definition config
		configContent, err := os.ReadFile(createAwsEksKubernetesRuntimeDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws eks kubernetes runtime definition based on version
		switch createAwsEksKubernetesRuntimeDefinitionVersion {
		case "v0":
			var awsEksKubernetesRuntimeDefinitionConfig config_v0.AwsEksKubernetesRuntimeDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws eks kubernetes runtime definition
			awsEksKubernetesRuntimeDefinition := awsEksKubernetesRuntimeDefinitionConfig.AwsEksKubernetesRuntimeDefinition
			createdAwsEksKubernetesRuntimeDefinition, err := awsEksKubernetesRuntimeDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws eks kubernetes runtime definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime definition %s created", *createdAwsEksKubernetesRuntimeDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws eks kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-definition",
}

func init() {
	CreateCmd.AddCommand(CreateAwsEksKubernetesRuntimeDefinitionCmd)

	CreateAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime definition config.",
	)
	CreateAwsEksKubernetesRuntimeDefinitionCmd.MarkFlagRequired("config")
	CreateAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime definitions object to create. One of: [v0]",
	)
}

var (
	deleteAwsEksKubernetesRuntimeDefinitionConfigPath string
	deleteAwsEksKubernetesRuntimeDefinitionName       string
	deleteAwsEksKubernetesRuntimeDefinitionVersion    string
)

// DeleteAwsEksKubernetesRuntimeDefinitionCmd represents the aws-eks-kubernetes-runtime-definition command
var DeleteAwsEksKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-eks-kubernetes-runtime-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-eks-kubernetes-runtime-definition --name some-aws-eks-kubernetes-runtime-definition",
	Long:    "Delete an existing aws eks kubernetes runtime definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsEksKubernetesRuntimeDefinitionConfigPath,
			deleteAwsEksKubernetesRuntimeDefinitionName,
			"aws eks kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws eks kubernetes runtime definition based on version
		switch deleteAwsEksKubernetesRuntimeDefinitionVersion {
		case "v0":
			var awsEksKubernetesRuntimeDefinitionConfig config_v0.AwsEksKubernetesRuntimeDefinitionConfig
			if deleteAwsEksKubernetesRuntimeDefinitionConfigPath != "" {
				// load aws eks kubernetes runtime definition config
				configContent, err := os.ReadFile(deleteAwsEksKubernetesRuntimeDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsEksKubernetesRuntimeDefinitionConfig = config_v0.AwsEksKubernetesRuntimeDefinitionConfig{
					AwsEksKubernetesRuntimeDefinition: config_v0.AwsEksKubernetesRuntimeDefinitionValues{
						Name: &deleteAwsEksKubernetesRuntimeDefinitionName,
					},
				}
			}

			// delete aws eks kubernetes runtime definition
			awsEksKubernetesRuntimeDefinition := awsEksKubernetesRuntimeDefinitionConfig.AwsEksKubernetesRuntimeDefinition
			deletedAwsEksKubernetesRuntimeDefinition, err := awsEksKubernetesRuntimeDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws eks kubernetes runtime definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime definition %s deleted", *deletedAwsEksKubernetesRuntimeDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws eks kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsEksKubernetesRuntimeDefinitionCmd)

	DeleteAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime definition config.",
	)
	DeleteAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeDefinitionName,
		"name", "n", "", "Name of aws eks kubernetes runtime definition.",
	)
	DeleteAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime definitions object to delete. One of: [v0]",
	)
}

var (
	describeAwsEksKubernetesRuntimeDefinitionConfigPath string
	describeAwsEksKubernetesRuntimeDefinitionName       string
	describeAwsEksKubernetesRuntimeDefinitionField      string
	describeAwsEksKubernetesRuntimeDefinitionOutput     string
	describeAwsEksKubernetesRuntimeDefinitionVersion    string
)

// DescribeAwsEksKubernetesRuntimeDefinitionCmd representes the aws-eks-kubernetes-runtime-definition command
var DescribeAwsEksKubernetesRuntimeDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws eks kubernetes runtime definition\n  tptctl describe aws-eks-kubernetes-runtime-definition -n some-aws-eks-kubernetes-runtime-definition\n\n  # Get JSON output for a aws eks kubernetes runtime definition\n  tptctl describe aws-eks-kubernetes-runtime-definition -n some-aws-eks-kubernetes-runtime-definition -o json\n\n  # Get the value of the Name field for a aws eks kubernetes runtime definition\n  tptctl describe aws-eks-kubernetes-runtime-definition -n some-aws-eks-kubernetes-runtime-definition -f Name ",
	Long:    "Describe a aws eks kubernetes runtime definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsEksKubernetesRuntimeDefinitionConfigPath,
			describeAwsEksKubernetesRuntimeDefinitionName,
			"aws eks kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsEksKubernetesRuntimeDefinitionOutput,
			"aws eks kubernetes runtime definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws eks kubernetes runtime definition
		var awsEksKubernetesRuntimeDefinition interface{}
		switch describeAwsEksKubernetesRuntimeDefinitionVersion {
		case "v0":
			// load aws eks kubernetes runtime definition config by name or config file
			var awsEksKubernetesRuntimeDefinitionConfig config_v0.AwsEksKubernetesRuntimeDefinitionConfig
			if describeAwsEksKubernetesRuntimeDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsEksKubernetesRuntimeDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsEksKubernetesRuntimeDefinitionConfig = config_v0.AwsEksKubernetesRuntimeDefinitionConfig{
					AwsEksKubernetesRuntimeDefinition: config_v0.AwsEksKubernetesRuntimeDefinitionValues{
						Name: &describeAwsEksKubernetesRuntimeDefinitionName,
					},
				}
			}

			// get aws eks kubernetes runtime definition object by name
			obj, err := client_v0.GetAwsEksKubernetesRuntimeDefinitionByName(
				apiClient,
				apiEndpoint,
				*awsEksKubernetesRuntimeDefinitionConfig.AwsEksKubernetesRuntimeDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws eks kubernetes runtime definition details", err)
				os.Exit(1)
			}
			awsEksKubernetesRuntimeDefinition = obj

			// return plain output if requested
			if describeAwsEksKubernetesRuntimeDefinitionOutput == "plain" {
				if err := outputDescribev0AwsEksKubernetesRuntimeDefinitionCmd(
					awsEksKubernetesRuntimeDefinition.(*api_v0.AwsEksKubernetesRuntimeDefinition),
					&awsEksKubernetesRuntimeDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws eks kubernetes runtime definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsEksKubernetesRuntimeDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsEksKubernetesRuntimeDefinition,
				describeAwsEksKubernetesRuntimeDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws eks kubernetes runtime definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsEksKubernetesRuntimeDefinition, describeAwsEksKubernetesRuntimeDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsEksKubernetesRuntimeDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedAwsEksKubernetesRuntimeDefinition := encryption.RedactEncryptedValues(awsEksKubernetesRuntimeDefinition)

			// marshal to JSON then print
			awsEksKubernetesRuntimeDefinitionJson, err := json.MarshalIndent(redactedAwsEksKubernetesRuntimeDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws eks kubernetes runtime definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsEksKubernetesRuntimeDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedAwsEksKubernetesRuntimeDefinition := encryption.RedactEncryptedValues(awsEksKubernetesRuntimeDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsEksKubernetesRuntimeDefinitionJson, err := json.MarshalIndent(redactedAwsEksKubernetesRuntimeDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws eks kubernetes runtime definition into JSON", err)
				os.Exit(1)
			}
			awsEksKubernetesRuntimeDefinitionYaml, err := ghodss_yaml.JSONToYAML(awsEksKubernetesRuntimeDefinitionJson)
			if err != nil {
				cli.Error("failed to convert aws eks kubernetes runtime definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsEksKubernetesRuntimeDefinitionYaml))
		}
	},
	Short:        "Describe a aws eks kubernetes runtime definition",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsEksKubernetesRuntimeDefinitionCmd)

	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeDefinitionConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime definition config.",
	)
	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeDefinitionName,
		"name", "n", "", "Name of aws eks kubernetes runtime definition.",
	)
	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsEksKubernetesRuntimeDefinitionCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeDefinitionVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsEksKubernetesRuntime
///////////////////////////////////////////////////////////////////////////////

// GetAwsEksKubernetesRuntimesCmd represents the aws-eks-kubernetes-runtime command
var GetAwsEksKubernetesRuntimesCmd = &cobra.Command{
	Example: "  tptctl get aws-eks-kubernetes-runtimes",
	Long:    "Get aws eks kubernetes runtimes from the system.\n\nA aws eks kubernetes runtime is a simple abstraction of aws eks kubernetes runtime definitions and aws eks kubernetes runtime instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		// get aws eks kubernetes runtimes
		v0awsEksKubernetesRuntimeInstances, err := client_v0.GetAwsEksKubernetesRuntimeInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve aws eks kubernetes runtime instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0awsEksKubernetesRuntimeInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No aws eks kubernetes runtime instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetAwsEksKubernetesRuntimesCmd(
			v0awsEksKubernetesRuntimeInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get aws eks kubernetes runtimes from the system",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtimes",
}

func init() {
	GetCmd.AddCommand(GetAwsEksKubernetesRuntimesCmd)

	GetAwsEksKubernetesRuntimesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createAwsEksKubernetesRuntimeConfigPath string
	createAwsEksKubernetesRuntimeVersion    string
)

// CreateAwsEksKubernetesRuntimeCmd represents the aws-eks-kubernetes-runtime command
var CreateAwsEksKubernetesRuntimeCmd = &cobra.Command{
	Example: "  tptctl create aws-eks-kubernetes-runtime --config path/to/config.yaml",
	Long:    "Create a new aws eks kubernetes runtime. This command creates a new aws eks kubernetes runtime definition and aws eks kubernetes runtime instance based on the aws eks kubernetes runtime config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws eks kubernetes runtime config
		configContent, err := os.ReadFile(createAwsEksKubernetesRuntimeConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create aws eks kubernetes runtime based on version
		switch createAwsEksKubernetesRuntimeVersion {
		case "v0":
			var awsEksKubernetesRuntimeConfig config_v0.AwsEksKubernetesRuntimeConfig
			if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws eks kubernetes runtime
			awsEksKubernetesRuntime := awsEksKubernetesRuntimeConfig.AwsEksKubernetesRuntime
			createdAwsEksKubernetesRuntimeDefinition, createdAwsEksKubernetesRuntimeInstance, err := awsEksKubernetesRuntime.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create aws eks kubernetes runtime", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws eks kubernetes runtime definition %s created", *createdAwsEksKubernetesRuntimeDefinition.Name))
			cli.Info(fmt.Sprintf("aws eks kubernetes runtime instance %s created", *createdAwsEksKubernetesRuntimeInstance.Name))
			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime %s created", *awsEksKubernetesRuntimeConfig.AwsEksKubernetesRuntime.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws eks kubernetes runtime",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime",
}

func init() {
	CreateCmd.AddCommand(CreateAwsEksKubernetesRuntimeCmd)

	CreateAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime config.",
	)
	CreateAwsEksKubernetesRuntimeCmd.MarkFlagRequired("config")
	CreateAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtimes object to create. One of: [v0]",
	)
}

var (
	deleteAwsEksKubernetesRuntimeConfigPath string
	deleteAwsEksKubernetesRuntimeName       string
	deleteAwsEksKubernetesRuntimeVersion    string
)

// DeleteAwsEksKubernetesRuntimeCmd represents the aws-eks-kubernetes-runtime command
var DeleteAwsEksKubernetesRuntimeCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-eks-kubernetes-runtime --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-eks-kubernetes-runtime --name some-aws-eks-kubernetes-runtime",
	Long:    "Delete an existing aws eks kubernetes runtime. This command deletes an existing aws eks kubernetes runtime definition and aws eks kubernetes runtime instance based on the aws eks kubernetes runtime config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if deleteAwsEksKubernetesRuntimeConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read aws eks kubernetes runtime config
		configContent, err := os.ReadFile(deleteAwsEksKubernetesRuntimeConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete aws eks kubernetes runtime based on version
		switch deleteAwsEksKubernetesRuntimeVersion {
		case "v0":
			var awsEksKubernetesRuntimeConfig config_v0.AwsEksKubernetesRuntimeConfig
			if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete aws eks kubernetes runtime
			awsEksKubernetesRuntime := awsEksKubernetesRuntimeConfig.AwsEksKubernetesRuntime
			_, _, err = awsEksKubernetesRuntime.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws eks kubernetes runtime", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws eks kubernetes runtime definition %s deleted", *awsEksKubernetesRuntime.Name))
			cli.Info(fmt.Sprintf("aws eks kubernetes runtime instance %s deleted", *awsEksKubernetesRuntime.Name))
			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime %s deleted", *awsEksKubernetesRuntimeConfig.AwsEksKubernetesRuntime.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws eks kubernetes runtime",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsEksKubernetesRuntimeCmd)

	DeleteAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime config.",
	)
	DeleteAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsEksKubernetesRuntimeCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtimes object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsEksKubernetesRuntimeInstance
///////////////////////////////////////////////////////////////////////////////

var getAwsEksKubernetesRuntimeInstanceVersion string

// GetAwsEksKubernetesRuntimeInstancesCmd represents the aws-eks-kubernetes-runtime-instance command
var GetAwsEksKubernetesRuntimeInstancesCmd = &cobra.Command{
	Example: "  tptctl get aws-eks-kubernetes-runtime-instances",
	Long:    "Get aws eks kubernetes runtime instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsEksKubernetesRuntimeInstanceVersion {
		case "v0":
			// get aws eks kubernetes runtime instances
			awsEksKubernetesRuntimeInstances, err := client_v0.GetAwsEksKubernetesRuntimeInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws eks kubernetes runtime instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsEksKubernetesRuntimeInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws eks kubernetes runtime instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsEksKubernetesRuntimeInstancesCmd(
				awsEksKubernetesRuntimeInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws eks kubernetes runtime instances from the system",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-instances",
}

func init() {
	GetCmd.AddCommand(GetAwsEksKubernetesRuntimeInstancesCmd)

	GetAwsEksKubernetesRuntimeInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsEksKubernetesRuntimeInstancesCmd.Flags().StringVarP(
		&getAwsEksKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime instances object to retrieve. One of: [v0]",
	)
}

var (
	createAwsEksKubernetesRuntimeInstanceConfigPath string
	createAwsEksKubernetesRuntimeInstanceVersion    string
)

// CreateAwsEksKubernetesRuntimeInstanceCmd represents the aws-eks-kubernetes-runtime-instance command
var CreateAwsEksKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  tptctl create aws-eks-kubernetes-runtime-instance --config path/to/config.yaml",
	Long:    "Create a new aws eks kubernetes runtime instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws eks kubernetes runtime instance config
		configContent, err := os.ReadFile(createAwsEksKubernetesRuntimeInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws eks kubernetes runtime instance based on version
		switch createAwsEksKubernetesRuntimeInstanceVersion {
		case "v0":
			var awsEksKubernetesRuntimeInstanceConfig config_v0.AwsEksKubernetesRuntimeInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws eks kubernetes runtime instance
			awsEksKubernetesRuntimeInstance := awsEksKubernetesRuntimeInstanceConfig.AwsEksKubernetesRuntimeInstance
			createdAwsEksKubernetesRuntimeInstance, err := awsEksKubernetesRuntimeInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws eks kubernetes runtime instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime instance %s created", *createdAwsEksKubernetesRuntimeInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws eks kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-instance",
}

func init() {
	CreateCmd.AddCommand(CreateAwsEksKubernetesRuntimeInstanceCmd)

	CreateAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime instance config.",
	)
	CreateAwsEksKubernetesRuntimeInstanceCmd.MarkFlagRequired("config")
	CreateAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&createAwsEksKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime instances object to create. One of: [v0]",
	)
}

var (
	deleteAwsEksKubernetesRuntimeInstanceConfigPath string
	deleteAwsEksKubernetesRuntimeInstanceName       string
	deleteAwsEksKubernetesRuntimeInstanceVersion    string
)

// DeleteAwsEksKubernetesRuntimeInstanceCmd represents the aws-eks-kubernetes-runtime-instance command
var DeleteAwsEksKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-eks-kubernetes-runtime-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-eks-kubernetes-runtime-instance --name some-aws-eks-kubernetes-runtime-instance",
	Long:    "Delete an existing aws eks kubernetes runtime instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsEksKubernetesRuntimeInstanceConfigPath,
			deleteAwsEksKubernetesRuntimeInstanceName,
			"aws eks kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws eks kubernetes runtime instance based on version
		switch deleteAwsEksKubernetesRuntimeInstanceVersion {
		case "v0":
			var awsEksKubernetesRuntimeInstanceConfig config_v0.AwsEksKubernetesRuntimeInstanceConfig
			if deleteAwsEksKubernetesRuntimeInstanceConfigPath != "" {
				// load aws eks kubernetes runtime instance config
				configContent, err := os.ReadFile(deleteAwsEksKubernetesRuntimeInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsEksKubernetesRuntimeInstanceConfig = config_v0.AwsEksKubernetesRuntimeInstanceConfig{
					AwsEksKubernetesRuntimeInstance: config_v0.AwsEksKubernetesRuntimeInstanceValues{
						Name: &deleteAwsEksKubernetesRuntimeInstanceName,
					},
				}
			}

			// delete aws eks kubernetes runtime instance
			awsEksKubernetesRuntimeInstance := awsEksKubernetesRuntimeInstanceConfig.AwsEksKubernetesRuntimeInstance
			deletedAwsEksKubernetesRuntimeInstance, err := awsEksKubernetesRuntimeInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws eks kubernetes runtime instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws eks kubernetes runtime instance %s deleted", *deletedAwsEksKubernetesRuntimeInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws eks kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsEksKubernetesRuntimeInstanceCmd)

	DeleteAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime instance config.",
	)
	DeleteAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeInstanceName,
		"name", "n", "", "Name of aws eks kubernetes runtime instance.",
	)
	DeleteAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&deleteAwsEksKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime instances object to delete. One of: [v0]",
	)
}

var (
	describeAwsEksKubernetesRuntimeInstanceConfigPath string
	describeAwsEksKubernetesRuntimeInstanceName       string
	describeAwsEksKubernetesRuntimeInstanceField      string
	describeAwsEksKubernetesRuntimeInstanceOutput     string
	describeAwsEksKubernetesRuntimeInstanceVersion    string
)

// DescribeAwsEksKubernetesRuntimeInstanceCmd representes the aws-eks-kubernetes-runtime-instance command
var DescribeAwsEksKubernetesRuntimeInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws eks kubernetes runtime instance\n  tptctl describe aws-eks-kubernetes-runtime-instance -n some-aws-eks-kubernetes-runtime-instance\n\n  # Get JSON output for a aws eks kubernetes runtime instance\n  tptctl describe aws-eks-kubernetes-runtime-instance -n some-aws-eks-kubernetes-runtime-instance -o json\n\n  # Get the value of the Name field for a aws eks kubernetes runtime instance\n  tptctl describe aws-eks-kubernetes-runtime-instance -n some-aws-eks-kubernetes-runtime-instance -f Name ",
	Long:    "Describe a aws eks kubernetes runtime instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsEksKubernetesRuntimeInstanceConfigPath,
			describeAwsEksKubernetesRuntimeInstanceName,
			"aws eks kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsEksKubernetesRuntimeInstanceOutput,
			"aws eks kubernetes runtime instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws eks kubernetes runtime instance
		var awsEksKubernetesRuntimeInstance interface{}
		switch describeAwsEksKubernetesRuntimeInstanceVersion {
		case "v0":
			// load aws eks kubernetes runtime instance config by name or config file
			var awsEksKubernetesRuntimeInstanceConfig config_v0.AwsEksKubernetesRuntimeInstanceConfig
			if describeAwsEksKubernetesRuntimeInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsEksKubernetesRuntimeInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsEksKubernetesRuntimeInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsEksKubernetesRuntimeInstanceConfig = config_v0.AwsEksKubernetesRuntimeInstanceConfig{
					AwsEksKubernetesRuntimeInstance: config_v0.AwsEksKubernetesRuntimeInstanceValues{
						Name: &describeAwsEksKubernetesRuntimeInstanceName,
					},
				}
			}

			// get aws eks kubernetes runtime instance object by name
			obj, err := client_v0.GetAwsEksKubernetesRuntimeInstanceByName(
				apiClient,
				apiEndpoint,
				*awsEksKubernetesRuntimeInstanceConfig.AwsEksKubernetesRuntimeInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws eks kubernetes runtime instance details", err)
				os.Exit(1)
			}
			awsEksKubernetesRuntimeInstance = obj

			// return plain output if requested
			if describeAwsEksKubernetesRuntimeInstanceOutput == "plain" {
				if err := outputDescribev0AwsEksKubernetesRuntimeInstanceCmd(
					awsEksKubernetesRuntimeInstance.(*api_v0.AwsEksKubernetesRuntimeInstance),
					&awsEksKubernetesRuntimeInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws eks kubernetes runtime instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsEksKubernetesRuntimeInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsEksKubernetesRuntimeInstance,
				describeAwsEksKubernetesRuntimeInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws eks kubernetes runtime instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsEksKubernetesRuntimeInstance, describeAwsEksKubernetesRuntimeInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsEksKubernetesRuntimeInstanceOutput {
		case "json":
			// redact encrypted values
			redactedAwsEksKubernetesRuntimeInstance := encryption.RedactEncryptedValues(awsEksKubernetesRuntimeInstance)

			// marshal to JSON then print
			awsEksKubernetesRuntimeInstanceJson, err := json.MarshalIndent(redactedAwsEksKubernetesRuntimeInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws eks kubernetes runtime instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsEksKubernetesRuntimeInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedAwsEksKubernetesRuntimeInstance := encryption.RedactEncryptedValues(awsEksKubernetesRuntimeInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsEksKubernetesRuntimeInstanceJson, err := json.MarshalIndent(redactedAwsEksKubernetesRuntimeInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws eks kubernetes runtime instance into JSON", err)
				os.Exit(1)
			}
			awsEksKubernetesRuntimeInstanceYaml, err := ghodss_yaml.JSONToYAML(awsEksKubernetesRuntimeInstanceJson)
			if err != nil {
				cli.Error("failed to convert aws eks kubernetes runtime instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsEksKubernetesRuntimeInstanceYaml))
		}
	},
	Short:        "Describe a aws eks kubernetes runtime instance",
	SilenceUsage: true,
	Use:          "aws-eks-kubernetes-runtime-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsEksKubernetesRuntimeInstanceCmd)

	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeInstanceConfigPath,
		"config", "c", "", "Path to file with aws eks kubernetes runtime instance config.",
	)
	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeInstanceName,
		"name", "n", "", "Name of aws eks kubernetes runtime instance.",
	)
	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsEksKubernetesRuntimeInstanceCmd.Flags().StringVarP(
		&describeAwsEksKubernetesRuntimeInstanceVersion,
		"version", "v", "v0", "Version of aws eks kubernetes runtime instances object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsObjectStorageBucketDefinition
///////////////////////////////////////////////////////////////////////////////

var getAwsObjectStorageBucketDefinitionVersion string

// GetAwsObjectStorageBucketDefinitionsCmd represents the aws-object-storage-bucket-definition command
var GetAwsObjectStorageBucketDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get aws-object-storage-bucket-definitions",
	Long:    "Get aws object storage bucket definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsObjectStorageBucketDefinitionVersion {
		case "v0":
			// get aws object storage bucket definitions
			awsObjectStorageBucketDefinitions, err := client_v0.GetAwsObjectStorageBucketDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws object storage bucket definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsObjectStorageBucketDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws object storage bucket definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsObjectStorageBucketDefinitionsCmd(
				awsObjectStorageBucketDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws object storage bucket definitions from the system",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-definitions",
}

func init() {
	GetCmd.AddCommand(GetAwsObjectStorageBucketDefinitionsCmd)

	GetAwsObjectStorageBucketDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsObjectStorageBucketDefinitionsCmd.Flags().StringVarP(
		&getAwsObjectStorageBucketDefinitionVersion,
		"version", "v", "v0", "Version of aws object storage bucket definitions object to retrieve. One of: [v0]",
	)
}

var (
	createAwsObjectStorageBucketDefinitionConfigPath string
	createAwsObjectStorageBucketDefinitionVersion    string
)

// CreateAwsObjectStorageBucketDefinitionCmd represents the aws-object-storage-bucket-definition command
var CreateAwsObjectStorageBucketDefinitionCmd = &cobra.Command{
	Example: "  tptctl create aws-object-storage-bucket-definition --config path/to/config.yaml",
	Long:    "Create a new aws object storage bucket definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws object storage bucket definition config
		configContent, err := os.ReadFile(createAwsObjectStorageBucketDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws object storage bucket definition based on version
		switch createAwsObjectStorageBucketDefinitionVersion {
		case "v0":
			var awsObjectStorageBucketDefinitionConfig config_v0.AwsObjectStorageBucketDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws object storage bucket definition
			awsObjectStorageBucketDefinition := awsObjectStorageBucketDefinitionConfig.AwsObjectStorageBucketDefinition
			createdAwsObjectStorageBucketDefinition, err := awsObjectStorageBucketDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws object storage bucket definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws object storage bucket definition %s created", *createdAwsObjectStorageBucketDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws object storage bucket definition",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-definition",
}

func init() {
	CreateCmd.AddCommand(CreateAwsObjectStorageBucketDefinitionCmd)

	CreateAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketDefinitionConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket definition config.",
	)
	CreateAwsObjectStorageBucketDefinitionCmd.MarkFlagRequired("config")
	CreateAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketDefinitionVersion,
		"version", "v", "v0", "Version of aws object storage bucket definitions object to create. One of: [v0]",
	)
}

var (
	deleteAwsObjectStorageBucketDefinitionConfigPath string
	deleteAwsObjectStorageBucketDefinitionName       string
	deleteAwsObjectStorageBucketDefinitionVersion    string
)

// DeleteAwsObjectStorageBucketDefinitionCmd represents the aws-object-storage-bucket-definition command
var DeleteAwsObjectStorageBucketDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-object-storage-bucket-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-object-storage-bucket-definition --name some-aws-object-storage-bucket-definition",
	Long:    "Delete an existing aws object storage bucket definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsObjectStorageBucketDefinitionConfigPath,
			deleteAwsObjectStorageBucketDefinitionName,
			"aws object storage bucket definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws object storage bucket definition based on version
		switch deleteAwsObjectStorageBucketDefinitionVersion {
		case "v0":
			var awsObjectStorageBucketDefinitionConfig config_v0.AwsObjectStorageBucketDefinitionConfig
			if deleteAwsObjectStorageBucketDefinitionConfigPath != "" {
				// load aws object storage bucket definition config
				configContent, err := os.ReadFile(deleteAwsObjectStorageBucketDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsObjectStorageBucketDefinitionConfig = config_v0.AwsObjectStorageBucketDefinitionConfig{
					AwsObjectStorageBucketDefinition: config_v0.AwsObjectStorageBucketDefinitionValues{
						Name: &deleteAwsObjectStorageBucketDefinitionName,
					},
				}
			}

			// delete aws object storage bucket definition
			awsObjectStorageBucketDefinition := awsObjectStorageBucketDefinitionConfig.AwsObjectStorageBucketDefinition
			deletedAwsObjectStorageBucketDefinition, err := awsObjectStorageBucketDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws object storage bucket definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws object storage bucket definition %s deleted", *deletedAwsObjectStorageBucketDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws object storage bucket definition",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsObjectStorageBucketDefinitionCmd)

	DeleteAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketDefinitionConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket definition config.",
	)
	DeleteAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketDefinitionName,
		"name", "n", "", "Name of aws object storage bucket definition.",
	)
	DeleteAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketDefinitionVersion,
		"version", "v", "v0", "Version of aws object storage bucket definitions object to delete. One of: [v0]",
	)
}

var (
	describeAwsObjectStorageBucketDefinitionConfigPath string
	describeAwsObjectStorageBucketDefinitionName       string
	describeAwsObjectStorageBucketDefinitionField      string
	describeAwsObjectStorageBucketDefinitionOutput     string
	describeAwsObjectStorageBucketDefinitionVersion    string
)

// DescribeAwsObjectStorageBucketDefinitionCmd representes the aws-object-storage-bucket-definition command
var DescribeAwsObjectStorageBucketDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws object storage bucket definition\n  tptctl describe aws-object-storage-bucket-definition -n some-aws-object-storage-bucket-definition\n\n  # Get JSON output for a aws object storage bucket definition\n  tptctl describe aws-object-storage-bucket-definition -n some-aws-object-storage-bucket-definition -o json\n\n  # Get the value of the Name field for a aws object storage bucket definition\n  tptctl describe aws-object-storage-bucket-definition -n some-aws-object-storage-bucket-definition -f Name ",
	Long:    "Describe a aws object storage bucket definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsObjectStorageBucketDefinitionConfigPath,
			describeAwsObjectStorageBucketDefinitionName,
			"aws object storage bucket definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsObjectStorageBucketDefinitionOutput,
			"aws object storage bucket definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws object storage bucket definition
		var awsObjectStorageBucketDefinition interface{}
		switch describeAwsObjectStorageBucketDefinitionVersion {
		case "v0":
			// load aws object storage bucket definition config by name or config file
			var awsObjectStorageBucketDefinitionConfig config_v0.AwsObjectStorageBucketDefinitionConfig
			if describeAwsObjectStorageBucketDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsObjectStorageBucketDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsObjectStorageBucketDefinitionConfig = config_v0.AwsObjectStorageBucketDefinitionConfig{
					AwsObjectStorageBucketDefinition: config_v0.AwsObjectStorageBucketDefinitionValues{
						Name: &describeAwsObjectStorageBucketDefinitionName,
					},
				}
			}

			// get aws object storage bucket definition object by name
			obj, err := client_v0.GetAwsObjectStorageBucketDefinitionByName(
				apiClient,
				apiEndpoint,
				*awsObjectStorageBucketDefinitionConfig.AwsObjectStorageBucketDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws object storage bucket definition details", err)
				os.Exit(1)
			}
			awsObjectStorageBucketDefinition = obj

			// return plain output if requested
			if describeAwsObjectStorageBucketDefinitionOutput == "plain" {
				if err := outputDescribev0AwsObjectStorageBucketDefinitionCmd(
					awsObjectStorageBucketDefinition.(*api_v0.AwsObjectStorageBucketDefinition),
					&awsObjectStorageBucketDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws object storage bucket definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsObjectStorageBucketDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsObjectStorageBucketDefinition,
				describeAwsObjectStorageBucketDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws object storage bucket definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsObjectStorageBucketDefinition, describeAwsObjectStorageBucketDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsObjectStorageBucketDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedAwsObjectStorageBucketDefinition := encryption.RedactEncryptedValues(awsObjectStorageBucketDefinition)

			// marshal to JSON then print
			awsObjectStorageBucketDefinitionJson, err := json.MarshalIndent(redactedAwsObjectStorageBucketDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws object storage bucket definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsObjectStorageBucketDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedAwsObjectStorageBucketDefinition := encryption.RedactEncryptedValues(awsObjectStorageBucketDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsObjectStorageBucketDefinitionJson, err := json.MarshalIndent(redactedAwsObjectStorageBucketDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws object storage bucket definition into JSON", err)
				os.Exit(1)
			}
			awsObjectStorageBucketDefinitionYaml, err := ghodss_yaml.JSONToYAML(awsObjectStorageBucketDefinitionJson)
			if err != nil {
				cli.Error("failed to convert aws object storage bucket definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsObjectStorageBucketDefinitionYaml))
		}
	},
	Short:        "Describe a aws object storage bucket definition",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsObjectStorageBucketDefinitionCmd)

	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketDefinitionConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket definition config.",
	)
	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketDefinitionName,
		"name", "n", "", "Name of aws object storage bucket definition.",
	)
	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsObjectStorageBucketDefinitionCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketDefinitionVersion,
		"version", "v", "v0", "Version of aws object storage bucket definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsObjectStorageBucket
///////////////////////////////////////////////////////////////////////////////

// GetAwsObjectStorageBucketsCmd represents the aws-object-storage-bucket command
var GetAwsObjectStorageBucketsCmd = &cobra.Command{
	Example: "  tptctl get aws-object-storage-buckets",
	Long:    "Get aws object storage buckets from the system.\n\nA aws object storage bucket is a simple abstraction of aws object storage bucket definitions and aws object storage bucket instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		// get aws object storage buckets
		v0awsObjectStorageBucketInstances, err := client_v0.GetAwsObjectStorageBucketInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve aws object storage bucket instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0awsObjectStorageBucketInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No aws object storage bucket instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetAwsObjectStorageBucketsCmd(
			v0awsObjectStorageBucketInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get aws object storage buckets from the system",
	SilenceUsage: true,
	Use:          "aws-object-storage-buckets",
}

func init() {
	GetCmd.AddCommand(GetAwsObjectStorageBucketsCmd)

	GetAwsObjectStorageBucketsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createAwsObjectStorageBucketConfigPath string
	createAwsObjectStorageBucketVersion    string
)

// CreateAwsObjectStorageBucketCmd represents the aws-object-storage-bucket command
var CreateAwsObjectStorageBucketCmd = &cobra.Command{
	Example: "  tptctl create aws-object-storage-bucket --config path/to/config.yaml",
	Long:    "Create a new aws object storage bucket. This command creates a new aws object storage bucket definition and aws object storage bucket instance based on the aws object storage bucket config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws object storage bucket config
		configContent, err := os.ReadFile(createAwsObjectStorageBucketConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create aws object storage bucket based on version
		switch createAwsObjectStorageBucketVersion {
		case "v0":
			var awsObjectStorageBucketConfig config_v0.AwsObjectStorageBucketConfig
			if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws object storage bucket
			awsObjectStorageBucket := awsObjectStorageBucketConfig.AwsObjectStorageBucket
			createdAwsObjectStorageBucketDefinition, createdAwsObjectStorageBucketInstance, err := awsObjectStorageBucket.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create aws object storage bucket", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws object storage bucket definition %s created", *createdAwsObjectStorageBucketDefinition.Name))
			cli.Info(fmt.Sprintf("aws object storage bucket instance %s created", *createdAwsObjectStorageBucketInstance.Name))
			cli.Complete(fmt.Sprintf("aws object storage bucket %s created", *awsObjectStorageBucketConfig.AwsObjectStorageBucket.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws object storage bucket",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket",
}

func init() {
	CreateCmd.AddCommand(CreateAwsObjectStorageBucketCmd)

	CreateAwsObjectStorageBucketCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket config.",
	)
	CreateAwsObjectStorageBucketCmd.MarkFlagRequired("config")
	CreateAwsObjectStorageBucketCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsObjectStorageBucketCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketVersion,
		"version", "v", "v0", "Version of aws object storage buckets object to create. One of: [v0]",
	)
}

var (
	deleteAwsObjectStorageBucketConfigPath string
	deleteAwsObjectStorageBucketName       string
	deleteAwsObjectStorageBucketVersion    string
)

// DeleteAwsObjectStorageBucketCmd represents the aws-object-storage-bucket command
var DeleteAwsObjectStorageBucketCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-object-storage-bucket --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-object-storage-bucket --name some-aws-object-storage-bucket",
	Long:    "Delete an existing aws object storage bucket. This command deletes an existing aws object storage bucket definition and aws object storage bucket instance based on the aws object storage bucket config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if deleteAwsObjectStorageBucketConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read aws object storage bucket config
		configContent, err := os.ReadFile(deleteAwsObjectStorageBucketConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete aws object storage bucket based on version
		switch deleteAwsObjectStorageBucketVersion {
		case "v0":
			var awsObjectStorageBucketConfig config_v0.AwsObjectStorageBucketConfig
			if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete aws object storage bucket
			awsObjectStorageBucket := awsObjectStorageBucketConfig.AwsObjectStorageBucket
			_, _, err = awsObjectStorageBucket.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws object storage bucket", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws object storage bucket definition %s deleted", *awsObjectStorageBucket.Name))
			cli.Info(fmt.Sprintf("aws object storage bucket instance %s deleted", *awsObjectStorageBucket.Name))
			cli.Complete(fmt.Sprintf("aws object storage bucket %s deleted", *awsObjectStorageBucketConfig.AwsObjectStorageBucket.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws object storage bucket",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsObjectStorageBucketCmd)

	DeleteAwsObjectStorageBucketCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket config.",
	)
	DeleteAwsObjectStorageBucketCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsObjectStorageBucketCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketVersion,
		"version", "v", "v0", "Version of aws object storage buckets object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsObjectStorageBucketInstance
///////////////////////////////////////////////////////////////////////////////

var getAwsObjectStorageBucketInstanceVersion string

// GetAwsObjectStorageBucketInstancesCmd represents the aws-object-storage-bucket-instance command
var GetAwsObjectStorageBucketInstancesCmd = &cobra.Command{
	Example: "  tptctl get aws-object-storage-bucket-instances",
	Long:    "Get aws object storage bucket instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsObjectStorageBucketInstanceVersion {
		case "v0":
			// get aws object storage bucket instances
			awsObjectStorageBucketInstances, err := client_v0.GetAwsObjectStorageBucketInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws object storage bucket instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsObjectStorageBucketInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws object storage bucket instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsObjectStorageBucketInstancesCmd(
				awsObjectStorageBucketInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws object storage bucket instances from the system",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-instances",
}

func init() {
	GetCmd.AddCommand(GetAwsObjectStorageBucketInstancesCmd)

	GetAwsObjectStorageBucketInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsObjectStorageBucketInstancesCmd.Flags().StringVarP(
		&getAwsObjectStorageBucketInstanceVersion,
		"version", "v", "v0", "Version of aws object storage bucket instances object to retrieve. One of: [v0]",
	)
}

var (
	createAwsObjectStorageBucketInstanceConfigPath string
	createAwsObjectStorageBucketInstanceVersion    string
)

// CreateAwsObjectStorageBucketInstanceCmd represents the aws-object-storage-bucket-instance command
var CreateAwsObjectStorageBucketInstanceCmd = &cobra.Command{
	Example: "  tptctl create aws-object-storage-bucket-instance --config path/to/config.yaml",
	Long:    "Create a new aws object storage bucket instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws object storage bucket instance config
		configContent, err := os.ReadFile(createAwsObjectStorageBucketInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws object storage bucket instance based on version
		switch createAwsObjectStorageBucketInstanceVersion {
		case "v0":
			var awsObjectStorageBucketInstanceConfig config_v0.AwsObjectStorageBucketInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws object storage bucket instance
			awsObjectStorageBucketInstance := awsObjectStorageBucketInstanceConfig.AwsObjectStorageBucketInstance
			createdAwsObjectStorageBucketInstance, err := awsObjectStorageBucketInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws object storage bucket instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws object storage bucket instance %s created", *createdAwsObjectStorageBucketInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws object storage bucket instance",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-instance",
}

func init() {
	CreateCmd.AddCommand(CreateAwsObjectStorageBucketInstanceCmd)

	CreateAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketInstanceConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket instance config.",
	)
	CreateAwsObjectStorageBucketInstanceCmd.MarkFlagRequired("config")
	CreateAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&createAwsObjectStorageBucketInstanceVersion,
		"version", "v", "v0", "Version of aws object storage bucket instances object to create. One of: [v0]",
	)
}

var (
	deleteAwsObjectStorageBucketInstanceConfigPath string
	deleteAwsObjectStorageBucketInstanceName       string
	deleteAwsObjectStorageBucketInstanceVersion    string
)

// DeleteAwsObjectStorageBucketInstanceCmd represents the aws-object-storage-bucket-instance command
var DeleteAwsObjectStorageBucketInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-object-storage-bucket-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-object-storage-bucket-instance --name some-aws-object-storage-bucket-instance",
	Long:    "Delete an existing aws object storage bucket instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsObjectStorageBucketInstanceConfigPath,
			deleteAwsObjectStorageBucketInstanceName,
			"aws object storage bucket instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws object storage bucket instance based on version
		switch deleteAwsObjectStorageBucketInstanceVersion {
		case "v0":
			var awsObjectStorageBucketInstanceConfig config_v0.AwsObjectStorageBucketInstanceConfig
			if deleteAwsObjectStorageBucketInstanceConfigPath != "" {
				// load aws object storage bucket instance config
				configContent, err := os.ReadFile(deleteAwsObjectStorageBucketInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsObjectStorageBucketInstanceConfig = config_v0.AwsObjectStorageBucketInstanceConfig{
					AwsObjectStorageBucketInstance: config_v0.AwsObjectStorageBucketInstanceValues{
						Name: &deleteAwsObjectStorageBucketInstanceName,
					},
				}
			}

			// delete aws object storage bucket instance
			awsObjectStorageBucketInstance := awsObjectStorageBucketInstanceConfig.AwsObjectStorageBucketInstance
			deletedAwsObjectStorageBucketInstance, err := awsObjectStorageBucketInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws object storage bucket instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws object storage bucket instance %s deleted", *deletedAwsObjectStorageBucketInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws object storage bucket instance",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsObjectStorageBucketInstanceCmd)

	DeleteAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketInstanceConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket instance config.",
	)
	DeleteAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketInstanceName,
		"name", "n", "", "Name of aws object storage bucket instance.",
	)
	DeleteAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&deleteAwsObjectStorageBucketInstanceVersion,
		"version", "v", "v0", "Version of aws object storage bucket instances object to delete. One of: [v0]",
	)
}

var (
	describeAwsObjectStorageBucketInstanceConfigPath string
	describeAwsObjectStorageBucketInstanceName       string
	describeAwsObjectStorageBucketInstanceField      string
	describeAwsObjectStorageBucketInstanceOutput     string
	describeAwsObjectStorageBucketInstanceVersion    string
)

// DescribeAwsObjectStorageBucketInstanceCmd representes the aws-object-storage-bucket-instance command
var DescribeAwsObjectStorageBucketInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws object storage bucket instance\n  tptctl describe aws-object-storage-bucket-instance -n some-aws-object-storage-bucket-instance\n\n  # Get JSON output for a aws object storage bucket instance\n  tptctl describe aws-object-storage-bucket-instance -n some-aws-object-storage-bucket-instance -o json\n\n  # Get the value of the Name field for a aws object storage bucket instance\n  tptctl describe aws-object-storage-bucket-instance -n some-aws-object-storage-bucket-instance -f Name ",
	Long:    "Describe a aws object storage bucket instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsObjectStorageBucketInstanceConfigPath,
			describeAwsObjectStorageBucketInstanceName,
			"aws object storage bucket instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsObjectStorageBucketInstanceOutput,
			"aws object storage bucket instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws object storage bucket instance
		var awsObjectStorageBucketInstance interface{}
		switch describeAwsObjectStorageBucketInstanceVersion {
		case "v0":
			// load aws object storage bucket instance config by name or config file
			var awsObjectStorageBucketInstanceConfig config_v0.AwsObjectStorageBucketInstanceConfig
			if describeAwsObjectStorageBucketInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsObjectStorageBucketInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsObjectStorageBucketInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsObjectStorageBucketInstanceConfig = config_v0.AwsObjectStorageBucketInstanceConfig{
					AwsObjectStorageBucketInstance: config_v0.AwsObjectStorageBucketInstanceValues{
						Name: &describeAwsObjectStorageBucketInstanceName,
					},
				}
			}

			// get aws object storage bucket instance object by name
			obj, err := client_v0.GetAwsObjectStorageBucketInstanceByName(
				apiClient,
				apiEndpoint,
				*awsObjectStorageBucketInstanceConfig.AwsObjectStorageBucketInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws object storage bucket instance details", err)
				os.Exit(1)
			}
			awsObjectStorageBucketInstance = obj

			// return plain output if requested
			if describeAwsObjectStorageBucketInstanceOutput == "plain" {
				if err := outputDescribev0AwsObjectStorageBucketInstanceCmd(
					awsObjectStorageBucketInstance.(*api_v0.AwsObjectStorageBucketInstance),
					&awsObjectStorageBucketInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws object storage bucket instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsObjectStorageBucketInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsObjectStorageBucketInstance,
				describeAwsObjectStorageBucketInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws object storage bucket instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsObjectStorageBucketInstance, describeAwsObjectStorageBucketInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsObjectStorageBucketInstanceOutput {
		case "json":
			// redact encrypted values
			redactedAwsObjectStorageBucketInstance := encryption.RedactEncryptedValues(awsObjectStorageBucketInstance)

			// marshal to JSON then print
			awsObjectStorageBucketInstanceJson, err := json.MarshalIndent(redactedAwsObjectStorageBucketInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws object storage bucket instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsObjectStorageBucketInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedAwsObjectStorageBucketInstance := encryption.RedactEncryptedValues(awsObjectStorageBucketInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsObjectStorageBucketInstanceJson, err := json.MarshalIndent(redactedAwsObjectStorageBucketInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws object storage bucket instance into JSON", err)
				os.Exit(1)
			}
			awsObjectStorageBucketInstanceYaml, err := ghodss_yaml.JSONToYAML(awsObjectStorageBucketInstanceJson)
			if err != nil {
				cli.Error("failed to convert aws object storage bucket instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsObjectStorageBucketInstanceYaml))
		}
	},
	Short:        "Describe a aws object storage bucket instance",
	SilenceUsage: true,
	Use:          "aws-object-storage-bucket-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsObjectStorageBucketInstanceCmd)

	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketInstanceConfigPath,
		"config", "c", "", "Path to file with aws object storage bucket instance config.",
	)
	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketInstanceName,
		"name", "n", "", "Name of aws object storage bucket instance.",
	)
	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsObjectStorageBucketInstanceCmd.Flags().StringVarP(
		&describeAwsObjectStorageBucketInstanceVersion,
		"version", "v", "v0", "Version of aws object storage bucket instances object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsRelationalDatabaseDefinition
///////////////////////////////////////////////////////////////////////////////

var getAwsRelationalDatabaseDefinitionVersion string

// GetAwsRelationalDatabaseDefinitionsCmd represents the aws-relational-database-definition command
var GetAwsRelationalDatabaseDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get aws-relational-database-definitions",
	Long:    "Get aws relational database definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsRelationalDatabaseDefinitionVersion {
		case "v0":
			// get aws relational database definitions
			awsRelationalDatabaseDefinitions, err := client_v0.GetAwsRelationalDatabaseDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws relational database definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsRelationalDatabaseDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws relational database definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsRelationalDatabaseDefinitionsCmd(
				awsRelationalDatabaseDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws relational database definitions from the system",
	SilenceUsage: true,
	Use:          "aws-relational-database-definitions",
}

func init() {
	GetCmd.AddCommand(GetAwsRelationalDatabaseDefinitionsCmd)

	GetAwsRelationalDatabaseDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsRelationalDatabaseDefinitionsCmd.Flags().StringVarP(
		&getAwsRelationalDatabaseDefinitionVersion,
		"version", "v", "v0", "Version of aws relational database definitions object to retrieve. One of: [v0]",
	)
}

var (
	createAwsRelationalDatabaseDefinitionConfigPath string
	createAwsRelationalDatabaseDefinitionVersion    string
)

// CreateAwsRelationalDatabaseDefinitionCmd represents the aws-relational-database-definition command
var CreateAwsRelationalDatabaseDefinitionCmd = &cobra.Command{
	Example: "  tptctl create aws-relational-database-definition --config path/to/config.yaml",
	Long:    "Create a new aws relational database definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws relational database definition config
		configContent, err := os.ReadFile(createAwsRelationalDatabaseDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws relational database definition based on version
		switch createAwsRelationalDatabaseDefinitionVersion {
		case "v0":
			var awsRelationalDatabaseDefinitionConfig config_v0.AwsRelationalDatabaseDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws relational database definition
			awsRelationalDatabaseDefinition := awsRelationalDatabaseDefinitionConfig.AwsRelationalDatabaseDefinition
			createdAwsRelationalDatabaseDefinition, err := awsRelationalDatabaseDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws relational database definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws relational database definition %s created", *createdAwsRelationalDatabaseDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws relational database definition",
	SilenceUsage: true,
	Use:          "aws-relational-database-definition",
}

func init() {
	CreateCmd.AddCommand(CreateAwsRelationalDatabaseDefinitionCmd)

	CreateAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseDefinitionConfigPath,
		"config", "c", "", "Path to file with aws relational database definition config.",
	)
	CreateAwsRelationalDatabaseDefinitionCmd.MarkFlagRequired("config")
	CreateAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseDefinitionVersion,
		"version", "v", "v0", "Version of aws relational database definitions object to create. One of: [v0]",
	)
}

var (
	deleteAwsRelationalDatabaseDefinitionConfigPath string
	deleteAwsRelationalDatabaseDefinitionName       string
	deleteAwsRelationalDatabaseDefinitionVersion    string
)

// DeleteAwsRelationalDatabaseDefinitionCmd represents the aws-relational-database-definition command
var DeleteAwsRelationalDatabaseDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-relational-database-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-relational-database-definition --name some-aws-relational-database-definition",
	Long:    "Delete an existing aws relational database definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsRelationalDatabaseDefinitionConfigPath,
			deleteAwsRelationalDatabaseDefinitionName,
			"aws relational database definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws relational database definition based on version
		switch deleteAwsRelationalDatabaseDefinitionVersion {
		case "v0":
			var awsRelationalDatabaseDefinitionConfig config_v0.AwsRelationalDatabaseDefinitionConfig
			if deleteAwsRelationalDatabaseDefinitionConfigPath != "" {
				// load aws relational database definition config
				configContent, err := os.ReadFile(deleteAwsRelationalDatabaseDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsRelationalDatabaseDefinitionConfig = config_v0.AwsRelationalDatabaseDefinitionConfig{
					AwsRelationalDatabaseDefinition: config_v0.AwsRelationalDatabaseDefinitionValues{
						Name: &deleteAwsRelationalDatabaseDefinitionName,
					},
				}
			}

			// delete aws relational database definition
			awsRelationalDatabaseDefinition := awsRelationalDatabaseDefinitionConfig.AwsRelationalDatabaseDefinition
			deletedAwsRelationalDatabaseDefinition, err := awsRelationalDatabaseDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws relational database definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws relational database definition %s deleted", *deletedAwsRelationalDatabaseDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws relational database definition",
	SilenceUsage: true,
	Use:          "aws-relational-database-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsRelationalDatabaseDefinitionCmd)

	DeleteAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseDefinitionConfigPath,
		"config", "c", "", "Path to file with aws relational database definition config.",
	)
	DeleteAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseDefinitionName,
		"name", "n", "", "Name of aws relational database definition.",
	)
	DeleteAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseDefinitionVersion,
		"version", "v", "v0", "Version of aws relational database definitions object to delete. One of: [v0]",
	)
}

var (
	describeAwsRelationalDatabaseDefinitionConfigPath string
	describeAwsRelationalDatabaseDefinitionName       string
	describeAwsRelationalDatabaseDefinitionField      string
	describeAwsRelationalDatabaseDefinitionOutput     string
	describeAwsRelationalDatabaseDefinitionVersion    string
)

// DescribeAwsRelationalDatabaseDefinitionCmd representes the aws-relational-database-definition command
var DescribeAwsRelationalDatabaseDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws relational database definition\n  tptctl describe aws-relational-database-definition -n some-aws-relational-database-definition\n\n  # Get JSON output for a aws relational database definition\n  tptctl describe aws-relational-database-definition -n some-aws-relational-database-definition -o json\n\n  # Get the value of the Name field for a aws relational database definition\n  tptctl describe aws-relational-database-definition -n some-aws-relational-database-definition -f Name ",
	Long:    "Describe a aws relational database definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsRelationalDatabaseDefinitionConfigPath,
			describeAwsRelationalDatabaseDefinitionName,
			"aws relational database definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsRelationalDatabaseDefinitionOutput,
			"aws relational database definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws relational database definition
		var awsRelationalDatabaseDefinition interface{}
		switch describeAwsRelationalDatabaseDefinitionVersion {
		case "v0":
			// load aws relational database definition config by name or config file
			var awsRelationalDatabaseDefinitionConfig config_v0.AwsRelationalDatabaseDefinitionConfig
			if describeAwsRelationalDatabaseDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsRelationalDatabaseDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsRelationalDatabaseDefinitionConfig = config_v0.AwsRelationalDatabaseDefinitionConfig{
					AwsRelationalDatabaseDefinition: config_v0.AwsRelationalDatabaseDefinitionValues{
						Name: &describeAwsRelationalDatabaseDefinitionName,
					},
				}
			}

			// get aws relational database definition object by name
			obj, err := client_v0.GetAwsRelationalDatabaseDefinitionByName(
				apiClient,
				apiEndpoint,
				*awsRelationalDatabaseDefinitionConfig.AwsRelationalDatabaseDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws relational database definition details", err)
				os.Exit(1)
			}
			awsRelationalDatabaseDefinition = obj

			// return plain output if requested
			if describeAwsRelationalDatabaseDefinitionOutput == "plain" {
				if err := outputDescribev0AwsRelationalDatabaseDefinitionCmd(
					awsRelationalDatabaseDefinition.(*api_v0.AwsRelationalDatabaseDefinition),
					&awsRelationalDatabaseDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws relational database definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsRelationalDatabaseDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsRelationalDatabaseDefinition,
				describeAwsRelationalDatabaseDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws relational database definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsRelationalDatabaseDefinition, describeAwsRelationalDatabaseDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsRelationalDatabaseDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedAwsRelationalDatabaseDefinition := encryption.RedactEncryptedValues(awsRelationalDatabaseDefinition)

			// marshal to JSON then print
			awsRelationalDatabaseDefinitionJson, err := json.MarshalIndent(redactedAwsRelationalDatabaseDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws relational database definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsRelationalDatabaseDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedAwsRelationalDatabaseDefinition := encryption.RedactEncryptedValues(awsRelationalDatabaseDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsRelationalDatabaseDefinitionJson, err := json.MarshalIndent(redactedAwsRelationalDatabaseDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws relational database definition into JSON", err)
				os.Exit(1)
			}
			awsRelationalDatabaseDefinitionYaml, err := ghodss_yaml.JSONToYAML(awsRelationalDatabaseDefinitionJson)
			if err != nil {
				cli.Error("failed to convert aws relational database definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsRelationalDatabaseDefinitionYaml))
		}
	},
	Short:        "Describe a aws relational database definition",
	SilenceUsage: true,
	Use:          "aws-relational-database-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsRelationalDatabaseDefinitionCmd)

	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseDefinitionConfigPath,
		"config", "c", "", "Path to file with aws relational database definition config.",
	)
	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseDefinitionName,
		"name", "n", "", "Name of aws relational database definition.",
	)
	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsRelationalDatabaseDefinitionCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseDefinitionVersion,
		"version", "v", "v0", "Version of aws relational database definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsRelationalDatabase
///////////////////////////////////////////////////////////////////////////////

// GetAwsRelationalDatabasesCmd represents the aws-relational-database command
var GetAwsRelationalDatabasesCmd = &cobra.Command{
	Example: "  tptctl get aws-relational-databases",
	Long:    "Get aws relational databases from the system.\n\nA aws relational database is a simple abstraction of aws relational database definitions and aws relational database instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		// get aws relational databases
		v0awsRelationalDatabaseInstances, err := client_v0.GetAwsRelationalDatabaseInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve aws relational database instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0awsRelationalDatabaseInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No aws relational database instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetAwsRelationalDatabasesCmd(
			v0awsRelationalDatabaseInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get aws relational databases from the system",
	SilenceUsage: true,
	Use:          "aws-relational-databases",
}

func init() {
	GetCmd.AddCommand(GetAwsRelationalDatabasesCmd)

	GetAwsRelationalDatabasesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createAwsRelationalDatabaseConfigPath string
	createAwsRelationalDatabaseVersion    string
)

// CreateAwsRelationalDatabaseCmd represents the aws-relational-database command
var CreateAwsRelationalDatabaseCmd = &cobra.Command{
	Example: "  tptctl create aws-relational-database --config path/to/config.yaml",
	Long:    "Create a new aws relational database. This command creates a new aws relational database definition and aws relational database instance based on the aws relational database config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws relational database config
		configContent, err := os.ReadFile(createAwsRelationalDatabaseConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create aws relational database based on version
		switch createAwsRelationalDatabaseVersion {
		case "v0":
			var awsRelationalDatabaseConfig config_v0.AwsRelationalDatabaseConfig
			if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws relational database
			awsRelationalDatabase := awsRelationalDatabaseConfig.AwsRelationalDatabase
			createdAwsRelationalDatabaseDefinition, createdAwsRelationalDatabaseInstance, err := awsRelationalDatabase.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create aws relational database", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws relational database definition %s created", *createdAwsRelationalDatabaseDefinition.Name))
			cli.Info(fmt.Sprintf("aws relational database instance %s created", *createdAwsRelationalDatabaseInstance.Name))
			cli.Complete(fmt.Sprintf("aws relational database %s created", *awsRelationalDatabaseConfig.AwsRelationalDatabase.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws relational database",
	SilenceUsage: true,
	Use:          "aws-relational-database",
}

func init() {
	CreateCmd.AddCommand(CreateAwsRelationalDatabaseCmd)

	CreateAwsRelationalDatabaseCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseConfigPath,
		"config", "c", "", "Path to file with aws relational database config.",
	)
	CreateAwsRelationalDatabaseCmd.MarkFlagRequired("config")
	CreateAwsRelationalDatabaseCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsRelationalDatabaseCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseVersion,
		"version", "v", "v0", "Version of aws relational databases object to create. One of: [v0]",
	)
}

var (
	deleteAwsRelationalDatabaseConfigPath string
	deleteAwsRelationalDatabaseName       string
	deleteAwsRelationalDatabaseVersion    string
)

// DeleteAwsRelationalDatabaseCmd represents the aws-relational-database command
var DeleteAwsRelationalDatabaseCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-relational-database --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-relational-database --name some-aws-relational-database",
	Long:    "Delete an existing aws relational database. This command deletes an existing aws relational database definition and aws relational database instance based on the aws relational database config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if deleteAwsRelationalDatabaseConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read aws relational database config
		configContent, err := os.ReadFile(deleteAwsRelationalDatabaseConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete aws relational database based on version
		switch deleteAwsRelationalDatabaseVersion {
		case "v0":
			var awsRelationalDatabaseConfig config_v0.AwsRelationalDatabaseConfig
			if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete aws relational database
			awsRelationalDatabase := awsRelationalDatabaseConfig.AwsRelationalDatabase
			_, _, err = awsRelationalDatabase.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws relational database", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("aws relational database definition %s deleted", *awsRelationalDatabase.Name))
			cli.Info(fmt.Sprintf("aws relational database instance %s deleted", *awsRelationalDatabase.Name))
			cli.Complete(fmt.Sprintf("aws relational database %s deleted", *awsRelationalDatabaseConfig.AwsRelationalDatabase.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws relational database",
	SilenceUsage: true,
	Use:          "aws-relational-database",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsRelationalDatabaseCmd)

	DeleteAwsRelationalDatabaseCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseConfigPath,
		"config", "c", "", "Path to file with aws relational database config.",
	)
	DeleteAwsRelationalDatabaseCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsRelationalDatabaseCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseVersion,
		"version", "v", "v0", "Version of aws relational databases object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// AwsRelationalDatabaseInstance
///////////////////////////////////////////////////////////////////////////////

var getAwsRelationalDatabaseInstanceVersion string

// GetAwsRelationalDatabaseInstancesCmd represents the aws-relational-database-instance command
var GetAwsRelationalDatabaseInstancesCmd = &cobra.Command{
	Example: "  tptctl get aws-relational-database-instances",
	Long:    "Get aws relational database instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := GetClientContext(cmd)

		switch getAwsRelationalDatabaseInstanceVersion {
		case "v0":
			// get aws relational database instances
			awsRelationalDatabaseInstances, err := client_v0.GetAwsRelationalDatabaseInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve aws relational database instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*awsRelationalDatabaseInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No aws relational database instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0AwsRelationalDatabaseInstancesCmd(
				awsRelationalDatabaseInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get aws relational database instances from the system",
	SilenceUsage: true,
	Use:          "aws-relational-database-instances",
}

func init() {
	GetCmd.AddCommand(GetAwsRelationalDatabaseInstancesCmd)

	GetAwsRelationalDatabaseInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetAwsRelationalDatabaseInstancesCmd.Flags().StringVarP(
		&getAwsRelationalDatabaseInstanceVersion,
		"version", "v", "v0", "Version of aws relational database instances object to retrieve. One of: [v0]",
	)
}

var (
	createAwsRelationalDatabaseInstanceConfigPath string
	createAwsRelationalDatabaseInstanceVersion    string
)

// CreateAwsRelationalDatabaseInstanceCmd represents the aws-relational-database-instance command
var CreateAwsRelationalDatabaseInstanceCmd = &cobra.Command{
	Example: "  tptctl create aws-relational-database-instance --config path/to/config.yaml",
	Long:    "Create a new aws relational database instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// read aws relational database instance config
		configContent, err := os.ReadFile(createAwsRelationalDatabaseInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create aws relational database instance based on version
		switch createAwsRelationalDatabaseInstanceVersion {
		case "v0":
			var awsRelationalDatabaseInstanceConfig config_v0.AwsRelationalDatabaseInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create aws relational database instance
			awsRelationalDatabaseInstance := awsRelationalDatabaseInstanceConfig.AwsRelationalDatabaseInstance
			createdAwsRelationalDatabaseInstance, err := awsRelationalDatabaseInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create aws relational database instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws relational database instance %s created", *createdAwsRelationalDatabaseInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new aws relational database instance",
	SilenceUsage: true,
	Use:          "aws-relational-database-instance",
}

func init() {
	CreateCmd.AddCommand(CreateAwsRelationalDatabaseInstanceCmd)

	CreateAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseInstanceConfigPath,
		"config", "c", "", "Path to file with aws relational database instance config.",
	)
	CreateAwsRelationalDatabaseInstanceCmd.MarkFlagRequired("config")
	CreateAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&createAwsRelationalDatabaseInstanceVersion,
		"version", "v", "v0", "Version of aws relational database instances object to create. One of: [v0]",
	)
}

var (
	deleteAwsRelationalDatabaseInstanceConfigPath string
	deleteAwsRelationalDatabaseInstanceName       string
	deleteAwsRelationalDatabaseInstanceVersion    string
)

// DeleteAwsRelationalDatabaseInstanceCmd represents the aws-relational-database-instance command
var DeleteAwsRelationalDatabaseInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete aws-relational-database-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete aws-relational-database-instance --name some-aws-relational-database-instance",
	Long:    "Delete an existing aws relational database instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteAwsRelationalDatabaseInstanceConfigPath,
			deleteAwsRelationalDatabaseInstanceName,
			"aws relational database instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete aws relational database instance based on version
		switch deleteAwsRelationalDatabaseInstanceVersion {
		case "v0":
			var awsRelationalDatabaseInstanceConfig config_v0.AwsRelationalDatabaseInstanceConfig
			if deleteAwsRelationalDatabaseInstanceConfigPath != "" {
				// load aws relational database instance config
				configContent, err := os.ReadFile(deleteAwsRelationalDatabaseInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsRelationalDatabaseInstanceConfig = config_v0.AwsRelationalDatabaseInstanceConfig{
					AwsRelationalDatabaseInstance: config_v0.AwsRelationalDatabaseInstanceValues{
						Name: &deleteAwsRelationalDatabaseInstanceName,
					},
				}
			}

			// delete aws relational database instance
			awsRelationalDatabaseInstance := awsRelationalDatabaseInstanceConfig.AwsRelationalDatabaseInstance
			deletedAwsRelationalDatabaseInstance, err := awsRelationalDatabaseInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete aws relational database instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("aws relational database instance %s deleted", *deletedAwsRelationalDatabaseInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing aws relational database instance",
	SilenceUsage: true,
	Use:          "aws-relational-database-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteAwsRelationalDatabaseInstanceCmd)

	DeleteAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseInstanceConfigPath,
		"config", "c", "", "Path to file with aws relational database instance config.",
	)
	DeleteAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseInstanceName,
		"name", "n", "", "Name of aws relational database instance.",
	)
	DeleteAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&deleteAwsRelationalDatabaseInstanceVersion,
		"version", "v", "v0", "Version of aws relational database instances object to delete. One of: [v0]",
	)
}

var (
	describeAwsRelationalDatabaseInstanceConfigPath string
	describeAwsRelationalDatabaseInstanceName       string
	describeAwsRelationalDatabaseInstanceField      string
	describeAwsRelationalDatabaseInstanceOutput     string
	describeAwsRelationalDatabaseInstanceVersion    string
)

// DescribeAwsRelationalDatabaseInstanceCmd representes the aws-relational-database-instance command
var DescribeAwsRelationalDatabaseInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a aws relational database instance\n  tptctl describe aws-relational-database-instance -n some-aws-relational-database-instance\n\n  # Get JSON output for a aws relational database instance\n  tptctl describe aws-relational-database-instance -n some-aws-relational-database-instance -o json\n\n  # Get the value of the Name field for a aws relational database instance\n  tptctl describe aws-relational-database-instance -n some-aws-relational-database-instance -f Name ",
	Long:    "Describe a aws relational database instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeAwsRelationalDatabaseInstanceConfigPath,
			describeAwsRelationalDatabaseInstanceName,
			"aws relational database instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeAwsRelationalDatabaseInstanceOutput,
			"aws relational database instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get aws relational database instance
		var awsRelationalDatabaseInstance interface{}
		switch describeAwsRelationalDatabaseInstanceVersion {
		case "v0":
			// load aws relational database instance config by name or config file
			var awsRelationalDatabaseInstanceConfig config_v0.AwsRelationalDatabaseInstanceConfig
			if describeAwsRelationalDatabaseInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeAwsRelationalDatabaseInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &awsRelationalDatabaseInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				awsRelationalDatabaseInstanceConfig = config_v0.AwsRelationalDatabaseInstanceConfig{
					AwsRelationalDatabaseInstance: config_v0.AwsRelationalDatabaseInstanceValues{
						Name: &describeAwsRelationalDatabaseInstanceName,
					},
				}
			}

			// get aws relational database instance object by name
			obj, err := client_v0.GetAwsRelationalDatabaseInstanceByName(
				apiClient,
				apiEndpoint,
				*awsRelationalDatabaseInstanceConfig.AwsRelationalDatabaseInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve aws relational database instance details", err)
				os.Exit(1)
			}
			awsRelationalDatabaseInstance = obj

			// return plain output if requested
			if describeAwsRelationalDatabaseInstanceOutput == "plain" {
				if err := outputDescribev0AwsRelationalDatabaseInstanceCmd(
					awsRelationalDatabaseInstance.(*api_v0.AwsRelationalDatabaseInstance),
					&awsRelationalDatabaseInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe aws relational database instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeAwsRelationalDatabaseInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				awsRelationalDatabaseInstance,
				describeAwsRelationalDatabaseInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from aws relational database instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(awsRelationalDatabaseInstance, describeAwsRelationalDatabaseInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config_v0.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeAwsRelationalDatabaseInstanceOutput {
		case "json":
			// redact encrypted values
			redactedAwsRelationalDatabaseInstance := encryption.RedactEncryptedValues(awsRelationalDatabaseInstance)

			// marshal to JSON then print
			awsRelationalDatabaseInstanceJson, err := json.MarshalIndent(redactedAwsRelationalDatabaseInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws relational database instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(awsRelationalDatabaseInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedAwsRelationalDatabaseInstance := encryption.RedactEncryptedValues(awsRelationalDatabaseInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			awsRelationalDatabaseInstanceJson, err := json.MarshalIndent(redactedAwsRelationalDatabaseInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal aws relational database instance into JSON", err)
				os.Exit(1)
			}
			awsRelationalDatabaseInstanceYaml, err := ghodss_yaml.JSONToYAML(awsRelationalDatabaseInstanceJson)
			if err != nil {
				cli.Error("failed to convert aws relational database instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(awsRelationalDatabaseInstanceYaml))
		}
	},
	Short:        "Describe a aws relational database instance",
	SilenceUsage: true,
	Use:          "aws-relational-database-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeAwsRelationalDatabaseInstanceCmd)

	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseInstanceConfigPath,
		"config", "c", "", "Path to file with aws relational database instance config.",
	)
	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseInstanceName,
		"name", "n", "", "Name of aws relational database instance.",
	)
	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeAwsRelationalDatabaseInstanceCmd.Flags().StringVarP(
		&describeAwsRelationalDatabaseInstanceVersion,
		"version", "v", "v0", "Version of aws relational database instances object to describe. One of: [v0]",
	)
}
