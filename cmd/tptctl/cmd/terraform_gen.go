// generated by 'threeport-sdk codegen' for tptctl command boilerplate - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// Terraform
///////////////////////////////////////////////////////////////////////////////

// GetTerraformsCmd represents the terraform command
var GetTerraformsCmd = &cobra.Command{
	Example: "  tptctl get terraforms",
	Long:    "Get terraforms from the system.\n\nA terraform is a simple abstraction of terraform definitions and terraform instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get terraforms
		terraformInstances, err := client.GetTerraformInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve terraform instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*terraformInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No terraform instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetTerraformsCmd(
			terraformInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get terraforms from the system",
	SilenceUsage: true,
	Use:          "terraforms",
}

func init() {
	GetCmd.AddCommand(GetTerraformsCmd)

	GetTerraformsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createTerraformConfigPath string

// CreateTerraformCmd represents the terraform command
var CreateTerraformCmd = &cobra.Command{
	Example: "  tptctl create terraform --config path/to/config.yaml",
	Long:    "Create a new terraform. This command creates a new terraform definition and terraform instance based on the terraform config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load terraform config
		configContent, err := os.ReadFile(createTerraformConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var terraformConfig config.TerraformConfig
		if err := yaml.UnmarshalStrict(configContent, &terraformConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create terraform
		terraform := terraformConfig.Terraform
		terraform.TerraformConfigPath = createTerraformConfigPath
		createdTerraformDefinition, createdTerraformInstance, err := terraform.Create(
			apiClient,
			apiEndpoint,
		)
		if err != nil {
			cli.Error("failed to create terraform", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("terraform definition %s created", *createdTerraformDefinition.Name))
		cli.Info(fmt.Sprintf("terraform instance %s created", *createdTerraformInstance.Name))
		cli.Complete(fmt.Sprintf("terraform %s created", terraformConfig.Terraform.Name))
	},
	Short:        "Create a new terraform",
	SilenceUsage: true,
	Use:          "terraform",
}

func init() {
	CreateCmd.AddCommand(CreateTerraformCmd)

	CreateTerraformCmd.Flags().StringVarP(
		&createTerraformConfigPath,
		"config", "c", "", "Path to file with terraform config.",
	)
	CreateTerraformCmd.MarkFlagRequired("config")
	CreateTerraformCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteTerraformConfigPath string
	deleteTerraformName       string
)

// DeleteTerraformCmd represents the terraform command
var DeleteTerraformCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete terraform --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete terraform --name some-terraform",
	Long:    "Delete an existing terraform. This command deletes an existing terraform definition and terraform instance based on the terraform config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if deleteTerraformConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		var terraformConfig config.TerraformConfig
		// load terraform config
		configContent, err := os.ReadFile(deleteTerraformConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		if err := yaml.UnmarshalStrict(configContent, &terraformConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// delete terraform
		terraform := terraformConfig.Terraform
		terraform.TerraformConfigPath = deleteTerraformConfigPath
		_, _, err = terraform.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete terraform", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("terraform definition %s deleted", terraform.Name))
		cli.Info(fmt.Sprintf("terraform instance %s deleted", terraform.Name))
		cli.Complete(fmt.Sprintf("terraform %s deleted", terraformConfig.Terraform.Name))
	},
	Short:        "Delete an existing terraform",
	SilenceUsage: true,
	Use:          "terraform",
}

func init() {
	DeleteCmd.AddCommand(DeleteTerraformCmd)

	DeleteTerraformCmd.Flags().StringVarP(
		&deleteTerraformConfigPath,
		"config", "c", "", "Path to file with terraform config.",
	)
	DeleteTerraformCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// TerraformDefinition
///////////////////////////////////////////////////////////////////////////////

// GetTerraformDefinitionsCmd represents the terraform-definition command
var GetTerraformDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get terraform-definitions",
	Long:    "Get terraform definitions from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get terraform definitions
		terraformDefinitions, err := client.GetTerraformDefinitions(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve terraform definitions", err)
			os.Exit(1)
		}

		// write the output
		if len(*terraformDefinitions) == 0 {
			cli.Info(fmt.Sprintf(
				"No terraform definitions currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetTerraformDefinitionsCmd(
			terraformDefinitions,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get terraform definitions from the system",
	SilenceUsage: true,
	Use:          "terraform-definitions",
}

func init() {
	GetCmd.AddCommand(GetTerraformDefinitionsCmd)

	GetTerraformDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createTerraformDefinitionConfigPath string

// CreateTerraformDefinitionCmd represents the terraform-definition command
var CreateTerraformDefinitionCmd = &cobra.Command{
	Example: "  tptctl create terraform-definition --config path/to/config.yaml",
	Long:    "Create a new terraform definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load terraform definition config
		configContent, err := os.ReadFile(createTerraformDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var terraformDefinitionConfig config.TerraformDefinitionConfig
		if err := yaml.UnmarshalStrict(configContent, &terraformDefinitionConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create terraform definition
		terraformDefinition := terraformDefinitionConfig.TerraformDefinition
		terraformDefinition.TerraformConfigPath = createTerraformDefinitionConfigPath
		createdTerraformDefinition, err := terraformDefinition.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create terraform definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("terraform definition %s created", *createdTerraformDefinition.Name))
	},
	Short:        "Create a new terraform definition",
	SilenceUsage: true,
	Use:          "terraform-definition",
}

func init() {
	CreateCmd.AddCommand(CreateTerraformDefinitionCmd)

	CreateTerraformDefinitionCmd.Flags().StringVarP(
		&createTerraformDefinitionConfigPath,
		"config", "c", "", "Path to file with terraform definition config.",
	)
	CreateTerraformDefinitionCmd.MarkFlagRequired("config")
	CreateTerraformDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteTerraformDefinitionConfigPath string
	deleteTerraformDefinitionName       string
)

// DeleteTerraformDefinitionCmd represents the terraform-definition command
var DeleteTerraformDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete terraform-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete terraform-definition --name some-terraform-definition",
	Long:    "Delete an existing terraform definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteTerraformDefinitionConfigPath,
			deleteTerraformDefinitionName,
			"terraform definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var terraformDefinitionConfig config.TerraformDefinitionConfig
		if deleteTerraformDefinitionConfigPath != "" {
			// load terraform definition config
			configContent, err := os.ReadFile(deleteTerraformDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &terraformDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			terraformDefinitionConfig = config.TerraformDefinitionConfig{
				TerraformDefinition: config.TerraformDefinitionValues{
					Name: deleteTerraformDefinitionName,
				},
			}
		}

		// delete terraform definition
		terraformDefinition := terraformDefinitionConfig.TerraformDefinition
		terraformDefinition.TerraformConfigPath = deleteTerraformDefinitionConfigPath
		deletedTerraformDefinition, err := terraformDefinition.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete terraform definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("terraform definition %s deleted", *deletedTerraformDefinition.Name))
	},
	Short:        "Delete an existing terraform definition",
	SilenceUsage: true,
	Use:          "terraform-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteTerraformDefinitionCmd)

	DeleteTerraformDefinitionCmd.Flags().StringVarP(
		&deleteTerraformDefinitionConfigPath,
		"config", "c", "", "Path to file with terraform definition config.",
	)
	DeleteTerraformDefinitionCmd.Flags().StringVarP(
		&deleteTerraformDefinitionName,
		"name", "n", "", "Name of terraform definition.",
	)
	DeleteTerraformDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeTerraformDefinitionConfigPath string
	describeTerraformDefinitionName       string
	describeTerraformDefinitionField      string
	describeTerraformDefinitionOutput     string
)

// DescribeTerraformDefinitionCmd representes the terraform-definition command
var DescribeTerraformDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a terraform definition\n  tptctl describe terraform-definition -n some-terraform-definition\n\n  # Get JSON output for a terraform definition\n  tptctl describe terraform-definition -n some-terraform-definition -o json\n\n  # Get the value of the Name field for a terraform definition\n  tptctl describe terraform-definition -n some-terraform-definition -f Name ",
	Long:    "Describe a terraform definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeTerraformDefinitionConfigPath,
			describeTerraformDefinitionName,
			"terraform definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeTerraformDefinitionOutput,
			"terraform definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load terraform definition config by name or config file
		var terraformDefinitionConfig config.TerraformDefinitionConfig
		if describeTerraformDefinitionConfigPath != "" {
			configContent, err := os.ReadFile(describeTerraformDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &terraformDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			terraformDefinitionConfig = config.TerraformDefinitionConfig{
				TerraformDefinition: config.TerraformDefinitionValues{
					Name: describeTerraformDefinitionName,
				},
			}
		}

		// get terraform definition
		terraformDefinition, err := client.GetTerraformDefinitionByName(
			apiClient,
			apiEndpoint,
			terraformDefinitionConfig.TerraformDefinition.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve terraform definition details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeTerraformDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				terraformDefinition,
				describeTerraformDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from terraform definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(terraformDefinition, describeTerraformDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeTerraformDefinitionOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeTerraformDefinitionCmd(
				terraformDefinition,
				&terraformDefinitionConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe terraform definition", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedTerraformDefinition := encryption.RedactEncryptedValues(terraformDefinition)

			// marshal to JSON then print
			terraformDefinitionJson, err := json.MarshalIndent(redactedTerraformDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal terraform definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(terraformDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedTerraformDefinition := encryption.RedactEncryptedValues(terraformDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			terraformDefinitionJson, err := json.MarshalIndent(redactedTerraformDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal terraform definition into JSON", err)
				os.Exit(1)
			}
			terraformDefinitionYaml, err := ghodss_yaml.JSONToYAML(terraformDefinitionJson)
			if err != nil {
				cli.Error("failed to convert terraform definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(terraformDefinitionYaml))
		}
	},
	Short:        "Describe a terraform definition",
	SilenceUsage: true,
	Use:          "terraform-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeTerraformDefinitionCmd)

	DescribeTerraformDefinitionCmd.Flags().StringVarP(
		&describeTerraformDefinitionConfigPath,
		"config", "c", "", "Path to file with terraform definition config.")
	DescribeTerraformDefinitionCmd.Flags().StringVarP(
		&describeTerraformDefinitionName,
		"name", "n", "", "Name of terraform definition.")
	DescribeTerraformDefinitionCmd.Flags().StringVarP(
		&describeTerraformDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeTerraformDefinitionCmd.Flags().StringVarP(
		&describeTerraformDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeTerraformDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// TerraformInstance
///////////////////////////////////////////////////////////////////////////////

// GetTerraformInstancesCmd represents the terraform-instance command
var GetTerraformInstancesCmd = &cobra.Command{
	Example: "  tptctl get terraform-instances",
	Long:    "Get terraform instances from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get terraform instances
		terraformInstances, err := client.GetTerraformInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve terraform instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*terraformInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No terraform instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetTerraformInstancesCmd(
			terraformInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get terraform instances from the system",
	SilenceUsage: true,
	Use:          "terraform-instances",
}

func init() {
	GetCmd.AddCommand(GetTerraformInstancesCmd)

	GetTerraformInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createTerraformInstanceConfigPath string

// CreateTerraformInstanceCmd represents the terraform-instance command
var CreateTerraformInstanceCmd = &cobra.Command{
	Example: "  tptctl create terraform-instance --config path/to/config.yaml",
	Long:    "Create a new terraform instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load terraform instance config
		configContent, err := os.ReadFile(createTerraformInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var terraformInstanceConfig config.TerraformInstanceConfig
		if err := yaml.UnmarshalStrict(configContent, &terraformInstanceConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create terraform instance
		terraformInstance := terraformInstanceConfig.TerraformInstance
		terraformInstance.TerraformConfigPath = createTerraformInstanceConfigPath
		createdTerraformInstance, err := terraformInstance.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create terraform instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("terraform instance %s created", *createdTerraformInstance.Name))
	},
	Short:        "Create a new terraform instance",
	SilenceUsage: true,
	Use:          "terraform-instance",
}

func init() {
	CreateCmd.AddCommand(CreateTerraformInstanceCmd)

	CreateTerraformInstanceCmd.Flags().StringVarP(
		&createTerraformInstanceConfigPath,
		"config", "c", "", "Path to file with terraform instance config.",
	)
	CreateTerraformInstanceCmd.MarkFlagRequired("config")
	CreateTerraformInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteTerraformInstanceConfigPath string
	deleteTerraformInstanceName       string
)

// DeleteTerraformInstanceCmd represents the terraform-instance command
var DeleteTerraformInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete terraform-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete terraform-instance --name some-terraform-instance",
	Long:    "Delete an existing terraform instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteTerraformInstanceConfigPath,
			deleteTerraformInstanceName,
			"terraform instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var terraformInstanceConfig config.TerraformInstanceConfig
		if deleteTerraformInstanceConfigPath != "" {
			// load terraform instance config
			configContent, err := os.ReadFile(deleteTerraformInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &terraformInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			terraformInstanceConfig = config.TerraformInstanceConfig{
				TerraformInstance: config.TerraformInstanceValues{
					Name: deleteTerraformInstanceName,
				},
			}
		}

		// delete terraform instance
		terraformInstance := terraformInstanceConfig.TerraformInstance
		terraformInstance.TerraformConfigPath = deleteTerraformInstanceConfigPath
		deletedTerraformInstance, err := terraformInstance.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete terraform instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("terraform instance %s deleted", *deletedTerraformInstance.Name))
	},
	Short:        "Delete an existing terraform instance",
	SilenceUsage: true,
	Use:          "terraform-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteTerraformInstanceCmd)

	DeleteTerraformInstanceCmd.Flags().StringVarP(
		&deleteTerraformInstanceConfigPath,
		"config", "c", "", "Path to file with terraform instance config.",
	)
	DeleteTerraformInstanceCmd.Flags().StringVarP(
		&deleteTerraformInstanceName,
		"name", "n", "", "Name of terraform instance.",
	)
	DeleteTerraformInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeTerraformInstanceConfigPath string
	describeTerraformInstanceName       string
	describeTerraformInstanceField      string
	describeTerraformInstanceOutput     string
)

// DescribeTerraformInstanceCmd representes the terraform-instance command
var DescribeTerraformInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a terraform instance\n  tptctl describe terraform-instance -n some-terraform-instance\n\n  # Get JSON output for a terraform instance\n  tptctl describe terraform-instance -n some-terraform-instance -o json\n\n  # Get the value of the Name field for a terraform instance\n  tptctl describe terraform-instance -n some-terraform-instance -f Name ",
	Long:    "Describe a terraform instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeTerraformInstanceConfigPath,
			describeTerraformInstanceName,
			"terraform instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeTerraformInstanceOutput,
			"terraform instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load terraform instance config by name or config file
		var terraformInstanceConfig config.TerraformInstanceConfig
		if describeTerraformInstanceConfigPath != "" {
			configContent, err := os.ReadFile(describeTerraformInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &terraformInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			terraformInstanceConfig = config.TerraformInstanceConfig{
				TerraformInstance: config.TerraformInstanceValues{
					Name: describeTerraformInstanceName,
				},
			}
		}

		// get terraform instance
		terraformInstance, err := client.GetTerraformInstanceByName(
			apiClient,
			apiEndpoint,
			terraformInstanceConfig.TerraformInstance.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve terraform instance details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeTerraformInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				terraformInstance,
				describeTerraformInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from terraform instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(terraformInstance, describeTerraformInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeTerraformInstanceOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeTerraformInstanceCmd(
				terraformInstance,
				&terraformInstanceConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe terraform instance", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedTerraformInstance := encryption.RedactEncryptedValues(terraformInstance)

			// marshal to JSON then print
			terraformInstanceJson, err := json.MarshalIndent(redactedTerraformInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal terraform instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(terraformInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedTerraformInstance := encryption.RedactEncryptedValues(terraformInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			terraformInstanceJson, err := json.MarshalIndent(redactedTerraformInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal terraform instance into JSON", err)
				os.Exit(1)
			}
			terraformInstanceYaml, err := ghodss_yaml.JSONToYAML(terraformInstanceJson)
			if err != nil {
				cli.Error("failed to convert terraform instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(terraformInstanceYaml))
		}
	},
	Short:        "Describe a terraform instance",
	SilenceUsage: true,
	Use:          "terraform-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeTerraformInstanceCmd)

	DescribeTerraformInstanceCmd.Flags().StringVarP(
		&describeTerraformInstanceConfigPath,
		"config", "c", "", "Path to file with terraform instance config.")
	DescribeTerraformInstanceCmd.Flags().StringVarP(
		&describeTerraformInstanceName,
		"name", "n", "", "Name of terraform instance.")
	DescribeTerraformInstanceCmd.Flags().StringVarP(
		&describeTerraformInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeTerraformInstanceCmd.Flags().StringVarP(
		&describeTerraformInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeTerraformInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}
