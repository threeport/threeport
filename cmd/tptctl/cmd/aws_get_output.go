// originally generated by 'threeport-sdk codegen api-model' but will not be regenerated - intended for modification

package cmd

import (
	"fmt"
	"net/http"
	"os"
	"text/tabwriter"

	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
)

// outputGetv0AwsAccountsCmd produces the tabular output for the
// 'tptctl get aws-accounts' command.
func outputGetv0AwsAccountsCmd(
	awsAccounts *[]v0.AwsAccount,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t DEFAULT ACCOUNT\t DEFAULT REGION\t ACCOUNT ID\t AGE")
	for _, aa := range *awsAccounts {
		fmt.Fprintln(
			writer,
			*aa.Name, "\t",
			*aa.DefaultAccount, "\t",
			*aa.DefaultRegion, "\t",
			*aa.AccountID, "\t",
			util.GetAge(aa.CreatedAt),
		)
	}
	writer.Flush()

	return nil
}

// outputGetAwsEksKubernetesRuntimesCmd produces the tabular output for the
// 'tptctl get aws-eks-kubernetes-runtimes' command.
func outputGetAwsEksKubernetesRuntimesCmd(
	awsEksKubernetesRuntimeInstances *[]v0.AwsEksKubernetesRuntimeInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AWS EKS KUBERNETES DEFINITION NAME\t AWS EKS KUBERNETES INSTANCE NAME\t AGE")
	var awsEksKubernetesRuntimeDefinitionErr error
	for _, e := range *awsEksKubernetesRuntimeInstances {
		var awsEksKubernetesRuntimeDefinitionName string
		// get AWS EKS kubernetes runtime definition
		awsEksKubernetesRuntimeDefinition, err := client.GetAwsEksKubernetesRuntimeDefinitionByID(apiClient, apiEndpoint, *e.AwsEksKubernetesRuntimeDefinitionID)
		if err != nil {
			awsEksKubernetesRuntimeDefinitionErr = err
			awsEksKubernetesRuntimeDefinitionName = "<error>"
		} else {
			awsEksKubernetesRuntimeDefinitionName = *awsEksKubernetesRuntimeDefinition.Name
		}

		fmt.Fprintln(
			writer,
			*e.Name, "\t",
			awsEksKubernetesRuntimeDefinitionName, "\t",
			*e.Name, "\t",
			util.GetAge(e.CreatedAt),
		)
	}
	writer.Flush()

	if awsEksKubernetesRuntimeDefinitionErr != nil {
		return fmt.Errorf("encountered an error retrieving AWS EKS kubernetes runtime definition info: %w", awsEksKubernetesRuntimeDefinitionErr)
	}

	return nil
}

// outputGetv0AwsEksKubernetesRuntimeDefinitionsCmd produces the tabular output for the
// 'tptctl get aws-eks-kubernetes-runtime-definitions' command.
func outputGetv0AwsEksKubernetesRuntimeDefinitionsCmd(
	awsEksKubernetesRuntimeDefinitions *[]v0.AwsEksKubernetesRuntimeDefinition,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AWS ACCOUNT\t ZONE COUNT\t DEFAULT NODE GROUP INSTANCE TYPE\t DEFAULT NODE GROUP MINIMUM SIZE\t DEFAULT NODE GROUP MAXIMUM SIZE\t AGE")
	var awsAccountErr error
	for _, aekrd := range *awsEksKubernetesRuntimeDefinitions {
		// get AWS account name
		var awsAccountName string
		awsAccount, err := client.GetAwsAccountByID(apiClient, apiEndpoint, *aekrd.AwsAccountID)
		if err != nil {
			awsAccountErr = err
			awsAccountName = "<error>"
		} else {
			awsAccountName = *awsAccount.Name
		}

		fmt.Fprintln(
			writer,
			*aekrd.Name, "\t",
			awsAccountName, "\t",
			*aekrd.ZoneCount, "\t",
			*aekrd.DefaultNodeGroupInstanceType, "\t",
			*aekrd.DefaultNodeGroupMinimumSize, "\t",
			*aekrd.DefaultNodeGroupMaximumSize, "\t",
			util.GetAge(aekrd.CreatedAt),
		)
	}
	writer.Flush()

	if awsAccountErr != nil {
		return fmt.Errorf("encountered an error retrieving AWS account info: %w", awsAccountErr)
	}

	return nil
}

// outputGetv0AwsEksKubernetesRuntimeInstancesCmd produces the tabular output for the
// 'tptctl get aws-eks-kubernetes-runtime-instances' command.
func outputGetv0AwsEksKubernetesRuntimeInstancesCmd(
	awsEksKubernetesRuntimeInstances *[]v0.AwsEksKubernetesRuntimeInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t REGION\t KUBERNETES RUNTIME INSTANCE NAME\t AWS EKS KUBERNETES DEFINITION NAME\t RECONCILED\t AGE")
	metadataErr := false
	var kubernetesRuntimeInstanceErr error
	var awsEksKubernetesRuntimeDefinitionErr error
	for _, e := range *awsEksKubernetesRuntimeInstances {
		var kubernetesRuntimeInstanceName string
		// get kubernetes runtime instance
		kubernetesRuntimeInstance, err := client.GetKubernetesRuntimeInstanceByID(
			apiClient,
			apiEndpoint,
			*e.KubernetesRuntimeInstanceID,
		)
		if err != nil || kubernetesRuntimeInstance == nil {
			metadataErr = true
			kubernetesRuntimeInstanceErr = err
			kubernetesRuntimeInstanceName = "<error>"
		} else {
			kubernetesRuntimeInstanceName = *kubernetesRuntimeInstance.Name
		}

		var awsEksKubernetesRuntimeDefinitionName string
		// get AWS EKS kubernetes runtime definition
		awsEksKubernetesRuntimeDefinition, err := client.GetAwsEksKubernetesRuntimeDefinitionByID(
			apiClient,
			apiEndpoint,
			*e.AwsEksKubernetesRuntimeDefinitionID,
		)
		if err != nil {
			metadataErr = true
			awsEksKubernetesRuntimeDefinitionErr = err
			awsEksKubernetesRuntimeDefinitionName = "<error>"
		} else {
			awsEksKubernetesRuntimeDefinitionName = *awsEksKubernetesRuntimeDefinition.Name
		}

		fmt.Fprintln(
			writer,
			*e.Name, "\t",
			*e.Region, "\t",
			kubernetesRuntimeInstanceName, "\t",
			awsEksKubernetesRuntimeDefinitionName, "\t",
			*e.Reconciled, "\t",
			util.GetAge(e.CreatedAt),
		)
	}
	writer.Flush()

	if metadataErr {
		multiError := util.MultiError{}
		if kubernetesRuntimeInstanceErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving kubernetes runtime instance info: %w", kubernetesRuntimeInstanceErr),
			)
		}
		if awsEksKubernetesRuntimeDefinitionErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving AWS EKS kubernetes runtime definition info: %w", awsEksKubernetesRuntimeDefinitionErr),
			)
		}
		return multiError.Error()
	}

	return nil
}

// outputGetAwsRelationalDatabasesCmd produces the tabular output for the
// 'tptctl get aws-relational-databases' command.
func outputGetAwsRelationalDatabasesCmd(
	awsRelationalDatabaseInstances *[]v0.AwsRelationalDatabaseInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AGE")
	for _, awsRelationalDatabaseInstance := range *awsRelationalDatabaseInstances {
		fmt.Fprintln(
			writer,
			*awsRelationalDatabaseInstance.Name, "\t",
			util.GetAge(awsRelationalDatabaseInstance.CreatedAt),
		)
	}
	writer.Flush()

	return nil
}

// outputGetv0AwsRelationalDatabaseDefinitionsCmd produces the tabular output for the
// 'tptctl get aws-relational-database-definitions' command.
func outputGetv0AwsRelationalDatabaseDefinitionsCmd(
	awsRelationalDatabaseDefinitions *[]v0.AwsRelationalDatabaseDefinition,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t ENGINE\t ENGINE VERSION\t DATABASE NAME\t DATABASE_PORT\t BACKUP DAYS\t MACHINE SIZE\t STORAGE GB\t WORKLOAD SECRET NAME\t AWS ACCOUNT NAME\t AGE")
	var awsAccountErr error
	for _, r := range *awsRelationalDatabaseDefinitions {
		var awsAccountName string
		awsAccount, err := client.GetAwsAccountByID(apiClient, apiEndpoint, *r.AwsAccountID)
		if err != nil {
			awsAccountName = "<error>"
			awsAccountErr = err
		} else {
			awsAccountName = *awsAccount.Name
		}

		fmt.Fprintln(
			writer,
			*r.Name, "\t",
			*r.Engine, "\t",
			*r.EngineVersion, "\t",
			*r.DatabaseName, "\t",
			*r.DatabasePort, "\t",
			*r.BackupDays, "\t",
			*r.MachineSize, "\t",
			*r.StorageGb, "\t",
			*r.WorkloadSecretName, "\t",
			awsAccountName, "\t",
			util.GetAge(r.CreatedAt),
		)
	}
	writer.Flush()

	if awsAccountErr != nil {
		return fmt.Errorf("encountered an error retrieving AWS account info: %w", awsAccountErr)
	}

	return nil
}

// outputGetv0AwsRelationalDatabaseInstancesCmd produces the tabular output for the
// 'tptctl get aws-relational-database-instances' command.
func outputGetv0AwsRelationalDatabaseInstancesCmd(
	awsRelationalDatabaseInstances *[]v0.AwsRelationalDatabaseInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AWS RELATIONAL DATABASE DEFINITION\t WORKLOAD INSTANCE\t AGE")
	metadataErr := false
	var awsRelationalDatabaseDefErr error
	var workloadInstErr error
	for _, r := range *awsRelationalDatabaseInstances {
		var awsRelationalDatabaseDefName string
		awsRelationalDatabaseDefinition, err := client.GetAwsRelationalDatabaseDefinitionByID(
			apiClient,
			apiEndpoint,
			*r.AwsRelationalDatabaseDefinitionID,
		)
		if err != nil {
			metadataErr = true
			awsRelationalDatabaseDefErr = err
			awsRelationalDatabaseDefName = "<error>"
		} else {
			awsRelationalDatabaseDefName = *awsRelationalDatabaseDefinition.Name
		}
		var workloadInstName string
		workloadInstance, err := client.GetWorkloadInstanceByID(
			apiClient,
			apiEndpoint,
			*r.WorkloadInstanceID,
		)
		if err != nil {
			metadataErr = true
			workloadInstErr = err
			workloadInstName = "<error>"
		} else {
			workloadInstName = *workloadInstance.Name
		}

		fmt.Fprintln(
			writer,
			*r.Name, "\t",
			awsRelationalDatabaseDefName, "\t",
			workloadInstName, "\t",
			util.GetAge(r.CreatedAt),
		)
	}
	writer.Flush()

	if metadataErr {
		multiError := util.MultiError{}
		if awsRelationalDatabaseDefErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving AWS relational database definition info: %w", awsRelationalDatabaseDefErr),
			)
		}
		if workloadInstErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving workload instance info: %w", workloadInstErr),
			)
		}
		return multiError.Error()
	}

	return nil
}

// outputGetAwsObjectStorageBucketsCmd produces the tabular output for the
// 'tptctl get aws-object-storage-buckets' command.
func outputGetAwsObjectStorageBucketsCmd(
	awsObjectStorageBucketInstances *[]v0.AwsObjectStorageBucketInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AWS OBJECT STORAGE BUCKET DEFINITION\t AWS OBJECT STORAGE BUCKET INSTANCE\t AGE")
	var awsObjectStorageBucketDefErr error
	for _, o := range *awsObjectStorageBucketInstances {
		var awsObjectStorageBucketDefName string
		awsObjectStorageBucketDefinition, err := client.GetAwsObjectStorageBucketDefinitionByID(
			apiClient,
			apiEndpoint,
			*o.AwsObjectStorageBucketDefinitionID,
		)
		if err != nil {
			awsObjectStorageBucketDefErr = err
			awsObjectStorageBucketDefName = "<error>"
		} else {
			awsObjectStorageBucketDefName = *awsObjectStorageBucketDefinition.Name
		}

		fmt.Fprintln(
			writer,
			*o.Name, "\t",
			awsObjectStorageBucketDefName, "\t",
			*o.Name, "\t",
			util.GetAge(o.CreatedAt),
		)
	}
	writer.Flush()

	if awsObjectStorageBucketDefErr != nil {
		return fmt.Errorf("encountered an error retrieving AWS object storage bucket definition info: %w", awsObjectStorageBucketDefErr)
	}

	return nil
}

// outputGetv0AwsObjectStorageBucketDefinitionsCmd produces the tabular output for the
// 'tptctl get aws-object-storage-bucket-definitions' command.
func outputGetv0AwsObjectStorageBucketDefinitionsCmd(
	awsObjectStorageBucketDefinitions *[]v0.AwsObjectStorageBucketDefinition,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t PUBLIC READ ACCESS\t WORKLOAD SERVICE ACCOUNT NAME\t WORKLOAD BUCKET CONFIG MAP\t AWS ACCOUNT NAME\t AGE")
	var awsAccountErr error
	for _, o := range *awsObjectStorageBucketDefinitions {
		var awsAccountName string
		awsAccount, err := client.GetAwsAccountByID(apiClient, apiEndpoint, *o.AwsAccountID)
		if err != nil {
			awsAccountName = "<error>"
			awsAccountErr = err
		} else {
			awsAccountName = *awsAccount.Name
		}

		fmt.Fprintln(
			writer,
			*o.Name, "\t",
			*o.PublicReadAccess, "\t",
			*o.WorkloadServiceAccountName, "\t",
			*o.WorkloadBucketEnvVar, "\t",
			awsAccountName, "\t",
			util.GetAge(o.CreatedAt),
		)
	}
	writer.Flush()

	if awsAccountErr != nil {
		return fmt.Errorf("encountered an error retrieving AWS account info: %w", awsAccountErr)
	}

	return nil
}

// outputGetv0AwsObjectStorageBucketInstancesCmd produces the tabular output for the
// 'tptctl get aws-object-storage-bucket-instances' command.
func outputGetv0AwsObjectStorageBucketInstancesCmd(
	awsObjectStorageBucketInstances *[]v0.AwsObjectStorageBucketInstance,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	writer := tabwriter.NewWriter(os.Stdout, 4, 4, 4, ' ', 0)
	fmt.Fprintln(writer, "NAME\t AWS OBJECT STORAGE BUCKET DEFINITION\t WORKLOAD INSTANCE\t AGE")
	metadataErr := false
	var awsObjectStorageBucketDefErr error
	var workloadInstErr error
	for _, o := range *awsObjectStorageBucketInstances {
		var awsObjectStorageBucketDefName string
		awsObjectStorageBucketDefinition, err := client.GetAwsObjectStorageBucketDefinitionByID(
			apiClient,
			apiEndpoint,
			*o.AwsObjectStorageBucketDefinitionID,
		)
		if err != nil {
			metadataErr = true
			awsObjectStorageBucketDefErr = err
			awsObjectStorageBucketDefName = "<error>"
		} else {
			awsObjectStorageBucketDefName = *awsObjectStorageBucketDefinition.Name
		}
		var workloadInstName string
		workloadInstance, err := client.GetWorkloadInstanceByID(
			apiClient,
			apiEndpoint,
			*o.WorkloadInstanceID,
		)
		if err != nil {
			metadataErr = true
			workloadInstErr = err
			workloadInstName = "<error>"
		} else {
			workloadInstName = *workloadInstance.Name
		}

		fmt.Fprintln(
			writer,
			*o.Name, "\t",
			awsObjectStorageBucketDefName, "\t",
			workloadInstName, "\t",
			util.GetAge(o.CreatedAt),
		)
	}
	writer.Flush()

	if metadataErr {
		multiError := util.MultiError{}
		if awsObjectStorageBucketDefErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving AWS object storage bucket definition info: %w", awsObjectStorageBucketDefErr),
			)
		}
		if workloadInstErr != nil {
			multiError.AppendError(
				fmt.Errorf("encountered an error retrieving workload instance info: %w", workloadInstErr),
			)
		}
		return multiError.Error()
	}

	return nil
}
