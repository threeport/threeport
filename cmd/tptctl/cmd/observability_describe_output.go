// originally generated by 'threeport-sdk codegen api-model' but will not be regenerated - intended for modification

package cmd

import (
	"fmt"
	"net/http"

	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
)

// outputDescribev0ObservabilityStackDefinitionCmd produces the plain description
// output for the 'tptctl describe observability-stack-definition' command
func outputDescribev0ObservabilityStackDefinitionCmd(
	observabilityStackDefinition *v0.ObservabilityStackDefinition,
	observabilityStackDefinitionConfig *config.ObservabilityStackDefinitionConfig,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	// get helm workload definition from the dashboard definition
	dashboardIncluded := false
	var grafanaHelmWorkloadDef string
	if observabilityStackDefinition.ObservabilityDashboardDefinitionID != nil {
		dashboardIncluded = true
		dashboardDefinition, err := client.GetObservabilityDashboardDefinitionByID(
			apiClient,
			apiEndpoint,
			*observabilityStackDefinition.ObservabilityDashboardDefinitionID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve observability dashboard definition: %w", err)
		}
		if dashboardDefinition.GrafanaHelmWorkloadDefinitionID != nil {
			grafanaHelmWorkloadDefinition, err := client.GetHelmWorkloadDefinitionByID(
				apiClient,
				apiEndpoint,
				*dashboardDefinition.GrafanaHelmWorkloadDefinitionID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve grafana helm workload definition: %w", err)
			}
			grafanaHelmWorkloadDef = *grafanaHelmWorkloadDefinition.Name
		} else {
			grafanaHelmWorkloadDef = "<not found>"
		}
	}

	// get helm workload definition from the metrics definition
	metricsIncluded := false
	var promHelmWorkloadDef string
	if observabilityStackDefinition.MetricsDefinitionID != nil {
		metricsIncluded = true
		metricsDefinition, err := client.GetMetricsDefinitionByID(
			apiClient,
			apiEndpoint,
			*observabilityStackDefinition.MetricsDefinitionID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve metrics definition: %w", err)
		}
		if metricsDefinition.KubePrometheusStackHelmWorkloadDefinitionID != nil {
			prometheusHelmWorkloadDefinition, err := client.GetHelmWorkloadDefinitionByID(
				apiClient,
				apiEndpoint,
				*metricsDefinition.KubePrometheusStackHelmWorkloadDefinitionID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve prometheus helm workload definition: %w", err)
			}
			promHelmWorkloadDef = *prometheusHelmWorkloadDefinition.Name
		} else {
			promHelmWorkloadDef = "<not found>"
		}
	}

	// get helm workload definition from the logging definition
	loggingIncluded := false
	var lokiHelmWorkloadDef string
	var promtailHelmWorkloadDef string
	if observabilityStackDefinition.LoggingDefinitionID != nil {
		loggingIncluded = true
		loggingDefinition, err := client.GetLoggingDefinitionByID(
			apiClient,
			apiEndpoint,
			*observabilityStackDefinition.LoggingDefinitionID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve logging definition: %w", err)
		}
		if loggingDefinition.LokiHelmWorkloadDefinitionID != nil {
			lokiHelmWorkloadDefinition, err := client.GetHelmWorkloadDefinitionByID(
				apiClient,
				apiEndpoint,
				*loggingDefinition.LokiHelmWorkloadDefinitionID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve loki helm workload definition: %w", err)
			}
			lokiHelmWorkloadDef = *lokiHelmWorkloadDefinition.Name
		} else {
			lokiHelmWorkloadDef = "<not found>"
		}

		if loggingDefinition.PromtailHelmWorkloadDefinitionID != nil {
			promtailHelmWorkloadDefinition, err := client.GetHelmWorkloadDefinitionByID(
				apiClient,
				apiEndpoint,
				*loggingDefinition.PromtailHelmWorkloadDefinitionID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve promtail helm workload definition: %w", err)
			}
			promtailHelmWorkloadDef = *promtailHelmWorkloadDefinition.Name
		} else {
			promtailHelmWorkloadDef = "<not found>"
		}
	}

	// get observability stack instances associated with this definition
	observabilityStackInstances, err := client.GetObservabilityStackInstancesByQueryString(
		apiClient,
		apiEndpoint,
		fmt.Sprintf("observabilitystackdefinitionid=%d", *observabilityStackDefinition.ID),
	)
	if err != nil {
		return fmt.Errorf("failed to retrieve workload instances for definition: %w", err)
	}

	// output describe details
	fmt.Printf(
		"* ObservabilityStackDefinition Name: %s\n",
		*observabilityStackDefinitionConfig.ObservabilityStackDefinition.Name,
	)
	fmt.Printf(
		"* Created: %s\n",
		*observabilityStackDefinition.CreatedAt,
	)
	fmt.Printf(
		"* Last Modified: %s\n",
		*observabilityStackDefinition.UpdatedAt,
	)
	if len(*observabilityStackInstances) == 0 {
		fmt.Println("* No observability stack instances currently derived from this definition.")
	} else {
		fmt.Println("* Derived Observability Stack Instances:")
		for _, o := range *observabilityStackInstances {
			fmt.Printf("  * %s\n", *o.Name)
		}
	}
	if dashboardIncluded {
		fmt.Printf(
			"* Observability Dashboard HelmWorkloads:\n  * Grafana: %s\n",
			grafanaHelmWorkloadDef,
		)
	}
	if metricsIncluded {
		fmt.Printf(
			"* Metrics HelmWorkloads:\n  * KubePrometheusStack: %s\n",
			promHelmWorkloadDef,
		)
	}
	if loggingIncluded {
		fmt.Printf(
			"* Logging HelmWorkloads:\n  * Loki: %s\n  * Promtail: %s\n",
			lokiHelmWorkloadDef,
			promtailHelmWorkloadDef,
		)
	}

	return nil
}

// outputDescribev0ObservabilityStackInstanceCmd produces the plain description
// output for the 'tptctl describe observability-stack-instance' command
func outputDescribev0ObservabilityStackInstanceCmd(
	observabilityStackInstance *v0.ObservabilityStackInstance,
	observabilityStackInstanceConfig *config.ObservabilityStackInstanceConfig,
	apiClient *http.Client,
	apiEndpoint string,
) error {
	// get helm workload definition from the dashboard definition
	dashboardIncluded := false
	var grafanaHelmWorkloadInst string
	if observabilityStackInstance.ObservabilityDashboardInstanceID != nil {
		dashboardIncluded = true
		dashboardInstance, err := client.GetObservabilityDashboardInstanceByID(
			apiClient,
			apiEndpoint,
			*observabilityStackInstance.ObservabilityDashboardInstanceID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve observability dashboard definition: %w", err)
		}
		if dashboardInstance.GrafanaHelmWorkloadInstanceID != nil {
			grafanaHelmWorkloadInstance, err := client.GetHelmWorkloadInstanceByID(
				apiClient,
				apiEndpoint,
				*dashboardInstance.GrafanaHelmWorkloadInstanceID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve grafana helm workload definition: %w", err)
			}
			grafanaHelmWorkloadInst = *grafanaHelmWorkloadInstance.Name
		} else {
			grafanaHelmWorkloadInst = "<not found>"
		}
	}

	// get helm workload definition from the metrics definition
	metricsIncluded := false
	var promHelmWorkloadInst string
	if observabilityStackInstance.MetricsInstanceID != nil {
		metricsIncluded = true
		metricsInstance, err := client.GetMetricsInstanceByID(
			apiClient,
			apiEndpoint,
			*observabilityStackInstance.MetricsInstanceID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve metrics definition: %w", err)
		}
		if metricsInstance.KubePrometheusStackHelmWorkloadInstanceID != nil {
			prometheusHelmWorkloadInstance, err := client.GetHelmWorkloadInstanceByID(
				apiClient,
				apiEndpoint,
				*metricsInstance.KubePrometheusStackHelmWorkloadInstanceID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve prometheus helm workload definition: %w", err)
			}
			promHelmWorkloadInst = *prometheusHelmWorkloadInstance.Name
		} else {
			promHelmWorkloadInst = "<not found>"
		}
	}

	// get helm workload definition from the logging definition
	loggingIncluded := false
	var lokiHelmWorkloadInst string
	var promtailHelmWorkloadInst string
	if observabilityStackInstance.LoggingInstanceID != nil {
		loggingIncluded = true
		loggingInstance, err := client.GetLoggingInstanceByID(
			apiClient,
			apiEndpoint,
			*observabilityStackInstance.LoggingInstanceID,
		)
		if err != nil {
			return fmt.Errorf("failed to retreieve logging definition: %w", err)
		}
		if loggingInstance.LokiHelmWorkloadInstanceID != nil {
			lokiHelmWorkloadInstance, err := client.GetHelmWorkloadInstanceByID(
				apiClient,
				apiEndpoint,
				*loggingInstance.LokiHelmWorkloadInstanceID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve loki helm workload definition: %w", err)
			}
			lokiHelmWorkloadInst = *lokiHelmWorkloadInstance.Name
		} else {
			lokiHelmWorkloadInst = "<not found>"
		}

		if loggingInstance.PromtailHelmWorkloadInstanceID != nil {
			promtailHelmWorkloadInstance, err := client.GetHelmWorkloadInstanceByID(
				apiClient,
				apiEndpoint,
				*loggingInstance.PromtailHelmWorkloadInstanceID,
			)
			if err != nil {
				return fmt.Errorf("failed to retrieve promtail helm workload definition: %w", err)
			}
			promtailHelmWorkloadInst = *promtailHelmWorkloadInstance.Name
		} else {
			promtailHelmWorkloadInst = "<not found>"
		}
	}

	// get assoicated observability stack definition
	observabilityStackDefinition, err := client.GetObservabilityStackDefinitionByID(
		apiClient,
		apiEndpoint,
		*observabilityStackInstance.ObservabilityStackDefinitionID,
	)
	if err != nil {
		return fmt.Errorf("failed to retrieve observability stack definition for instance: %w", err)
	}

	// output describe details
	fmt.Printf(
		"* ObservabilityStackInstance Name: %s\n",
		*observabilityStackInstanceConfig.ObservabilityStackInstance.Name,
	)
	fmt.Printf(
		"* Created: %s\n",
		*observabilityStackInstance.CreatedAt,
	)
	fmt.Printf(
		"* Last Modified: %s\n",
		*observabilityStackInstance.UpdatedAt,
	)
	fmt.Printf(
		"* Associated ObservabilityStackDefinition: %s\n",
		*observabilityStackDefinition.Name,
	)
	if dashboardIncluded {
		fmt.Printf(
			"* Observability Dashboard HelmWorkloads:\n  * Grafana: %s\n",
			grafanaHelmWorkloadInst,
		)
	}
	if metricsIncluded {
		fmt.Printf(
			"* Metrics HelmWorkloads:\n  * KubePrometheusStack: %s\n",
			promHelmWorkloadInst,
		)
	}
	if loggingIncluded {
		fmt.Printf(
			"* Logging HelmWorkloads:\n  * Loki: %s\n  * Promtail: %s\n",
			lokiHelmWorkloadInst,
			promtailHelmWorkloadInst,
		)
	}

	return nil
}
