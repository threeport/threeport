// generated by 'threeport-sdk codegen api-model' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// HelmWorkload
///////////////////////////////////////////////////////////////////////////////

// GetHelmWorkloadsCmd represents the helm-workload command
var GetHelmWorkloadsCmd = &cobra.Command{
	Example: "  tptctl get helm-workloads",
	Long:    "Get helm workloads from the system.\n\nA helm workload is a simple abstraction of helm workload definitions and helm workload instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get helm workloads
		helmWorkloadInstances, err := client.GetHelmWorkloadInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve helm workload instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*helmWorkloadInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No helm workload instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetHelmWorkloadsCmd(
			helmWorkloadInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get helm workloads from the system",
	SilenceUsage: true,
	Use:          "helm-workloads",
}

func init() {
	GetCmd.AddCommand(GetHelmWorkloadsCmd)

	GetHelmWorkloadsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createHelmWorkloadConfigPath string

// CreateHelmWorkloadCmd represents the helm-workload command
var CreateHelmWorkloadCmd = &cobra.Command{
	Example: "  tptctl create helm-workload --config path/to/config.yaml",
	Long:    "Create a new helm workload. This command creates a new helm workload definition and helm workload instance based on the helm workload config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load helm workload config
		configContent, err := os.ReadFile(createHelmWorkloadConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var helmWorkloadConfig config.HelmWorkloadConfig
		if err := yaml.UnmarshalStrict(configContent, &helmWorkloadConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create helm workload
		helmWorkload := helmWorkloadConfig.HelmWorkload
		helmWorkload.HelmWorkloadConfigPath = createHelmWorkloadConfigPath
		createdHelmWorkloadDefinition, createdHelmWorkloadInstance, err := helmWorkload.Create(
			apiClient,
			apiEndpoint,
		)
		if err != nil {
			cli.Error("failed to create helm workload", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("helm workload definition %s created", *createdHelmWorkloadDefinition.Name))
		cli.Info(fmt.Sprintf("helm workload instance %s created", *createdHelmWorkloadInstance.Name))
		cli.Complete(fmt.Sprintf("helm workload %s created", helmWorkloadConfig.HelmWorkload.Name))
	},
	Short:        "Create a new helm workload",
	SilenceUsage: true,
	Use:          "helm-workload",
}

func init() {
	CreateCmd.AddCommand(CreateHelmWorkloadCmd)

	CreateHelmWorkloadCmd.Flags().StringVarP(
		&createHelmWorkloadConfigPath,
		"config", "c", "", "Path to file with helm workload config.",
	)
	CreateHelmWorkloadCmd.MarkFlagRequired("config")
	CreateHelmWorkloadCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteHelmWorkloadConfigPath string
	deleteHelmWorkloadName       string
)

// DeleteHelmWorkloadCmd represents the helm-workload command
var DeleteHelmWorkloadCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete helm-workload --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete helm-workload --name some-helm-workload",
	Long:    "Delete an existing helm workload. This command deletes an existing helm workload definition and helm workload instance based on the helm workload config.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if deleteHelmWorkloadConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		var helmWorkloadConfig config.HelmWorkloadConfig
		// load helm workload config
		configContent, err := os.ReadFile(deleteHelmWorkloadConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		if err := yaml.UnmarshalStrict(configContent, &helmWorkloadConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// delete helm workload
		helmWorkload := helmWorkloadConfig.HelmWorkload
		helmWorkload.HelmWorkloadConfigPath = deleteHelmWorkloadConfigPath
		_, _, err = helmWorkload.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete helm workload", err)
			os.Exit(1)
		}

		cli.Info(fmt.Sprintf("helm workload definition %s deleted", helmWorkload.Name))
		cli.Info(fmt.Sprintf("helm workload instance %s deleted", helmWorkload.Name))
		cli.Complete(fmt.Sprintf("helm workload %s deleted", helmWorkloadConfig.HelmWorkload.Name))
	},
	Short:        "Delete an existing helm workload",
	SilenceUsage: true,
	Use:          "helm-workload",
}

func init() {
	DeleteCmd.AddCommand(DeleteHelmWorkloadCmd)

	DeleteHelmWorkloadCmd.Flags().StringVarP(
		&deleteHelmWorkloadConfigPath,
		"config", "c", "", "Path to file with helm workload config.",
	)
	DeleteHelmWorkloadCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// HelmWorkloadDefinition
///////////////////////////////////////////////////////////////////////////////

// GetHelmWorkloadDefinitionsCmd represents the helm-workload-definition command
var GetHelmWorkloadDefinitionsCmd = &cobra.Command{
	Example: "  tptctl get helm-workload-definitions",
	Long:    "Get helm workload definitions from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get helm workload definitions
		helmWorkloadDefinitions, err := client.GetHelmWorkloadDefinitions(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve helm workload definitions", err)
			os.Exit(1)
		}

		// write the output
		if len(*helmWorkloadDefinitions) == 0 {
			cli.Info(fmt.Sprintf(
				"No helm workload definitions currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetHelmWorkloadDefinitionsCmd(
			helmWorkloadDefinitions,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get helm workload definitions from the system",
	SilenceUsage: true,
	Use:          "helm-workload-definitions",
}

func init() {
	GetCmd.AddCommand(GetHelmWorkloadDefinitionsCmd)

	GetHelmWorkloadDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createHelmWorkloadDefinitionConfigPath string

// CreateHelmWorkloadDefinitionCmd represents the helm-workload-definition command
var CreateHelmWorkloadDefinitionCmd = &cobra.Command{
	Example: "  tptctl create helm-workload-definition --config path/to/config.yaml",
	Long:    "Create a new helm workload definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load helm workload definition config
		configContent, err := os.ReadFile(createHelmWorkloadDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var helmWorkloadDefinitionConfig config.HelmWorkloadDefinitionConfig
		if err := yaml.UnmarshalStrict(configContent, &helmWorkloadDefinitionConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create helm workload definition
		helmWorkloadDefinition := helmWorkloadDefinitionConfig.HelmWorkloadDefinition
		helmWorkloadDefinition.HelmWorkloadConfigPath = createHelmWorkloadDefinitionConfigPath
		createdHelmWorkloadDefinition, err := helmWorkloadDefinition.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create helm workload definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("helm workload definition %s created", *createdHelmWorkloadDefinition.Name))
	},
	Short:        "Create a new helm workload definition",
	SilenceUsage: true,
	Use:          "helm-workload-definition",
}

func init() {
	CreateCmd.AddCommand(CreateHelmWorkloadDefinitionCmd)

	CreateHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&createHelmWorkloadDefinitionConfigPath,
		"config", "c", "", "Path to file with helm workload definition config.",
	)
	CreateHelmWorkloadDefinitionCmd.MarkFlagRequired("config")
	CreateHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteHelmWorkloadDefinitionConfigPath string
	deleteHelmWorkloadDefinitionName       string
)

// DeleteHelmWorkloadDefinitionCmd represents the helm-workload-definition command
var DeleteHelmWorkloadDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete helm-workload-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete helm-workload-definition --name some-helm-workload-definition",
	Long:    "Delete an existing helm workload definition.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteHelmWorkloadDefinitionConfigPath,
			deleteHelmWorkloadDefinitionName,
			"helm workload definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var helmWorkloadDefinitionConfig config.HelmWorkloadDefinitionConfig
		if deleteHelmWorkloadDefinitionConfigPath != "" {
			// load helm workload definition config
			configContent, err := os.ReadFile(deleteHelmWorkloadDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &helmWorkloadDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			helmWorkloadDefinitionConfig = config.HelmWorkloadDefinitionConfig{
				HelmWorkloadDefinition: config.HelmWorkloadDefinitionValues{
					Name: deleteHelmWorkloadDefinitionName,
				},
			}
		}

		// delete helm workload definition
		helmWorkloadDefinition := helmWorkloadDefinitionConfig.HelmWorkloadDefinition
		helmWorkloadDefinition.HelmWorkloadConfigPath = deleteHelmWorkloadDefinitionConfigPath
		deletedHelmWorkloadDefinition, err := helmWorkloadDefinition.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete helm workload definition", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("helm workload definition %s deleted", *deletedHelmWorkloadDefinition.Name))
	},
	Short:        "Delete an existing helm workload definition",
	SilenceUsage: true,
	Use:          "helm-workload-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteHelmWorkloadDefinitionCmd)

	DeleteHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&deleteHelmWorkloadDefinitionConfigPath,
		"config", "c", "", "Path to file with helm workload definition config.",
	)
	DeleteHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&deleteHelmWorkloadDefinitionName,
		"name", "n", "", "Name of helm workload definition.",
	)
	DeleteHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeHelmWorkloadDefinitionConfigPath string
	describeHelmWorkloadDefinitionName       string
	describeHelmWorkloadDefinitionField      string
	describeHelmWorkloadDefinitionOutput     string
)

// DescribeHelmWorkloadDefinitionCmd representes the helm-workload-definition command
var DescribeHelmWorkloadDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a helm workload definition\n  tptctl describe helm-workload-definition -n some-helm-workload-definition\n\n  # Get JSON output for a helm workload definition\n  tptctl describe helm-workload-definition -n some-helm-workload-definition -o json\n\n  # Get the value of the Name field for a helm workload definition\n  tptctl describe helm-workload-definition -n some-helm-workload-definition -f Name ",
	Long:    "Describe a helm workload definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeHelmWorkloadDefinitionConfigPath,
			describeHelmWorkloadDefinitionName,
			"helm workload definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeHelmWorkloadDefinitionOutput,
			"helm workload definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load helm workload definition config by name or config file
		var helmWorkloadDefinitionConfig config.HelmWorkloadDefinitionConfig
		if describeHelmWorkloadDefinitionConfigPath != "" {
			configContent, err := os.ReadFile(describeHelmWorkloadDefinitionConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &helmWorkloadDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			helmWorkloadDefinitionConfig = config.HelmWorkloadDefinitionConfig{
				HelmWorkloadDefinition: config.HelmWorkloadDefinitionValues{
					Name: describeHelmWorkloadDefinitionName,
				},
			}
		}

		// get helm workload definition
		helmWorkloadDefinition, err := client.GetHelmWorkloadDefinitionByName(
			apiClient,
			apiEndpoint,
			helmWorkloadDefinitionConfig.HelmWorkloadDefinition.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve helm workload definition details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeHelmWorkloadDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				helmWorkloadDefinition,
				describeHelmWorkloadDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from helm workload definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(helmWorkloadDefinition, describeHelmWorkloadDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeHelmWorkloadDefinitionOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeHelmWorkloadDefinitionCmd(
				helmWorkloadDefinition,
				&helmWorkloadDefinitionConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe helm workload definition", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedHelmWorkloadDefinition := encryption.RedactEncryptedValues(helmWorkloadDefinition)

			// marshal to JSON then print
			helmWorkloadDefinitionJson, err := json.MarshalIndent(redactedHelmWorkloadDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal helm workload definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(helmWorkloadDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedHelmWorkloadDefinition := encryption.RedactEncryptedValues(helmWorkloadDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			helmWorkloadDefinitionJson, err := json.MarshalIndent(redactedHelmWorkloadDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal helm workload definition into JSON", err)
				os.Exit(1)
			}
			helmWorkloadDefinitionYaml, err := ghodss_yaml.JSONToYAML(helmWorkloadDefinitionJson)
			if err != nil {
				cli.Error("failed to convert helm workload definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(helmWorkloadDefinitionYaml))
		}
	},
	Short:        "Describe a helm workload definition",
	SilenceUsage: true,
	Use:          "helm-workload-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeHelmWorkloadDefinitionCmd)

	DescribeHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&describeHelmWorkloadDefinitionConfigPath,
		"config", "c", "", "Path to file with helm workload definition config.")
	DescribeHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&describeHelmWorkloadDefinitionName,
		"name", "n", "", "Name of helm workload definition.")
	DescribeHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&describeHelmWorkloadDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&describeHelmWorkloadDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeHelmWorkloadDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

///////////////////////////////////////////////////////////////////////////////
// HelmWorkloadInstance
///////////////////////////////////////////////////////////////////////////////

// GetHelmWorkloadInstancesCmd represents the helm-workload-instance command
var GetHelmWorkloadInstancesCmd = &cobra.Command{
	Example: "  tptctl get helm-workload-instances",
	Long:    "Get helm workload instances from the system.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := getClientContext(cmd)

		// get helm workload instances
		helmWorkloadInstances, err := client.GetHelmWorkloadInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve helm workload instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*helmWorkloadInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No helm workload instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetHelmWorkloadInstancesCmd(
			helmWorkloadInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output", err)
			os.Exit(0)
		}
	},
	Short:        "Get helm workload instances from the system",
	SilenceUsage: true,
	Use:          "helm-workload-instances",
}

func init() {
	GetCmd.AddCommand(GetHelmWorkloadInstancesCmd)

	GetHelmWorkloadInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var createHelmWorkloadInstanceConfigPath string

// CreateHelmWorkloadInstanceCmd represents the helm-workload-instance command
var CreateHelmWorkloadInstanceCmd = &cobra.Command{
	Example: "  tptctl create helm-workload-instance --config path/to/config.yaml",
	Long:    "Create a new helm workload instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// load helm workload instance config
		configContent, err := os.ReadFile(createHelmWorkloadInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var helmWorkloadInstanceConfig config.HelmWorkloadInstanceConfig
		if err := yaml.UnmarshalStrict(configContent, &helmWorkloadInstanceConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		// create helm workload instance
		helmWorkloadInstance := helmWorkloadInstanceConfig.HelmWorkloadInstance
		helmWorkloadInstance.HelmWorkloadConfigPath = createHelmWorkloadInstanceConfigPath
		createdHelmWorkloadInstance, err := helmWorkloadInstance.Create(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to create helm workload instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("helm workload instance %s created", *createdHelmWorkloadInstance.Name))
	},
	Short:        "Create a new helm workload instance",
	SilenceUsage: true,
	Use:          "helm-workload-instance",
}

func init() {
	CreateCmd.AddCommand(CreateHelmWorkloadInstanceCmd)

	CreateHelmWorkloadInstanceCmd.Flags().StringVarP(
		&createHelmWorkloadInstanceConfigPath,
		"config", "c", "", "Path to file with helm workload instance config.",
	)
	CreateHelmWorkloadInstanceCmd.MarkFlagRequired("config")
	CreateHelmWorkloadInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	deleteHelmWorkloadInstanceConfigPath string
	deleteHelmWorkloadInstanceName       string
)

// DeleteHelmWorkloadInstanceCmd represents the helm-workload-instance command
var DeleteHelmWorkloadInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl delete helm-workload-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete helm-workload-instance --name some-helm-workload-instance",
	Long:    "Delete an existing helm workload instance.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteHelmWorkloadInstanceConfigPath,
			deleteHelmWorkloadInstanceName,
			"helm workload instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		var helmWorkloadInstanceConfig config.HelmWorkloadInstanceConfig
		if deleteHelmWorkloadInstanceConfigPath != "" {
			// load helm workload instance config
			configContent, err := os.ReadFile(deleteHelmWorkloadInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &helmWorkloadInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			helmWorkloadInstanceConfig = config.HelmWorkloadInstanceConfig{
				HelmWorkloadInstance: config.HelmWorkloadInstanceValues{
					Name: deleteHelmWorkloadInstanceName,
				},
			}
		}

		// delete helm workload instance
		helmWorkloadInstance := helmWorkloadInstanceConfig.HelmWorkloadInstance
		helmWorkloadInstance.HelmWorkloadConfigPath = deleteHelmWorkloadInstanceConfigPath
		deletedHelmWorkloadInstance, err := helmWorkloadInstance.Delete(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to delete helm workload instance", err)
			os.Exit(1)
		}

		cli.Complete(fmt.Sprintf("helm workload instance %s deleted", *deletedHelmWorkloadInstance.Name))
	},
	Short:        "Delete an existing helm workload instance",
	SilenceUsage: true,
	Use:          "helm-workload-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteHelmWorkloadInstanceCmd)

	DeleteHelmWorkloadInstanceCmd.Flags().StringVarP(
		&deleteHelmWorkloadInstanceConfigPath,
		"config", "c", "", "Path to file with helm workload instance config.",
	)
	DeleteHelmWorkloadInstanceCmd.Flags().StringVarP(
		&deleteHelmWorkloadInstanceName,
		"name", "n", "", "Name of helm workload instance.",
	)
	DeleteHelmWorkloadInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	describeHelmWorkloadInstanceConfigPath string
	describeHelmWorkloadInstanceName       string
	describeHelmWorkloadInstanceField      string
	describeHelmWorkloadInstanceOutput     string
)

// DescribeHelmWorkloadInstanceCmd representes the helm-workload-instance command
var DescribeHelmWorkloadInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a helm workload instance\n  tptctl describe helm-workload-instance -n some-helm-workload-instance\n\n  # Get JSON output for a helm workload instance\n  tptctl describe helm-workload-instance -n some-helm-workload-instance -o json\n\n  # Get the value of the Name field for a helm workload instance\n  tptctl describe helm-workload-instance -n some-helm-workload-instance -f Name ",
	Long:    "Describe a helm workload instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  commandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := getClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeHelmWorkloadInstanceConfigPath,
			describeHelmWorkloadInstanceName,
			"helm workload instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeHelmWorkloadInstanceOutput,
			"helm workload instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// load helm workload instance config by name or config file
		var helmWorkloadInstanceConfig config.HelmWorkloadInstanceConfig
		if describeHelmWorkloadInstanceConfigPath != "" {
			configContent, err := os.ReadFile(describeHelmWorkloadInstanceConfigPath)
			if err != nil {
				cli.Error("failed to read config file", err)
				os.Exit(1)
			}
			if err := yaml.UnmarshalStrict(configContent, &helmWorkloadInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}
		} else {
			helmWorkloadInstanceConfig = config.HelmWorkloadInstanceConfig{
				HelmWorkloadInstance: config.HelmWorkloadInstanceValues{
					Name: describeHelmWorkloadInstanceName,
				},
			}
		}

		// get helm workload instance
		helmWorkloadInstance, err := client.GetHelmWorkloadInstanceByName(
			apiClient,
			apiEndpoint,
			helmWorkloadInstanceConfig.HelmWorkloadInstance.Name,
		)
		if err != nil {
			cli.Error("failed to retrieve helm workload instance details", err)
			os.Exit(1)
		}

		// return field value if specified
		if describeHelmWorkloadInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				helmWorkloadInstance,
				describeHelmWorkloadInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from helm workload instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(helmWorkloadInstance, describeHelmWorkloadInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		switch describeHelmWorkloadInstanceOutput {
		case "plain":
			// produce plain object description output
			if err := outputDescribeHelmWorkloadInstanceCmd(
				helmWorkloadInstance,
				&helmWorkloadInstanceConfig,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to describe helm workload instance", err)
				os.Exit(1)
			}
		case "json":
			// redact encrypted values
			redactedHelmWorkloadInstance := encryption.RedactEncryptedValues(helmWorkloadInstance)

			// marshal to JSON then print
			helmWorkloadInstanceJson, err := json.MarshalIndent(redactedHelmWorkloadInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal helm workload instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(helmWorkloadInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedHelmWorkloadInstance := encryption.RedactEncryptedValues(helmWorkloadInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			helmWorkloadInstanceJson, err := json.MarshalIndent(redactedHelmWorkloadInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal helm workload instance into JSON", err)
				os.Exit(1)
			}
			helmWorkloadInstanceYaml, err := ghodss_yaml.JSONToYAML(helmWorkloadInstanceJson)
			if err != nil {
				cli.Error("failed to convert helm workload instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(helmWorkloadInstanceYaml))
		}
	},
	Short:        "Describe a helm workload instance",
	SilenceUsage: true,
	Use:          "helm-workload-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeHelmWorkloadInstanceCmd)

	DescribeHelmWorkloadInstanceCmd.Flags().StringVarP(
		&describeHelmWorkloadInstanceConfigPath,
		"config", "c", "", "Path to file with helm workload instance config.")
	DescribeHelmWorkloadInstanceCmd.Flags().StringVarP(
		&describeHelmWorkloadInstanceName,
		"name", "n", "", "Name of helm workload instance.")
	DescribeHelmWorkloadInstanceCmd.Flags().StringVarP(
		&describeHelmWorkloadInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object")
	DescribeHelmWorkloadInstanceCmd.Flags().StringVarP(
		&describeHelmWorkloadInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.")
	DescribeHelmWorkloadInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}
