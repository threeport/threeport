package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v2"

	"github.com/threeport/threeport/internal/sdk"
	"github.com/threeport/threeport/internal/sdk/manager"
	"github.com/threeport/threeport/internal/sdk/mod"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

var initConfig string

// initCmd represents the init command to initialize a new Threeport extention.
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new Threeport extension project.",
	Long:  `Initialize a new Threeport extension project.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		// get sdk config
		sdkConfig, err := sdk.GetSDKConfig()
		if err != nil {
			cli.Error("failed to get sdk config", err)
			os.Exit(1)
		}

		// create api-object config
		configContent, err := os.ReadFile(initConfig)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		var apiObjectConfig sdk.SdkConfig
		if err := yaml.UnmarshalStrict(configContent, &apiObjectConfig); err != nil {
			cli.Error("failed to unmarshal config file yaml content", err)
			os.Exit(1)
		}

		//// create object manager
		//objManager, err := manager.CreateManager(sdkConfig)
		//if err != nil {
		//	cli.Error("failed to get api object manager", err)
		//	os.Exit(1)
		//}

		// get go version
		version, err := mod.GetMajorMinorVersionFromGoModule()
		if err != nil {
			cli.Error("failed to get go version", err)
			os.Exit(1)
		}
		fmt.Println("-----------------------------------")
		fmt.Println(version)

		// create directories for API objects
		//if err = manager.CreateApiDirs(apiObjectConfig); err != nil {
		if err = manager.CreateApiDirs(sdkConfig); err != nil {
			cli.Error("failed to get create directories for API source code", err)
			os.Exit(1)
		}

		return nil
	},
}

func init() {
	RootCmd.AddCommand(initCmd)

	initCmd.Flags().StringVarP(
		&initConfig,
		"config", "c", "", "Path to file with Threeport SDK config.",
	)
	initCmd.MarkFlagRequired("config")
}
